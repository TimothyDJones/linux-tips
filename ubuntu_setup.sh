#!/bin/bash

function getKernelType() {
	local KERNEL_TYPE

	# Determine if this is 32-bit or 64-bit version of kernel.
	if [[ $(uname -m | grep '64') ]]; then  # Check for 64-bit Linux kernel
		KERNEL_TYPE=amd64
	else    # Otherwise use version for 32-bit kernel
		KERNEL_TYPE=i386
	fi

	echo ${KERNEL_TYPE}
}

# Install PHP, Apache 2, and MySQL Server
# Non-interactive install of the *DEFAULT* versions of PHP, Apache 2 and MySQL Server
function install_lamp() {
export DEBIAN_FRONTEND=noninteractive
export MYSQL_ROOT_PASSWORD=root
sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password '${MYSQL_ROOT_PASSWORD}  # Set MySQL password to 'root'.
sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password '${MYSQL_ROOT_PASSWORD}
sudo apt-get install -y \
	apache2 \
	composer \
	php-bcmath \
	php-bz2 \
	php-cli \
	php-common \
	php-curl \
	php-gd \
	php-json \
	php-mbstring \
	php-mysql \
	php-readline \
	php-sqlite3 \
	php-xml \
	php-xsl \
	php-zip \
	php-xdebug \
	phpliteadmin \
	phpliteadmin-themes \
	phpmyadmin \
	phpsysinfo \
	libapache2-mod-php \
	libapache2-mod-xsendfile \
	mariadb-client \
	mariadb-server \
	mycli

# Enable 'modrewrite' Apache module
sudo a2enmod rewrite
sudo service apache2 restart  ## Alternate command is 'sudo apachectl restart'

# Add current user to 'www-data' group
sudo usermod -a -G www-data ${USER}

# Change owner of /var/www/html directory to www-data
sudo chown -R www-data:www-data /var/www/html

# Create simple 'phpinfo' script in main web server directory
# Note: Must create file in /tmp and then move because 'sudo cat...' is allowed.
sudo cat > /tmp/phpinfo.php << EOL
<?php
	phpinfo();
?>
EOL
sudo mv /tmp/phpinfo.php ${WWW_HOME}
sudo chown www-data:www-data ${WWW_HOME}/phpinfo.php
xdg-open http://localhost/phpinfo.php &
}

## Create a MySQL database.
## $1 (first parameter) is the database name (also used for username and password)
## Assumes that root username and password are root/root.
function mySqlCreateDatabase() {
	if [ "$1" != "" ]
	then
		local DB_NAME=( $1 )
		local DB_USER=( $1 )
		local DB_PASSWORD=( $1 )

		mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
		mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
		mysql -u root -proot -Bse "FLUSH PRIVILEGES;"

		echo "Database '" ${DB_NAME} "' created!"
	else
		echo "No database name specified!"
	fi
}

# Checks to see if tool/command exists
# https://github.com/kennylevinsen/dotfiles/blob/master/setup
function tool_installed() {
	which $1 1>/dev/null 2>/dev/null
	ret=$?
	printf '%b' "[Tool installation check for $1: $ret]\n" >> $LOGFILE
	return $ret
}

# Update wallpaper with Bing image of the day.
# Requires lynx text-mode browser and Nitrogen (see below for installation details).
cat >> $HOME/.config/bing_daily_wallpaper << EOF
# Set wallpaper with Bing image of the day.
function bing_daily_wallpaper() {
local idx="\$1"
if [ -z \$idx ]; then
	idx=0
fi
bing_wallpaper_base_url=\$(lynx -source "http://www.bing.com/HPImageArchive.aspx?format=xml&idx=\$idx&n=1&mkt=en-US" | awk -F ".jpg" '{print \$1}' | awk -F "<url>" '{print \$2}')
bing_wallpaper_name=\$(echo \$bing_wallpaper_base_url | sed 's/\/th?id=//g')
# Get the "startdate" value, which is the third ('{print \$3') attribute.
bing_wallpaper_name="bing_"\$(lynx -source "http://www.bing.com/HPImageArchive.aspx?format=xml&idx=\$idx&n=1&mkt=en-US" | sed 's/></>\n</g' | awk -F"[<>]" '/fullstartdate/{print \$3}')_\${bing_wallpaper_name}.jpg
bing_wallpaper_url="https://www.bing.com\${bing_wallpaper_base_url}.jpg"

wget -O /tmp/\$bing_wallpaper_name "\$bing_wallpaper_url"

sudo cp /tmp/\$bing_wallpaper_name /usr/share/wallpapers

nitrogen --set-scaled --save "/usr/share/wallpapers/\$bing_wallpaper_name"
}
EOF
echo 'source $HOME/.config/bing_daily_wallpaper' >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration

# Set some parameters for general use
LOGFILE=/var/log/ubuntu_setup.log
echo 'WWW_HOME=/var/www/html' >> $HOME/.bashrc
source $HOME/.bashrc

# Add some necessary non-default packages
sudo apt-get update -y
sudo apt-get upgrade -y
sudo apt-get autoremove -f -y
sudo apt-get install -y build-essential curl wget checkinstall gdebi \
	openjdk-11-jre software-properties-common \
	mc python3-pip htop synaptic

# Install dtrx from Python package, because no longer included in Ubuntu repositories
# https://pypi.org/project/dtrx-noahp/
sudo pip3 install dtrx-noahp

# Allow current user to run 'sudo' without password
# https://phpraxis.wordpress.com/2016/09/27/enable-sudo-without-password-in-ubuntudebian/
# http://stackoverflow.com/a/28382838
echo "${USER}" > /tmp/user.tmp
sudo bash -c 'echo "`cat /tmp/user.tmp` ALL=(ALL) NOPASSWD:ALL" | (EDITOR="tee -a" visudo)'
rm -f /tmp/user.tmp

# Add official Git package repository
sudo apt-add-repository -y ppa:git-core/ppa

# Add PHP 5.6/7.0/7.1 package repository
sudo apt-add-repository -y ppa:ondrej/php

# Add Vim 8.x package repository
# https://itsfoss.com/vim-8-release-install/
sudo apt-add-repository -y ppa:jonathonf/vim

# Add NodeJS package repository
# https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -

# Install NodeJS, Vim 8, and Git
sudo apt-get install -y vim vim-gtk3 vim-common \
	git git-svn \
	nodejs

# Install Yarn package manager (must install NodeJS from package repo first)
curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
sudo apt-get update && sudo apt-get install -y yarn

# Add some shortcut functions for package administration
cat >> $HOME/.config/apt_pkg_mgmt << EOF
# Shortcut for installing new packages
function pinstall {
	sudo apt-get install -y "\$@"
}

# Shortcut for full upgrade including removing unused packages and clearing cache.
function pupgrade {
	sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y && sudo apt-get autoremove -f && sudo apt-get clean
}
EOF
echo 'source $HOME/.config/apt_pkg_mgmt' >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration

# Add some settings to .bashrc to use Vim instead of Vi
cat >> $HOME/.config/vim_sh_config << EOF
# Enable 256 color support in terminal
export TERM=xterm-256color
# Use Vim instead of Vi, particularly for Git
export VISUAL=vim
export EDITOR=vim
# Make 'vi' a function that calls Vim
vi() {
    vim "$@"
}
EOF
echo 'source $HOME/.config/vim_sh_config' >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration

# Install 
curl -o $HOME/.config/extract.sh -J -L https://raw.githubusercontent.com/xvoland/Extract/master/extract.sh
echo 'source $HOME/.config/extract.sh' >> $HOME/.bashrc
source $HOME/.bashrc

# Install and configure Python 3 virtualenv and virtualenvwrapper
sudo apt-get install -y python3-pip
python3 -m pip install --upgrade pip
python3 -m pip install virtualenv virtualenvwrapper
mkdir -p $HOME/.virtualenvs
echo 'export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3' >> $HOME/.bashrc
echo 'export WORKON_HOME=$HOME/.virtualenvs' >> $HOME/.bashrc
echo 'export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/.local/bin/virtualenv' >> $HOME/.bashrc
echo 'source $HOME/.local/bin/virtualenvwrapper.sh' >> $HOME/.bashrc
source $HOME/.bashrc

# Prevent use of Python 'pip' command unless in virtual environment
# 'gpip()' command allows override for global install
# https://docs.python-guide.org/dev/pip-virtualenv/
echo 'export PIP_REQUIRE_VIRTUALENV=true' >> $HOME/.bashrc
echo 'gpip() {' >> $HOME/.bashrc
echo '    PIP_REQUIRE_VIRTUALENV="" python3 -m pip "$@"' >> $HOME/.bashrc
echo '}' >> $HOME/.bashrc
source $HOME/.bashrc

# Function to create new Python Virtual Environment
cat >> $HOME/.config/pynewvenv << EOF
pynewvenv() {
   local venv_name=\${1:-.venv}
   python3 -m venv \$venv_name
   source \$venv_name/bin/activate
   python3 -m pip install --upgrade pip
   echo 'black' >> ./requirements-dev.txt
   echo 'flake8' >> ./requirements-dev.txt
   echo 'green' >> ./requirements-dev.txt
   echo 'ipython' >> ./requirements-dev.txt
   echo 'isort' >> ./requirements-dev.txt
   echo 'mypy' >> ./requirements-dev.txt
   echo 'pylint' >> ./requirements-dev.txt
   python3 -m pip install -r ./requirements-dev.txt
}
EOF
echo 'source $HOME/.config/pynewvenv' >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration

# Install various monospaced fonts for programming
sudo apt-get install -y fontconfig
mkdir -p $HOME/.local/share/fonts
curl -o /tmp/Fira_Code_v6.1.zip -J -L https://github.com/tonsky/FiraCode/releases/download/6.1/Fira_Code_v6.1.zip
mkdir -p /tmp/Fira_Code_v6.1 && unzip /tmp/Fira_Code_v6.1.zip -d /tmp/Fira_Code_v6.1
sudo cp -R /tmp/Fira_Code_v6.1/ttf/* /usr/local/share/fonts
curl -o /tmp/Hack-v3.003-ttf.tar.xz -J -L https://github.com/source-foundry/Hack/releases/download/v3.003/Hack-v3.003-ttf.tar.xz
mkdir -p /tmp/Hack-v3.003-ttf && tar -xf /tmp/Hack-v3.003-ttf.tar.xz -C /tmp/Hack-v3.003-ttf
sudo cp -R /tmp/Hack-v3.003-ttf/* /usr/local/share/fonts
curl -o /tmp/ttf-iosevka-32.3.0.zip -J -L https://github.com/be5invis/Iosevka/releases/download/v32.3.0/ttf-iosevka-32.3.0.zip
mkdir -p /tmp/ttf-iosevka-32.3.0 && unzip /tmp/ttf-iosevka-32.3.0.zip -d /tmp/ttf-iosevka-32.3.0
sudo cp -R /tmp/ttf-iosevka-32.3.0/* /usr/local/share/fonts
curl -o /tmp/CascadiaCode-2111.01.zip -J -L https://downloads.sourceforge.net/cascadia-code.mirror/CascadiaCode-2111.01.zip
mkdir -p /tmp/CascadiaCode-2111.01 && unzip /tmp/CascadiaCode-2111.01.zip -d /tmp/CascadiaCode-2111.01
sudo cp -R /tmp/CascadiaCode-2111.01/ttf/* /usr/local/share/fonts
curl -o /tmp/JuliaMono.tar.gz -J -L https://github.com/cormullion/juliamono/releases/download/v0.060/JuliaMono.tar.gz
mkdir -p /tmp/JuliaMono && tar -xf /tmp/JuliaMono.tar.gz -C /tmp/JuliaMono
sudo cp -R /tmp/JuliaMono/*.ttf /usr/local/share/fonts
curl -o /tmp/FantasqueSansMono-NoLoopK.tar.gz -J -L https://github.com/belluzj/fantasque-sans/releases/download/v1.8.0/FantasqueSansMono-NoLoopK.tar.gz
mkdir -p /tmp/FantasqueSansMono-NoLoopK && tar -xf /tmp/FantasqueSansMono-NoLoopK.tar.gz -C /tmp/FantasqueSansMono-NoLoopK
sudo cp -R /tmp/FantasqueSansMono-NoLoopK/TTF/*.ttf /usr/local/share/fonts
curl -o /tmp/xcoralFonts.tar.gz -J -L http://xcoral.free.fr/xcoralFonts.tar.gz
mkdir -p /tmp/xcoralFonts && tar -xf /tmp/xcoralFonts.tar.gz -C /tmp/xcoralFonts
sudo cp -R /tmp/xcoralFonts/* /usr/local/share/fonts
curl -o /tmp/TTF-source-code-pro-2.038R-ro-1.058R-it.zip -J -L https://downloads.sourceforge.net/source-code-pro.mirror/TTF-source-code-pro-2.042R-u_1.062R-i.zip
mkdir -p /tmp/TTF-source-code-pro-2.042R-u_1.062R-i && unzip /tmp/TTF-source-code-pro-2.042R-u_1.062R-i.zip -d /tmp/TTF-source-code-pro-2.042R-u_1.062R-i
sudo cp -R /tmp/TTF-source-code-pro-2.042R-u_1.062R-i/*.ttf /usr/local/share/fonts
curl -o /tmp/courier-prime-code.zip -J -L https://quoteunquoteapps.com/courierprime/downloads/courier-prime-code.zip
mkdir -p /tmp/courier-prime-code && unzip /tmp/courier-prime-code.zip -d /tmp/courier-prime-code
sudo cp -R /tmp/courier-prime-code/ttf/* /usr/local/share/fonts
curl -o /tmp/bitmap-fonts-master.zip -J -L https://github.com/Tecate/bitmap-fonts/archive/refs/heads/master.zip
mkdir -p /tmp/bitmap-fonts-master && unzip /tmp/bitmap-fonts-master.zip -d /tmp/bitmap-fonts-master
sudo cp -R /tmp/bitmap-fonts-master/bitmap/* /usr/local/share/fonts
curl -o /tmp/IBM_Plex_TrueType.zip -J -L https://github.com/IBM/plex/releases/download/v6.4.0/TrueType.zip
mkdir -p /tmp/IBM_Plex_TrueType && unzip /tmp/IBM_Plex_TrueType.zip -d /tmp/IBM_Plex_TrueType
sudo cp -R /tmp/IBM_Plex_TrueType/TrueType/IBM-Plex-Mono /usr/local/share/fonts
curl -o /tmp/JetBrainsMono-2.304.zip -J -L https://downloads.sourceforge.net/jetbrains-mono.mirror/JetBrainsMono-2.304.zip
mkdir -p /tmp/JetBrainsMono-2.304 && unzip /tmp/JetBrainsMono-2.304.zip -d /tmp/JetBrainsMono-2.304
sudo cp -R /tmp/JetBrainsMono-2.304/fonts/ttf/* /usr/local/share/fonts
curl -o /tmp/codeface-fonts.tar.xz -J -L https://downloads.sourceforge.net/codeface.mirror/codeface-fonts.tar.xz
mkdir -p /tmp/codeface-fonts && tar -xf /tmp/codeface-fonts.tar.xz -C /tmp/codeface-fonts
sudo cp -R /tmp/codeface-fonts/fonts/* /usr/local/share/fonts
curl -o /tmp/Hasklig-1.2.zip -J -L https://downloads.sourceforge.net/hasklig.mirror/Hasklig-1.2.zip
mkdir -p /tmp/Hasklig-1.2 && unzip /tmp/Hasklig-1.2.zip -d /tmp/Hasklig-1.2
mkdir -p /usr/local/share/fonts/hasklig
sudo cp -R /tmp/Hasklig-1.2/OTF/* /usr/local/share/fonts/hasklig
sudo cp -R /tmp/Hasklig-1.2/TTF/* /usr/local/share/fonts/hasklig
curl -o /tmp/martian-mono-0.9.0-otf.zip -J -L https://github.com/evilmartians/mono/releases/download/v0.9.0/martian-mono-0.9.0-otf.zip
mkdir -p /tmp/martian-mono-0.9.0-otf && unzip /tmp/martian-mono-0.9.0-otf.zip -d /tmp/martian-mono-0.9.0-otf
sudo mkdir -p /usr/local/share/fonts/martianmono
sudo cp -R /tmp/martian-mono-0.9.0-otf/*.otf /usr/local/share/fonts/martianmono
curl -o /tmp/ArrowType-Recursive-1.085.zip -J -L https://downloads.sourceforge.net/recursive-sans-mono.mirror/ArrowType-Recursive-1.085.zip
mkdir -p /tmp/ArrowType-Recursive-1.085 && unzip /tmp/ArrowType-Recursive-1.085.zip -d /tmp/ArrowType-Recursive-1.085
sudo cp -R /tmp/ArrowType-Recursive-1.085/Recursive_Code/* /usr/local/share/fonts
curl -o /tmp/CozetteFonts-v-1-29-0.zip -J -L https://downloads.sourceforge.net/cozette.mirror/CozetteFonts-v-1-29-0.zip
mkdir -p /tmp/CozetteFonts-v-1-29-0 && unzip /tmp/CozetteFonts-v-1-29-0.zip -d /tmp/CozetteFonts-v-1-29-0
sudo cp -a -R /tmp/CozetteFonts-v-1-29-0/CozetteFonts/*.ttf /usr/local/share/fonts
curl -o /tmp/VictorMonoAll.zip -J -L https://rubjo.github.io/victor-mono/VictorMonoAll.zip
mkdir -p /tmp/VictorMonoAll && unzip /tmp/VictorMonoAll.zip -d /tmp/VictorMonoAll
sudo cp -R /tmp/VictorMonoAll/TTF/*.ttf /usr/local/share/fonts
curl -o /tmp/3270_fonts_d916271.zip -J -L https://downloads.sourceforge.net/threetwoseven0font.mirror/3270_fonts_d916271.zip
mkdir -p /tmp/3270_fonts_d916271 && unzip /tmp/3270_fonts_d916271.zip -d /tmp/3270_fonts_d916271
sudo cp -R /tmp/3270_fonts_d916271/*.ttf /usr/local/share/fonts
curl -o /tmp/scientifica.tar -J -L https://downloads.sourceforge.net/scientifica.mirror/scientifica.tar
tar -xf /tmp/scientifica.tar
sudo cp -R /tmp/scientifica/ttf/*.ttf /usr/local/share/fonts
curl -o /tmp/MapleMono-ttf.zip -J -L https://downloads.sourceforge.net/maple-font.mirror/MapleMono-ttf.zip
mkdir -p /tmp/MapleMono-ttf && unzip /tmp/MapleMono-ttf.zip -d /tmp/MapleMono-ttf
sudo cp -R /tmp/MapleMono-ttf/*.ttf /usr/local/share/fonts
curl -o /tmp/MapleMono-NF.zip -J -L https://downloads.sourceforge.net/maple-font.mirror/MapleMono-NF.zip
mkdir -p /tmp/MapleMono-NF && unzip /tmp/MapleMono-NF.zip -d /tmp/MapleMono-NF
sudo cp -R /tmp/MapleMono-NF/*.ttf /usr/local/share/fonts
curl -o /tmp/fragment-mono-fonts.zip -J -L https://github.com/weiweihuanghuang/fragment-mono/releases/download/1.011/fragment-mono-fonts.zip
mkdir -p /tmp/fragment-mono-fonts && unzip /tmp/fragment-mono-fonts.zip -d /tmp/fragment-mono-fonts
sudo cp -R /tmp/fragment-mono-fonts/fonts/out/ttf/*.ttf /usr/local/share/fonts
curl -o /tmp/CommitMonoV130-450Regular.otf -J -L https://commitmono.com/src/fonts/CommitMonoV130-450Regular.otf
curl -o /tmp/CommitMonoV130-450Italic.otf -J -L https://commitmono.com/src/fonts/CommitMonoV130-450Italic.otf
curl -o /tmp/CommitMonoV130-700Regular.otf -J -L https://commitmono.com/src/fonts/CommitMonoV130-700Regular.otf
curl -o /tmp/CommitMonoV130-700Italic.otf -J -L https://commitmono.com/src/fonts/CommitMonoV130-700Italic.otf
sudo cp -R /tmp/CommitMono*.otf /usr/local/share/fonts
curl -o /tmp/monofur.zip -J -L https://dl.dafont.com/dl/?f=monofur
mkdir -p /tmp/monofur && unzip /tmp/monofur.zip -d /tmp/monofur
sudo cp -a -R /tmp/monofur/*.ttf /usr/local/share/fonts
curl -o /tmp/UnifontEX.zip -J -L https://downloads.sourceforge.net/unifontex/UnifontEX.zip
mkdir -p /tmp/UnifontEX && unzip /tmp/UnifontEX.zip -d /tmp/UnifontEX
sudo cp -a /tmp/UnifontEX/UnifontEX.ttf /usr/local/share/fonts
curl -o /tmp/dejavu-fonts-ttf-2.37.tar.bz2 -J -L https://github.com/dejavu-fonts/dejavu-fonts/releases/download/version_2_37/dejavu-fonts-ttf-2.37.tar.bz2
tar -xf /tmp/dejavu-fonts-ttf-2.37.tar.bz2
sudo cp -a /tmp/dejavu-fonts-ttf-2.37/ttf/* /usr/local/share/fonts
curl -o /tmp/spleen-2.1.0.tar.gz -J -L https://downloads.sourceforge.net/spleen.mirror/spleen-2.1.0.tar.gz
mkdir -p /tmp/spleen-2.1.0 && tar -xf /tmp/spleen-2.1.0.tar.gz -C /tmp/spleen-2.1.0
sudo cp -R -a /tmp/spleen-2.1.0/* /usr/local/share/fonts
sudo fc-cache -f -v
# Enable bitmap fonts
sudo rm -rf /etc/fonts/conf.d/10* /etc/fonts/conf.d/70-no-bitmaps.conf 
sudo ln -s /etc/fonts/conf.avail/70-yes-bitmaps.conf /etc/fonts/conf.d/70-yes-bitmaps.conf
sudo dpkg-reconfigure fontconfig

# Install MongoDB from official repository
# https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/
APP_NAME=mongodb
APP_VERSION=4.0
sudo apt-get install -y gnupg
# sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
# Install package management public key
wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
source /etc/lsb-release
# If Ubuntu version is above 16.04 (Xenial) up to 18.04 (Bionic), then we use 16.04.
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(ya|ze|ar)$ ]]; then
	DISTRIB_CODENAME=xenial
# Otherwise, we use Bionic.
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(bi|co|di|eo|fo)$ ]]; then
	DISTRIB_CODENAME=bionic
fi
echo "deb [ arch="${KERNEL_TYPE}" allow-insecure=yes ] http://repo.mongodb.org/apt/ubuntu "${DISTRIB_CODENAME}"/mongodb-org/"${APP_VERSION}" multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-${APP_VERSION}.list
sudo apt-get update
sudo apt-get install -y mongodb-org
sudo service mongod start

# Install MongoDB Compass cross-platform MongoDB management tool from Debian package
APP_NAME=MongoDB-Compass
APP_GUI_NAME="Cross-platform MongoDB management tool."
APP_VERSION=1.20.5
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.mongodb.com/compass/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install nvm (Node Version Manager) command-line utility for running/managing multiple versions of Node.JS from package
APP_VERSION=0.40.2
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v${APP_VERSION}/install.sh | bash
source $HOME/.bashrc
nvm install --lts=dubnium node
nvm alias default node
curl -o- -L https://yarnpkg.com/install.sh | bash
source $HOME/.bashrc

# Install Jupyter Notebook support for Python 3
sudo apt-get install -y python3 python3-ipython
sudo pip3 install jupyter
# Add application menu icon to open new Jupyter notebook
cat > /tmp/jupyter.desktop << EOF
[Desktop Entry]
Name=Jupyter Notebook
Comment=Open a new Jupyter Python notebook.
GenericName=Jupyter
Exec=jupyter-notebook
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Jupyter;Python;
EOF
sudo mv /tmp/jupyter.desktop /usr/share/applications/

# Install apt-fast script for speeding up apt-get by downloading
# packages in parallel.
# https://github.com/ilikenwf/apt-fast
sudo add-apt-repository -y ppa:saiarcot895/myppa
sudo apt-get update
sudo apt-get -y install apt-fast

# Install Flatpak sandboxed installer utility from PPA
sudo apt-get install -y flatpak gnome-software-plugin-flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

# Install bash-it script
cd $HOME
wget -O /tmp/bash-it.zip https://github.com/Bash-it/bash-it/archive/master.zip
dtrx -n /tmp/bash-it.zip
mv ./bash-it/bash-it-master $HOME/.bash-it
$HOME/.bash-it/install.sh --silent
source $HOME/.bashrc	# Enable bash-it configuration immediately.
rm -f /tmp/bash-it.zip
rm -rf $HOME/bash-it

# Install LilyTerm terminal
# http://lilyterm.luna.com.tw/
# Ubuntu does not have recent version in packages, so we build from source,
# which requires installation of GTK+2 and other libraries.
APP_NAME=LilyTerm
APP_VERSION=0.9.9.4
APP_EXT=tar.gz
sudo apt-get install -y pkg-config libglib2.0-dev libgtk2.0-dev libvte-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/Tetralet/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
if [[ ! -d "$HOME/.config/autostart" ]]; then
	mkdir -p $HOME/.config/autostart
fi
ln -s /usr/local/share/applications/lilyterm.desktop $HOME/.config/autostart/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Google Go language (stable version) from package
APP_NAME=go
APP_VERSION=1.19.7
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
curl -o /tmp/${APP_NAME}.tar.gz -J -L https://storage.googleapis.com/golang/${APP_NAME}${APP_VERSION}.linux-${ARCH_TYPE}.tar.gz
sudo tar -C /usr/local -xzf /tmp/${APP_NAME}.tar.gz
# Add Go application to $PATH and $GOPATH env variable
echo 'export PATH="$PATH:/usr/local/go/bin"' >> $HOME/.bashrc
echo 'export GOPATH=$HOME/projects/go' >> $HOME/.bashrc
echo 'export PATH=$PATH:$(go env GOPATH)/bin' >> $HOME/.bashrc
source $HOME/.bashrc
mkdir -p $HOME/projects/go
mkdir -p $HOME/projects/go/bin $HOME/projects/go/pkg $HOME/projects/go/src
rm -rf /tmp/go*
cd $HOME

# Install Lite IDE for Go language development from AppImage
APP_NAME=LiteIDE
APP_GUI_NAME="IDE for editing and building projects written in the Go programming language"
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Golang;Go;IDE;Programming;"
APP_VERSION=x38.3
QT_VERSION=qt5.5.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}${APP_VERSION}.linux64-${QT_VERSION}
sudo apt-get install -y libqt5gui5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/visualfc/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/visualfc/${APP_NAME,,}/master/build/${APP_NAME,,}.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Firejail and Firetools utilities for running applications in isolated memory space from Debian package
APP_NAME=Firejail
APP_VERSION=0.9.74
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-apparmor_1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}   # '-n' is non-interactive mode for gdebi
rm -f /tmp/${APP_NAME,,}*
APP_NAME=Firetools
APP_VERSION=0.9.72
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/firejail/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}   # '-n' is non-interactive mode for gdebi
rm -f /tmp/${APP_NAME,,}*
cd $HOME

# Install Stacer Linux monitoring tool from Debian package
APP_NAME=Stacer
APP_VERSION=1.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}   # '-n' is non-interactive mode for gdebi
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install DBeaver Java database utility from Debian package
APP_NAME=DBeaver
APP_VERSION=25.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-ce_${APP_VERSION}_amd64
# Install MySQL JDBC drivers from PPA
curl -o /tmp/mysql-apt-config.deb -J -L https://repo.mysql.com//mysql-apt-config_0.8.16-1_all.deb
sudo gdebi -n /tmp/mysql-apt-config.deb
sudo apt-get update
sudo apt-get install -y mysql-connector-java   # Install MySQL JDBC driver
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}   # '-n' is non-interactive mode for gdebi
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Linux Brew (similar to MacOS X "Home Brew")
# Ruby *should* already be installed; it gets installed when Vim is installed. But we will install the dependencies, just in case.
# Linux Brew is installed as *user* (not global) application.
sudo apt-get install -y build-essential curl git python-setuptools ruby
cd $HOME/Downloads
wget -O linuxbrew.zip https://github.com/Linuxbrew/brew/archive/master.zip
dtrx -n linuxbrew.zip
mv $HOME/Downloads/linuxbrew/brew-master $HOME/.linuxbrew
echo 'export PATH="$HOME/.linuxbrew/bin:$PATH"' >> $HOME/.bashrc
echo 'export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"' >> $HOME/.bashrc
echo 'export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"' >> $HOME/.bashrc
source $HOME/.bashrc
rm -rf linuxbrew*
cd $HOME
brew update    # Update the Linuxbrew "formulae" (packages).

# Install Atom editor via PPA
sudo add-apt-repository -y ppa:webupd8team/atom
sudo apt-get update -y
sudo apt-get install -y atom

# Install Vivaldi web browser (stable version) from Debian package
APP_NAME=Vivaldi
APP_VERSION=7.4.3684.38
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-stable_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.vivaldi.com/stable/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -f /tmp/*${APP_NAME,,}*

# Install CudaText cross-platform text editor with plug-in extension support from Debian package
# http://www.uvviewsoft.com/cudatext/
APP_NAME=CudaText
APP_VERSION=1.224.0.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_gtk2_$(dpkg-architecture --query DEB_HOST_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
rm -f /tmp/${APP_NAME,,}*

# Enable GetDeb repository for your version of Ubuntu
source /etc/os-release   # This config file contains Ubuntu version details.
DEB_STRING='deb http://archive.getdeb.net/ubuntu '${UBUNTU_CODENAME}'-getdeb apps'
sudo echo $DEB_STRING > /etc/apt/sources.list.d/getdeb.list
wget -q -O- http://archive.getdeb.net/getdeb-archive.key | sudo apt-key add -
sudo apt-get update -y

# Install Albert application launcher from Debian package
# http://sourcedigit.com/22129-linux-quick-launcher-ubuntu-albert-best-linux-launcher/
APP_NAME=Albert
APP_VERSION=0.27.7
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
source /etc/lsb-release
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_${DISTRIB_RELEASE}/${KERNEL_TYPE}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
ln -s /usr/share/applications/albert.desktop $HOME/.config/autostart/  # Create link to autostart Albert on startup

# Install KSnip cross-platform minimalist screenshot tool from AppImage
APP_NAME=KSnip
APP_VERSION=1.10.1
APP_GUI_NAME="Cross-platform minimalist screenshot tool."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Screenshot;"
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?1630080080
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install CopyQ clipboard manager from Debian package
APP_NAME=CopyQ
APP_VERSION=10.0.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Debian_12-1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
sudo ln -s /usr/local/share/applications/${APP_NAME}.desktop $HOME/.config/autostart/  # Configure CopyQ to autostart on system launch
rm -f /tmp/${APP_NAME,,}*

# Install Steel Bank Common Lisp (SBCL) from source
APP_NAME=sbcl
APP_VERSION=2.5.5
APP_EXT=tar.bz2
sudo apt-get install -y sbcl   # Current packaged version of SBCL required to build the updated version from source
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}-source.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
sh make.sh
INSTALL_DIR=/usr/local sudo sh install.sh
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Otter Browser cross-platform Qt5-based web browser with Opera 12.x-style UI from source
APP_NAME=Otter-Browser
APP_VERSION=1.0.81-dev440
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y qt5-default libqt5multimedia5 qtmultimedia5-dev libqt5xmlpatterns5-dev libqt5webkit5-dev libqt5svg5-dev qtwebengine5-dev qtdeclarative5-dev qml-module-qtgstreamer libqt5qml5 ibqt5gstreamer-dev libgstreamer1.0-dev gstreamer1.0-qt5 cmake  # Qt5 development packages needed to build from source
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
cmake .. && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install MyNotes simple Python-based "sticky notes" tool from source
APP_NAME=MyNotes
APP_VERSION=2.4.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y python3-tk tk-tktray python3-pil python3-pil.imagetk
source /etc/lsb-release
# If our version of Ubuntu is *after* 17.04 (Zesty Zapus),
# then we use Python 3 EWMH package from distribution repository.
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(ar|bi)$ ]]; then
	sudo apt-get install -y python3-ewmh
else
	# Install python-ewmh package from Zesty Zebra distribution.
	curl -o /tmp/python3-ewmh_0.1.5-1_all.deb -J -L http://ftp.osuosl.org/pub/ubuntu/pool/universe/p/python-ewmh/python3-ewmh_0.1.5-1_all.deb
	sudo gdebi -n /tmp/python3-ewmh_0.1.5-1_all.deb
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/my-notes/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/*${APP_NAME}*
cd $HOME
rm -rf /tmp/python3-ewmh*
rm -rf /tmp/${APP_NAME}*

# Install Plank dock, if not installed.
PLANK_EXE=/usr/bin/plank
if [ ! -f "$PLANK_EXE" ]; then
	sudo apt-get install -y plank
fi

# Install FUSE driver for Google Drive from PPA and mount local folder to your account.
# http://www.techrepublic.com/article/how-to-mount-your-google-drive-on-linux-with-google-drive-ocamlfuse/
sudo add-apt-repository -y ppa:alessandro-strada/ppa
sudo apt-get update -y
sudo apt-get install -y google-drive-ocamlfuse
google-drive-ocamlfuse   # This will launch browser window prompting you to allow access to Google Drive.
mkdir $HOME/google-drive   # Create directory to use as mount point for Google Drive.
google-drive-ocamlfuse $HOME/google-drive  # Mount Google Drive to folder.

# Install MuPDF PDF viewer from source.
APP_NAME=MuPDF
APP_VERSION=1.26.2
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-source
sudo apt install -y libjbig2dec0-dev libfreetype6-dev libftgl-dev libjpeg-dev libopenjp2-7-dev zlib1g-dev xserver-xorg-dev mesa-common-dev libgl1-mesa-dev libxcursor-dev libxrandr-dev libxinerama-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://mupdf.com/downloads/archive/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make prefix=/usr/local install
sudo ln -s /usr/local/bin/mupdf-gl /usr/local/bin/mupdf
# Create icon in menus
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Minimalist PDF reader/viewer
GenericName=PDF Reader
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}-gl
Type=Application
StartupNotify=true
Terminal=false
Categories=Utility;Office;
Keywords=PDF;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install tke text editor
APP_NAME=tke
APP_VERSION=3.6
APP_EXT=tgz
sudo apt-get install -y tcl8.6 tk8.6 tclx8.4 tcllib tklib tkdnd expect tcl-tls  # Install required packages
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_pNAME}/${APP_NAME}-${APP_VERSION}
sudo tclsh8.6 install.tcl
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Goto shell utility
wget -O /tmp/goto.zip https://github.com/Fakerr/goto/archive/master.zip
cd /tmp
dtrx -n /tmp/goto.zip
cd /tmp/goto/goto-master
mv goto.sh $HOME/.local/
echo "if [[ -s "${HOME}/.local/goto.sh" ]]; then" >> $HOME/.bashrc
echo "    source ${HOME}/.local/goto.sh" >> $HOME/.bashrc
echo "fi" >> $HOME/.bashrc
source $HOME/.local/goto.sh
cd $HOME
rm -rf /tmp/goto*

# Install Free42 HP-42S calculator simulator from package
APP_NAME=Free42
APP_GUI_NAME="Free, cross-platfrom HP-42S calculator simulator."
APP_VERSION=3.3.6
APP_EXT=tgz
FILE_NAME=${APP_NAME}Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://thomasokken.com/${APP_NAME,,}/download/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}bin /usr/local/bin
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}dec /usr/local/bin
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}*.xpm /usr/share/icons/hicolor/128x128/apps
sudo ln -s /usr/local/bin/${APP_NAME,,}dec /usr/local/bin/${APP_NAME,,}
# Create icon in menus
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin/
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/icons/hicolor/128x128/apps/${APP_NAME,,}icon-128x128.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Accessories;
Keywords=Calculator;RPN;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Modify keyboard mapping to swap Caps Lock and (Right) Control keys
# See https://github.com/501st-alpha1/scott-script/blob/master/newsystem
echo "! Swap Caps Lock and (Right) Control
remove Lock = Caps_Lock
remove Control = Control_R
keysym Control_R = Caps_Lock
keysym Caps_Lock = Control_R
add Lock = Caps_Lock
add Control = Control_R
" > $HOME/.xmodmap

# Install JOE (Joe's Own Editor) text editor from source
APP_NAME=joe
APP_VERSION=4.6
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-editor/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install NewBreeze file manager from source
APP_NAME=NewBreeze
APP_VERSION=v3-rc5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}%20${APP_VERSION}
sudo apt-get install -y libmagic-dev zlib1g-dev liblzma-dev libbz2-dev libarchive-dev xdg-utils libpoppler-qt5-dev libsource-highlight-dev libpoppler-qt5-dev libdjvulibre-dev libqscintilla2-qt5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/*${APP_NAME}*
qtchooser -run-tool=qmake -qt=5 && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Miniflux browser-based RSS reader
# Requires PHP and SQLite.
curl -o /tmp/miniflux.tar.gz -J -L https://github.com/miniflux/miniflux/archive/v1.2.2.tar.gz
cd /tmp
dtrx -n /tmp/miniflux.tar.gz
cd /tmp/miniflux
sudo mv /tmp/miniflux/miniflux-1.2.2 ${WWW_HOME}/miniflux
sudo chown -R www-data:www-data ${WWW_HOME}
sudo chmod -R 777 ${WWW_HOME}/miniflux/data
xdg-open "http://localhost/miniflux"  # Open main page in default browser
cd $HOME
rm -rf /tmp/miniflux*

# Install QGIS (a.k.a. Quantum GIS) from Ubuntu PPA
# (Used PPA, because unable to install from QGIS official packages.)
sudo apt-add-repository -y ppa:ubuntugis/ubuntugis-unstable
sudo apt-get update
sudo apt-get install -y qgis python-qgis qgis-provider-grass postgis
sudo apt-get autoremove -y -f

# Install Playbox games from Sourceforge
curl -o /tmp/playbox.zip -J -L https://pilotfiber.dl.sourceforge.net/project/playbox/6/playbox-1.6.3.linux.gtk.x86_64.zip
cd /tmp
dtrx -n /tmp/playbox.zip
cd /tmp/playbox
sudo mv ./playbox /opt
sudo ln -s /opt/playbox/playbox /usr/local/bin/playbox
cd $HOME
rm -rf /tmp/playbox*

# Install WP-34s calculator from Sourceforge
if $(uname -m | grep '64'); then
	curl -o /tmp/wp-34s-emulator.tgz -J -L https://cytranet.dl.sourceforge.net/project/wp34s/emulator/wp-34s-emulator-linux64.tgz
else
	curl -o /tmp/wp-34s-emulator.tgz -J -L https://cytranet.dl.sourceforge.net/project/wp34s/emulator/wp-34s-emulator-linux.tgz
fi
cd /tmp
dtrx -n /tmp/wp-34s-emulator.tgz
cd /tmp/wp-34s-emulator
sudo mv wp-34s /opt
sudo ln -s /opt/wp-34s/WP-34s /usr/local/bin/wp34s
# Create icon in menus
cat > /tmp/wp34s.desktop << EOF
[Desktop Entry]
Name=WP-34s
Comment=RPN (postfix) Scientific Calculator
GenericName=Calculator
Exec=/opt/wp-34s/WP-34s
Icon=/opt/wp-34s/wp34s-logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Utility;Development
Keywords=calculator;rpn;
EOF
sudo mv /tmp/wp34s.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/wp-34s-emulator*

# Install YouTube-DL-PyTK GUI front-end for youtube-dl video downloader from Debian package
APP_NAME=yt-dl-pytk
APP_VERSION=25.05.22
APP_EXT=deb
FILE_NAME=${APP_NAME/-}_${APP_VERSION}_noarch
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/youtube-dl-gtk/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install WCD chdir utility from source
APP_NAME=wcd
APP_VERSION=6.0.5
APP_EXT=tar.gz
sudo apt-get install -y libncursesw5-dev groff sed build-essential ghostscript po4a
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}/src
make all CURSES=ncursesw
sudo make PREFIX=/usr/local strip install
sudo ln -s /usr/local/bin/${APP_NAME}.exe /usr/bin/${APP_NAME}.exe	 # Create link so that shell integration works properly.
sudo make install-profile DOTWCD=1     # Set up shell integration and store configuration files under $HOME/.wcd.
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install BeeBEEP LAN messenger from package
APP_NAME=BeeBEEP
APP_GUI_NAME="Cross-platform secure LAN messenger."
APP_VERSION=5.8.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-qt5-${KERNEL_TYPE}
sudo apt-get install -y qt5-default libqt5xml5 libphonon4qt5-4 libhunspell-1.7-0 libxcb-screensaver0 phonon-backend-gstreamer libavahi-compat-libdnssd1 libqt5multimedia5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -f -s /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Networking;Accessories;
Keywords=Messenger;Productivity;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install tmux terminal multiplexer from source
APP_NAME=tmux
APP_VERSION=3.3a
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
APP_EXT=tar.gz
sudo apt-get install -y libevent-dev libncurses5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/tmux*

# Install Ranger CLI file manager from source
APP_NAME=ranger
APP_VERSION=1.9.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Coypu text-editor-style weekly planner from Debian package
APP_NAME=Coypu
APP_VERSION=1.3.0
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux
APP_EXT=deb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bartkozal/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -f /tmp/${APP_NAME,,}*

# Install calc arbitrary precision command-line calculator from source
APP_NAME=calc
APP_VERSION=2.14.1.5
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential libreadline-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Leanote Desktop app
APP_NAME=leanote-desktop
APP_VERSION=2.7.0
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=ia32
fi
curl -o /tmp/${APP_NAME}.zip -J -L https://superb-dca2.dl.sourceforge.net/project/${APP_NAME}-app/${APP_VERSION}/${APP_NAME}-linux-${ARCH_TYPE}-v${APP_VERSION}.zip
cd /tmp
dtrx -n ${APP_NAME}.zip
# cd /tmp/${APP_NAME}/${APP_NAME}-linux-${ARCH_TYPE}-v${APP_VERSION}
sudo mv ${APP_NAME} /opt
sudo ln -s /opt/${APP_NAME}/Leanote /usr/local/bin/leanote
# Create icon in menus
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=Leanote
Comment=Full-featured PIM built with Electron/Atom
GenericName=PIM
Exec=/opt/${APP_NAME}/Leanote
Icon=/opt/${APP_NAME}/leanote.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Utility;
Keywords=pim;
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/

# Install QXmlEdit XML editor and XSD viewer from source
APP_NAME=QXmlEdit
APP_VERSION=0.9.16
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-src
sudo apt-get install -y libqt5xmlpatterns5-dev libqt5svg5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n ${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}
qtchooser -run-tool=qmake -qt=5 && make && sudo make install
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME}.desktop /usr/share/applications/${APP_NAME}.desktop
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Idiomind flash card utility for language learning from Debian package
# https://github.com/robinpalat/idiomind
APP_NAME=Idiomind
APP_VERSION=0.3.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}   # '-n' is non-interactive mode for gdebi
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Jailer cross-platform Java database browser and editor from package
APP_NAME=Jailer
APP_GUI_NAME="Cross-platform Java database browser and editor"
APP_VERSION=16.7
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}/* /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
Icon=/opt/${APP_NAME,,}/docs/favicon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Database;SQL;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install ZinjaI C++ IDE
APP_NAME=zinjai
APP_VERSION=20191006
APP_EXT=tgz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=l64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=l32
fi
sudo apt-get install -y gdb
curl -o /tmp/${APP_NAME}.tgz -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${ARCH_TYPE}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
sudo mv ${APP_NAME} /opt
# sudo ln -s /opt/${APP_NAME}/${APP_NAME} /usr/local/bin/${APP_NAME}
# Create icon in menus
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=ZinjaI
Comment=C++ IDE
GenericName=C++ IDE
Exec=/opt/${APP_NAME}/${APP_NAME}
Icon=/opt/${APP_NAME}/imgs/zinjai.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development
Keywords=ide;programming;cpp;
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
/opt/${APP_NAME}/${APP_NAME} &
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install PhpWiki PHP-based wiki platform with support for multiple databases from package
# Reference:  https://hostpresto.com/community/tutorials/install-and-configure-phpwiki-on-ubuntu-16-04/
APP_NAME=PhpWiki
APP_GUI_NAME="PHP-based wiki platform with support for multiple databases"
APP_VERSION=1.6.6
APP_GUI_CATEGORIES="Accessories;Office;Internet;"
APP_GUI_KEYWORDS="Wiki;Productivity;"
APP_EXT=zip
DB_NAME=${APP_NAME,,}db
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# sudo ln -s /opt/${APP_NAME}/${APP_NAME} /usr/local/bin/${APP_NAME}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci;"
mysql -u root -proot -Bse "CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "GRANT USAGE ON *.* TO '${DB_USER}'@'%'; GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
# Import database schema
mysql -u ${DB_USER} -p${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/schemas/mysql-initialize.sql
# mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}'; GRANT USAGE ON *.* TO '${DB_USER}'@'%'; GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%'; FLUSH PRIVILEGES;"
# Create Apache virtual host environment for PhpWiki
cat > /tmp/${APP_NAME,,}.conf << EOF
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot ${WWW_HOME}/phpwiki
    ServerName 127.0.0.1
    ServerAlias localhost
    <Directory ${WWW_HOME}/phpwiki >
        Options FollowSymLinks
        AllowOverride All
        Order allow,deny
        allow from all
    </Directory>
    ErrorLog \${APACHE_LOG_DIR}/phpwiki-error_log
    CustomLog \${APACHE_LOG_DIR}/phpwiki_custom_log common
</VirtualHost>
EOF
sudo cp /tmp/${APP_NAME,,}.conf /etc/apache2/sites-available
sudo a2ensite ${APP_NAME,,}.conf
sudo service apache2 reload
# Create wiki configuration file
cat > /tmp/config.ini << EOF
WIKI_NAME = phpWiki
#Username and password of administrator.
ADMIN_USER = phpwikiadmin
ADMIN_PASSWD = admin@123
#To use plain text passwords, in particular for the ADMIN_PASSWD, set ENCRYPTED_PASSWD to false.
ENCRYPTED_PASSWD = false
#If set, reverse dns lookups will be performed to attempt to convert
#the user's IP number into a host name, in the case where the http server does not do this.
ENABLE_REVERSE_DNS = true
# If true, only the admin user can make zip dumps. Otherwise anyone
# may download all wiki pages as a single zip archive.
ZIPDUMP_AUTH = false
ENABLE_RAW_HTML = true
# If this is set, only pages locked by the Administrator may contain the
# RawHtml plugin
ENABLE_RAW_HTML_LOCKEDONLY = true
# If this is set, all unsafe html code is stripped automatically (experimental!)
# See http://chxo.com/scripts/safe_html-test.php
ENABLE_RAW_HTML_SAFE = true
# If true, only the admin user or users from localhost (without password) can do:
INSECURE_ACTIONS_LOCALHOST_ONLY = true
CACHE_CONTROL = LOOSE
CACHE_CONTROL_MAX_AGE = 600
COOKIE_EXPIRATION_DAYS = 365
DATABASE_TYPE = sql
# DATABASE_DSN = "mysql://guest@unix(/var/lib/mysql/mysql.sock)/test"
DATABASE_DSN = "mysql://${DB_USER}:${DB_PASSWORD}@localhost:3306/${DB_NAME}"
DATABASE_PERSISTENT = false
DATABASE_SESSION_TABLE = session
DATABASE_DBA_HANDLER = db4
DATABASE_TIMEOUT = 12
MAJOR_MAX_AGE = 32
MAJOR_KEEP = 8
MINOR_MAX_AGE = 7
MINOR_KEEP = 4
AUTHOR_MAX_AGE = 365
AUTHOR_KEEP = 8
AUTHOR_MIN_AGE = 7
AUTHOR_MAX_KEEP = 20
ALLOW_ANON_EDIT = true
ALLOW_BOGO_LOGIN = true
ALLOW_USER_PASSWORDS = true
USER_AUTH_POLICY = first-only
GROUP_METHOD = WIKIPAGE
DBAUTH_AUTH_CRYPT_METHOD = plain
DEFAULT_LANGUAGE = en
EOF
sudo cp /tmp/config.ini ${WWW_HOME}/config/config.ini
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
xdg-open http://localhost/${APP_NAME,,}/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/lcal.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install PWman shell-based password manager
APP_NAME=pwman
APP_VERSION=0.4.5
curl -o /tmp/${APP_NAME}.deb -J -L https://pilotfiber.dl.sourceforge.net/project/${APP_NAME}/${APP_NAME}/${APP_NAME}-${APP_VERSION}/${APP_NAME}_${APP_VERSION}-1_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/${APP_NAME}.deb
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Sorter utility for automatic file organization by type
APP_NAME=sorter
APP_VERSION=2.0.1
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	curl -o /tmp/${APP_NAME}.tar.gz -J -L https://cytranet.dl.sourceforge.net/project/file-${APP_NAME}/v${APP_VERSION}/Sorter_${APP_VERSION}_Ubuntu16.04_x64.tar.gz
	dtrx -n ${APP_NAME}.tar.gz
	cd /tmp/${APP_NAME}
	curl -o ./${APP_NAME}.png -J -L https://sourceforge.net/p/file-sorter/code/ci/master/tree/assets/icon.png?format=raw
	sudo mv ${APP_NAME} /opt
	sudo ln -s /opt/${APP_NAME}/${APP_NAME} /usr/local/bin/${APP_NAME}
	# Create icon in menus
	cat > /tmp/${APP_NAME}.desktop << EOF
	[Desktop Entry]
	Name=${APP_NAME}
	Comment=Utility to automatically sort files by type
	GenericName=${APP_NAME}
	Exec=/opt/${APP_NAME}/${APP_NAME}
	Icon=/opt/${APP_NAME}/${APP_NAME}.png
	Type=Application
	StartupNotify=true
	Terminal=false
	Categories=Utility;
	Keywords=file_management;
EOF
	sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
	cd $HOME
	rm -rf /tmp/${APP_NAME}*
else    # Otherwise use version for 32-bit kernel
	echo "Sorry...  No 32-bit version of '${APP_NAME}' available."
fi

# Install xosview X11 performance meter from source
APP_NAME=xosview
APP_GUI_NAME="X11 Performance Meter"
APP_VERSION=2.3.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}2-${APP_VERSION}
sudo apt-get install -y libxpm-dev libxft-dev libx11-dev libxext-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
# Create icon in menus
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_GUI_NAME}
Exec=/usr/local/bin/xosview2
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Utility;Development
Keywords=meter;monitor;
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
ln -s /usr/share/applications/${APP_NAME}.desktop $HOME/.config/autostart/  # Create link to autostart xosview on startup

# Install File Rally MRU list utility for all folders
APP_NAME=FileRally
APP_VERSION=v1.3
curl -o /tmp/${APP_NAME,,}.tar.gz -J -L https://cytranet.dl.sourceforge.net/project/${APP_NAME,,}/${APP_NAME}.${APP_VERSION}.tar.gz
cd /tmp
dtrx -n ${APP_NAME,,}.tar.gz
sudo mv ${APP_NAME,,} /opt
# Create icon in menus
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=MRU list of all folders
GenericName=MRU list of all folders
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
Icon=/opt/${APP_NAME,,}/${APP_NAME}Icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Utility;Development
Keywords=mru;monitor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
ln -s /usr/share/applications/${APP_NAME,,}.desktop $HOME/.config/autostart/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Madedit-Mod text editor from Debian package
APP_NAME=Madedit-Mod
APP_VERSION=0.4.20-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)_Ubuntu_22_04_2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install IT-Edit (Integrated Terminal Editor)
APP_NAME=it-edit
APP_VERSION=3.0
# Enable GNOME 3 PPAs to get latest versions of dependent packages:
sudo add-apt-repository -y ppa:gnome3-team/gnome3-staging
sudo add-apt-repository -y ppa:gnome3-team/gnome3
sudo apt-get update && sudo apt-get upgrade -y
curl -o /tmp/${APP_NAME}.deb -J -L http://www.open-source-projects.net/Downloads/${APP_NAME}-${APP_VERSION}_noarch.deb
cd /tmp
sudo gdebi -n /tmp/${APP_NAME}.deb
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Chirp Twitter client (64-bit ONLY)
APP_NAME=chirp
curl -o /tmp/${APP_NAME}.zip -J -L https://file-fevwnujbqw.now.sh/Chirp-linux-x64.zip
cd /tmp
dtrx -n ${APP_NAME}.zip
cd /tmp/${APP_NAME}
mv Chirp-linux-x64 ${APP_NAME}
sudo mv ${APP_NAME} /opt
# Create icon in menus
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=Chirp
Comment=Twitter client
GenericName=Twitter client
Exec=/opt/${APP_NAME}/Chirp
Icon=/opt/${APP_NAME}/resources/app/icon/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Network;
Keywords=twitter;messenger;
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME}/Chirp /usr/local/bin/chirp
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Peg Solitaire game
APP_NAME=peg-solitaire
APP_VERSION=2.2-1
curl -o /tmp/${APP_NAME}.deb -J -L https://pilotfiber.dl.sourceforge.net/project/peg-solitaire/version%202.2%20%28June%2C%202017%29/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.deb
cd /tmp
sudo gdebi -n ${APP_NAME}.deb
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install QuiteRSS cross-platform Qt-based RSS reader from Debian package
APP_NAME=QuiteRSS
APP_GUI_NAME="Cross-platform Qt-based RSS reader."
APP_VERSION=N/A
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (eo|fo|go)$ ]]; then  # 19.10, 20.04, 20.10
	APP_VERSION=0.19.4-0ubuntu1~eoan
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (di)$ ]]; then  # 19.04
	APP_VERSION=0.19.4-0ubuntu1~disco
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co)$ ]]; then  # 18.04, 18.10
	APP_VERSION=0.19.4-0ubuntu1~bionic
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (ar)$ ]]; then  # 17.10
	APP_VERSION=0.18.12-0ubuntu1~artful
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe)$ ]]; then  # 17.10
	APP_VERSION=0.19.4-0ubuntu1~xenial
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (tr|ut|vi|wi|ya|ze)$ ]]; then  # 14.04 - 17.04
	APP_VERSION=0.18.12-0ubuntu1~trusty
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/~${APP_NAME,,}/+archive/ubuntu/${APP_NAME,,}/+files/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Makagiga Java-based PIM/RSS feed reader from package
APP_NAME=Makagiga
APP_GUI_NAME="Cross-platform Java-based PIM/RSS feed reader."
APP_VERSION=6.30
APP_EXT=7z
FILE_NAME=${APP_NAME,,}-linux-x64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/* /opt/${APP_NAME,,}
sudo rm -rf /opt/${APP_NAME,,}/java-windows* /opt/${APP_NAME,,}/*.exe /opt/${APP_NAME,,}/*.bat
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;Internet;
Keywords=PIM;RSS;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Eternal Terminal SSH client via PPA
# Install dependencies
sudo apt-get install -y libboost-dev libsodium-dev libncurses5-dev libprotobuf-dev protobuf-compiler cmake libgoogle-glog-dev libgflags-dev unzip wget
sudo apt-add-repository -y ppa:jgmath2000/et
sudo apt-get update
sudo apt-get install -y et

# Install Gantt Project project management tool from Debian package
APP_NAME=GanttProject
APP_VERSION=3.3.3316
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo gdebi -n ${APP_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install HTTP Test Tool (httest) from source
APP_NAME=httest
APP_VERSION=2.4.24
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y libapr1-dev libaprutil1-dev libpcre3-dev help2man zlib1g-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/htt/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
# Due to path for PCRE header file on Ubuntu,
# we have to update the source files for the #include
# directory for the header file.
cd src
sed -i 's@<pcre/pcre.h>@<pcre.h>@g' *
cd ..
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Ubunsys Ubuntu installer/tweaker from source
APP_NAME=Ubunsys
APP_GUI_NAME="Ubuntu installer/tweaker."
APP_VERSION=2020.08.25
APP_EXT=tar.gz
FILE_NAME=v${APP_VERSION}
sudo apt-get install qt5-qmake qt5-default -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/*${APP_NAME,,}*
qtchooser -run-tool=qmake -qt=5 && make && sudo make install
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Jarun utilities from PPA: googler, Buku, and nnn
sudo add-apt-repository -y ppa:twodopeshaggy/jarun
sudo apt-get update
sudo apt-get install -y buku nnn googler

# Install bvi plus hex editor from source
APP_NAME=bviplus
APP_VERSION=1.0
APP_EXT=tgz
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://managedway.dl.sourceforge.net/project/${APP_NAME}/${APP_NAME}/${APP_VERSION}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Skychart planetarium package from Debian package
APP_NAME=Skychart
APP_VERSION=4.3-4989
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
# libpasastro (Pascal astronomical library) is dependency for Skychart.
curl -o /tmp/libpasastro.${APP_EXT} -J -L https://downloads.sourceforge.net/libpasastro/libpasastro_1.4.2-54_${KERNEL_TYPE}.${APP_EXT}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo gdebi -n libpasastro.${APP_EXT}
sudo gdebi -n ${APP_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/libpasastro.* /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Qt Bitcoin Trader trading client for major cryptocurrency exchanges from source
APP_NAME=QtBitcoinTrader
APP_VERSION=1.42.22
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
# Install package dependencies
sudo apt-get install -y g++ libssl-dev libglu1-mesa-dev qt5-qmake qtscript5-dev qtmultimedia5-dev qt5-default libqt5texttospeech5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.sourceforge.net/project/bitcointrader/SRC/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}.${APP_EXT}/src
mkdir -p build && cd build
qtchooser -run-tool=qmake -qt=5 ../${APP_NAME}_Desktop.pro && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Bash Snippets (tiny shell scripts for various functions, such as weather, stock prices, etc.) from package
APP_NAME=Bash-Snippets
APP_VERSION=1.23.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/alexanderepstein/Bash-Snippets/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo ./install.sh currency
sudo ./install.sh stocks
sudo ./install.sh weather
sudo ./install.sh crypt
sudo ./install.sh geo
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Tagstoo file tag manager from AppImage
APP_NAME=Tagstoo
APP_GUI_NAME="File tag manager"
APP_VERSION=2.0.1
APP_EXT=AppImage
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux32
fi
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://ayera.dl.sourceforge.net/project/${APP_NAME,,}/${APP_NAME}%20${APP_VERSION}%20${ARCH_TYPE}/${APP_NAME}.${APP_EXT}
cd /tmp
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv ${APP_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
# Create icon in menus
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=/opt/${APP_NAME}/share/${APP_NAME}/welcome/images/liteide128.xpm
Type=Application
StartupNotify=false
Terminal=false
Categories=Accessories;System;
Keywords=tag;tagging;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME}/${APP_NAME} /usr/local/bin/${APP_NAME}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Shiki shell-based Wikipedia reader
APP_NAME=shiki
APP_VERSION=1.1
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://github.com/jorvi/${APP_NAME}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
sudo mv ${APP_NAME}.sh /usr/local/bin
echo 'source "/usr/local/bin/${APP_NAME}.sh"' >> $HOME/.bashrc
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Qalculate desktop calculator application from package
# http://qalculate.github.io/
APP_NAME=Qalculate
APP_VERSION=5.5.1
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/lib${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/${APP_NAME}/${APP_NAME,,}-gtk/raw/master/data/icons/48x48/${APP_NAME,,}.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -f /tmp/${FILE_NAME}/${APP_NAME,,}*/qalc* /usr/local/bin
sudo mv /tmp/${APP_NAME,,}.png /usr/share/pixmaps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Desktop calculator
GenericName=${APP_NAME}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Calculator;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install PuTTY cross-platform standard GTK SSH client from source.
# http://www.chiark.greenend.org.uk/~sgtatham/putty/
APP_NAME=PuTTY
APP_GUI_NAME="Cross-platform standard GTK SSH client."
APP_GUI_CATEGORIES="Internet;System;"
APP_GUI_KEYWORDS="SSH;Terminal;"
APP_VERSION=0.78
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
# Install dependencies
sudo apt-get install -y libxml2-dev libgtk-3-dev build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://the.earth.li/~sgtatham/${APP_NAME,,}/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
https://the.earth.li/~sgtatham/putty/0.76/putty-0.76.tar.gz
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
# Build and copy PNG icons
cd /tmp/${FILE_NAME}/icons
make
sudo mkdir -p /usr/local/share/icons/hicolor/16x16/apps /usr/local/share/icons/hicolor/32x32/apps /usr/local/share/icons/hicolor/48x48/apps
sudo cp *-16*.png /usr/local/share/icons/hicolor/16x16/apps
sudo cp *-32*.png /usr/local/share/icons/hicolor/32x32/apps
sudo cp *-48*.png /usr/local/share/icons/hicolor/48x48/apps
# Create icon in menus
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/hicolor/32x32/apps/${APP_NAME,,}-32.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install whipFTP cross-platform Python-based FTP client from Debian package
APP_NAME=whipFTP
APP_VERSION=5.0
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/RainingComputers/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install XML Tree Editor cross-platform tree-view XML editor from Debian package
APP_NAME=XMLTreeEdit
APP_VERSION=0.1.0.36
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-qt5_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}or/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo gdebi -n ${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Qiks LAN messenger from Debian package
APP_NAME=qiks
APP_VERSION=1.0
APP_EXT=deb
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L http://cfhcable.dl.sourceforge.net/project/${APP_NAME}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
sudo gdebi -n ${APP_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install vifm file manager from source
APP_NAME=vifm
APP_VERSION=0.14.2
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libncursesw5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n ${FILE_NAME}.${APP_EXT}
cd ${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install 4Pane file manager from Debian package
APP_NAME=4Pane
APP_VERSION=8.0
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (ja)$ ]]; then  # 22.04
    DISTRIB_VERSION=jammy
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (ki)$ ]]; then  # 22.10
    DISTRIB_VERSION=kinetic
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (gr|hi)$ ]]; then  # 20.10, 21.04
    DISTRIB_VERSION=groovy
    APP_VERSION=7.0
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (fo)$ ]]; then  # 20.04
    DISTRIB_VERSION=focal
    APP_VERSION=7.0
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (eo)$ ]]; then  # 19.10
	DISTRIB_VERSION=eoan
    APP_VERSION=6.0
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (di)$ ]]; then  # 19.04
	DISTRIB_VERSION=disco
    APP_VERSION=6.0
else
	DISTRIB_VERSION=bionic
    APP_VERSION=6.0
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1unofficial.${DISTRIB_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/fourpane/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Tad Data Viewer from Debian package (64-bit only)
APP_NAME=tad
APP_VERSION=0.9.0
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://github.com/antonycourtney/${APP_NAME}/releases/download/v${APP_VERSION}/${APP_NAME}_${APP_VERSION}_amd64.${APP_EXT}
	sudo gdebi -n /tmp/${APP_NAME}.${APP_EXT}
	cd $HOME
	rm -rf /tmp/${APP_NAME}*
fi

# Install AVFS virtual file system from source
APP_NAME=AVFS
APP_VERSION=1.1.5
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libfuse-dev libarchive-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/avf/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Worker File Manager (For AVFS support install AVFS above.)
APP_NAME=worker
APP_VERSION=5.2.1
APP_EXT=tar.zst
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y liblua5.3-dev zstd
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/workerfm/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -I zstd -xvf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
# Create icon in menus
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=Worker File Manager
Comment=Simple canonical file manager
GenericName=Worker
Exec=worker
Icon=/usr/local/share/pixmaps/WorkerIcon.xpm
Type=Application
StartupNotify=false
Terminal=false
Categories=Accessories;System;
Keywords=file manager;
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Neofetch shell script system information tool
APP_NAME=neofetch
APP_VERSION=7.1.0
APP_EXT=tar.gz
# Install dependencies
sudo apt-get install -y imagemagick curl
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://github.com/dylanaraps/${APP_NAME}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
sudo make PREFIX=/usr/local install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Digital Clock 4
APP_NAME=digital_clock_4
APP_VERSION=4.7.9
APP_EXT=tar.xz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://iweb.dl.sourceforge.net/project/digitalclock4/${APP_VERSION}/${APP_NAME}-linux_${ARCH_TYPE}.tar.xz
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}
mv Digital\ Clock\ 4/ ${APP_NAME}
sudo mv ${APP_NAME} /opt
sudo cp /opt/${APP_NAME}/digital_clock.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME}/digital_clock /usr/local/bin/digital_clock
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Oprofile task/process profiler from source
APP_NAME=oprofile
APP_VERSION=1.2.0
APP_EXT=tar.gz
sudo apt-get install -y libpopt-dev binutils-dev libiberty-dev
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://sourceforge.net/projects/${APP_NAME}/files/latest/download
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
sudo addgroup oprofile
sudo /usr/sbin/useradd -p $(openssl passwd -1 oprofile) oprofile  # Add special account for profiler.
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install HTTraQt web scraper tool from source
APP_NAME=httraqt
APP_VERSION=1.4.11
APP_EXT=tar.gz
sudo apt-get install -y libhttrack-dev  # Install HTTrack dependency
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://sourceforge.net/projects/${APP_NAME}/files/latest/download
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
./clean.sh
mkdir -p build && cd build && cmake .. && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Brave web browser (release channel) from package
APP_NAME=Brave-Browser
APP_GUI_CATEGORIES="Internet;Networking"
APP_GUI_KEYWORDS="Web;Browser;"
APP_VERSION=1.79.119
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/brave/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
unzip /tmp/${FILE_NAME}.${APP_EXT} -d /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/product_logo_128.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install reCsvEditor CSV editor from package
APP_NAME=reCsvEditor
APP_VERSION=0.99.3
APP_EXT=zip
FILE_NAME=${APP_NAME}_Installer_${APP_VERSION}.jar
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo java -jar /tmp/${FILE_NAME}/${FILE_NAME}  # Launches GUI installer
sudo ln -s /usr/local/RecordEdit/reCsvEd/bin/runCsvEditor.sh /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install ZenTao project management tool from Debian package
APP_NAME=ZenTaoPMS
APP_VERSION=12.4.2
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/zentao/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install FastoNoSql GUI for NoSQL DBs from package
APP_NAME=fastonosql
APP_VERSION=1.6.0
APP_EXT=deb
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}-x86_64.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME}.${APP_EXT}
cd $HOME
rm -rf ${APP_NAME}*

# Install BoostNote notepad/PIM from package
APP_NAME=boostnote
APP_VERSION=0.16.1
APP_EXT=deb
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://github.com/BoostIO/boost-releases/releases/download/v${APP_VERSION}/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf ${APP_NAME}*

# Install Red Notebook cross-platform journey/diary/PIM from source
APP_NAME=rednotebook
APP_VERSION=2.39
APP_EXT=tar.gz
sudo apt-get install -y python3-enchant gir1.2-webkit2-4.0 python3-pip python3-yaml  # Install dependencies
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
sudo pip3 install .
sudo cp ./rednotebook/images/rednotebook-icon/rn-48.png /usr/local/share/pixmaps/rednotebook-48.png
# Create icon in menus
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=Red Notebook
Comment=Basic notepad/PIM with Markdown support
GenericName=Notebook
Exec=rednotebook
Icon=/usr/local/share/pixmaps/rednotebook-48.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;
Keywords=Journal;Diary;Notes;Notebook;
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install LIOS (Linux Intelligent OCR Solution) from package
APP_NAME=lios
APP_VERSION=2.5
APP_EXT=deb
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}_${APP_VERSION}_all.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME}.${APP_EXT}
cd $HOME
rm -rf ${APP_NAME}*

# Install SysCheck system profiler utility
APP_NAME=SysCheck
APP_VERSION=1.1.11
APP_EXT=zip
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/syschecksoftware/${APP_NAME}-v${APP_VERSION}-lite.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}
mv ${APP_NAME}-v${APP_VERSION}-lite ${APP_NAME,,}
sudo mv ${APP_NAME,,} /opt
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Super Productivity To Do List and task manager from Debian package
APP_NAME=superProductivity
APP_VERSION=13.0.10
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/johannesjo/super-productivity/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf ${APP_NAME}*

# Install exa, a replacement for 'ls' command
APP_NAME=exa
APP_VERSION=0.10.1
APP_EXT=zip
FILE_NAME=${APP_NAME}-linux-x86_64-v${APP_VERSION}
# Dependency on libhttp-parser2.1 below is needed due to problem noted
# on Github:  https://github.com/ogham/exa/issues/194
sudo apt-get install -y libhttp-parser2*
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ogham/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/bin/* /usr/local/bin
sudo cp -R /tmp/${FILE_NAME}/man/* /usr/local/man
sudo cp -R /tmp/${FILE_NAME}/completions/* /usr/share/bash-completion/completions
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install KLatexFormula from source
APP_NAME=klatexformula
APP_VERSION=4.0.0
APP_EXT=tar.bz2
sudo apt-get install -y libqt5x11extras5-dev qttools5-dev qttools5-dev-tools
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
mkdir build && cd build
cmake .. && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Psi XMPP messenger from source
APP_NAME=psi
APP_VERSION=1.5
APP_EXT=tar.xz
sudo apt-get install -y libqca2-dev
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
./configure --prefix=/usr/local/psi && make && sudo make install
sudo ln -s /usr/local/psi/bin/psi /usr/local/bin/psi
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Read the Bible from source
APP_NAME=Bible
APP_VERSION=6.3.7
APP_EXT=tar.xz
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/readthebible/${APP_NAME}${APP_VERSION}-64bit.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
sudo mv ${APP_NAME} /opt
sudo ln -s /opt/${APP_NAME}/Bible6 /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Sidu PHP-based database web GUI for MySQL, PostgreSQL, and SQLite from package
APP_NAME=Sidu
APP_GUI_NAME="PHP-based database web GUI for MySQL, PostgreSQL, and SQLite."
APP_GUI_CATEGORIES="Development;Internet;"
APP_GUI_KEYWORDS="Database;Development;"
APP_VERSION=2023.0707
APP_EXT=zip
FILE_NAME=${APP_NAME,,}${APP_VERSION}
sudo apt install apache2 -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
unzip /tmp/${FILE_NAME}.${APP_EXT} -d ${FILE_NAME}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/${APP_NAME,,}*/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
xdg-open http://localhost/sidu/ &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
# Path=/usr/local/bin
Exec=xdg-open http://localhost/sidu/
Icon=${WWW_HOME}/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Tilix (formerly Terminix) terminal emulator from PPA
# https://gnunn1.github.io/tilix-web/
sudo add-apt-repository -y ppa:webupd8team/terminix
sudo apt-get update
sudo apt-get install -y tilix

# Install Visual Studio Code editor from package
# https://code.visualstudio.com/docs/setup/linux
curl -o /tmp/vscode.deb -J -L https://go.microsoft.com/fwlink/?LinkID=760868
sudo gdebi -n /tmp/vscode.deb
cd $HOME
rm -rf /tmp/vscode*

# Install LTerm terminal emulator from source
APP_NAME=lterm
APP_VERSION=1.5.1
APP_EXT=tar.gz
sudo apt-get install -y libvte-2.91-dev libssl-dev libssh-dev
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=LTerm
Comment=Terminal Emulator
GenericName=Terminal Emulator
Exec=${APP_NAME}
Icon=/usr/local/share/${APP_NAME}/img/main_icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Terminal;Shell;
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Add debrepo repository to available repositories
source /etc/os-release   # This config file contains Ubuntu version details.
DEB_STRING='deb http://downloads.sourceforge.net/project/debrepo '${UBUNTU_CODENAME}' main'
echo $DEB_STRING >> /tmp/debrepo.list
DEB_STRING='deb-src http://downloads.sourceforge.net/project/debrepo '${UBUNTU_CODENAME}' main'
sudo echo $DEB_STRING >> /tmp/debrepo.list
sudo mv /tmp/debrepo.list /etc/apt/sources.list.d
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 172E9B0B
sudo apt-get update -y

# Install TUTOS project management tool
APP_NAME=TUTOS
APP_VERSION=1.12.20160813
APP_EXT=tar.bz2
DB_NAME=tutosdb
DB_USER=tutos
DB_PASSWORD=tutos
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-php-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /usr/share
sudo cp /usr/share/${APP_NAME,,}/php/config_default.pinc /usr/share/${APP_NAME,,}/php/config.php
sudo cp /usr/share/${APP_NAME,,}/apache.conf /etc/apache2/sites-available/tutos.conf
sudo a2ensite tutos.conf
sudo service apache2 restart
sudo chown -R www-data:www-data /usr/share/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"

# Install WebTareas PHP/MySQL-based project management and online office tool from package.
APP_NAME=webTareas
APP_GUI_NAME="PHP/MySQL-based project management and online office tool."
APP_GUI_CATEGORIES="Office;"
APP_GUI_KEYWORDS="Project Management;Office;"
APP_VERSION=2.8p5
APP_EXT=zip
DB_NAME=webtareas
DB_USER=webtareas
DB_PASSWORD=webtareas
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R +w ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}'; GRANT USAGE ON *.* TO '${DB_USER}'@'%'; GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%'; FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/installation/setup.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/favicon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install JoPro productivity and office suite
APP_NAME=jopro
APP_VERSION=N/A
APP_EXT=sh
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-linux.${APP_EXT}
sudo sh /tmp/${APP_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Turtl secure, encrypted Evernote alternative
APP_NAME=turtl
APP_VERSION=0.6.4
APP_EXT=tar.bz2
# Determine if this is 32-bit or 64-bit version of kernel.
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	KERNEL_ARCH=64
else    # Otherwise use version for 32-bit kernel
	KERNEL_ARCH=32
fi
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://turtlapp.com/releases/desktop/${APP_NAME}-linux${KERNEL_ARCH}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
sudo sh /tmp/${APP_NAME}/${APP_NAME}-linux${KERNEL_ARCH}/install.sh
sudo chmod -R 777 /opt/turtl/turtl
sudo ln -s /opt/turtl/turtl/turtl /usr/local/bin/turtl
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install WebCollab web-based project management tool
APP_NAME=webcollab
APP_VERSION=3.51
APP_EXT=tar.gz
DB_NAME=webcollab
DB_USER=webcollab
DB_PASSWORD=webcollab
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
sudo mv ${APP_NAME}-${APP_VERSION} ${APP_NAME}
sudo mv ${APP_NAME} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME}
sudo chmod 666 ${WWW_HOME}/${APP_NAME}/config/config.php
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
mysql --host=localhost --user=webcollab --password=webcollab webcollab < ${WWW_HOME}/${APP_NAME}/db/schema_mysql_innodb.sql
xdg-open http://localhost/${APP_NAME}/setup.php &

# Install ProjeQtOr web-based project management tool from package
APP_NAME=ProjeQtOr
APP_GUI_NAME="Web-based project management tool."
APP_GUI_CATEGORIES="Office;"
APP_GUI_KEYWORDS="Project;Management;"
APP_VERSION=12.1.2
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}V${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/projectorria/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci;"
mysql -u root -proot -Bse "CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "GRANT USAGE ON *.* TO '${DB_USER}'@'%'; GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/ &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=xdg-open http://localhost/${APP_NAME,,}/
Icon=${WWW_HOME}/${APP_NAME,,}/view/img/logoMedium.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install kgclock GUI desktop clock from package
APP_NAME=kgclock
APP_GUI_NAME="GUI desktop clock"
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Clock;Reminder;"
APP_VERSION=1.2
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/TARBALL
sudo install -m 755 -s ${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/${APP_NAME,,}
sudo install -m 644 ${APP_NAME,,}.png /usr/local/share/${APP_NAME,,}
sudo install -m 644 bell.wav /usr/local/share/${APP_NAME,,}
sudo install -m 644 beep.wav /usr/local/share/${APP_NAME,,}
sudo install -m 644 kgbell1.wav /usr/local/share/${APP_NAME,,}
sudo install -m 644 kgbell2.wav /usr/local/share/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo install -m 644 /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install uGet GUI download manager from Debian package
APP_NAME=uGet
APP_VERSION=2.2.3
APP_EXT=deb
# source /etc/os-release   # This config file contains Ubuntu version details.
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (eo|fo|gr|hi)$ ]]; then  # 19.10, 20.04, 20.10, 21.04
	UBUNTU_CODENAME=eoan
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (di)$ ]]; then  # 19.04
	UBUNTU_CODENAME=disco
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co)$ ]]; then  # 18.04
	UBUNTU_CODENAME=bioic
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe|ya|ze|ar)$ ]]; then  # 16.04, 16.10, 17.04, 17.10
	UBUNTU_CODENAME=xenial
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-0ubuntu0~${UBUNTU_CODENAME}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/~plushuang-tw/+archive/ubuntu/uget-stable/+files/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Akiee Markdown-based task manager/to do list application
APP_NAME=akiee
APP_VERSION=0.0.4
APP_EXT=deb
KERNEL_TYPE=$(getKernelType)
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://github.com/rockiger/${APP_NAME}-release/raw/linux-release/dist/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Xiphos Bible study tool from PPA
sudo add-apt-repository -y ppa:unit193/crosswire
sudo apt-get update -y
sudo apt-get install -y xiphos

# Install Roamer text-based file manager
APP_NAME=roamer
APP_VERSION=0.3.2
APP_ACCT=abaldwin88
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -Lk https://github.com/${APP_ACCT}/${APP_NAME}/tarball/v${APP_VERSION}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/*${APP_NAME}*
sudo python3 setup.py install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Hyper JS/HTML/CSS Terminal from Debian package
APP_NAME=Hyper
APP_VERSION=3.4.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg --print-architecture)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/hyper.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install QOwnNotes from PPA
sudo add-apt-repository -y ppa:pbek/qownnotes
sudo apt-get update -y
sudo apt-get install -y qownnotes

# Install Tiki Wiki lightweight Wiki CMS/groupware from package
APP_NAME="Tiki Wiki"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Lightweight Wiki CMS/groupware."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Wiki;CMS;"
APP_VERSION=28.3
APP_EXT=tar.xz
DB_NAME=${_APP_NAME}
DB_USER=${_APP_NAME}
DB_PASSWORD=${_APP_NAME}
FILE_NAME=${_APP_NAME//wiki/}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${_APP_NAME}
sudo chown -R www-data:www-data ${WWW_HOME}/${_APP_NAME}
sudo chmod 755 ${WWW_HOME}/${_APP_NAME}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci;"
mysql -u root -proot -Bse "CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "GRANT USAGE ON *.* TO '${DB_USER}'@'%';"
mysql -u root -proot -Bse "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
# mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}'; GRANT USAGE ON *.* TO '${DB_USER}'@'%'; GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%'; FLUSH PRIVILEGES;"
xdg-open http://localhost/${_APP_NAME}/tiki-install.php &
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=xdg-open http://localhost/${_APP_NAME}
Icon=${WWW_HOME}/${_APP_NAME}/img/tiki/tikilogo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install EU-Commander Tcl/Tk file manager
APP_NAME=eu-comm
APP_VERSION=0.119
APP_EXT=tar.gz
sudo apt-get install -y bwidget tk-table tcl8.6
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/eu-commander/${APP_NAME}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
sudo mv ${APP_NAME} /opt
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=EU-Commander
Comment=Tcl/Tk File Manager
GenericName=File Manager
Exec=tclsh8.6 /opt/${APP_NAME}/${APP_NAME}.tcl
Icon=/opt/${APP_NAME}/themes/default/wicon.xbm
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=File;Manager;
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Wcalc CLI calculator from source
APP_NAME=wcalc
APP_VERSION=2.5
APP_EXT=tar.bz2
sudo apt-get install -y libmpfr-dev libgmp-dev
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/w-calc/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Eric Python IDE from package
APP_NAME=Eric
APP_VERSION=25.6.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}7-${APP_VERSION}
sudo apt-get install -y python3-pyqt5 python3-pyqt5.qsci python3-pyqt5.qtsvg python3-pyqt5.qtsql python3-pyqt5.qtwebengine python3-pyqt5.qtchart
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/eric-ide/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p $HOME/.local/bin/${APP_NAME,,}
cd $HOME/.local/bin/${APP_NAME,,}
cp -R /tmp/${FILE_NAME}/* $HOME/.local/bin/${APP_NAME,,}
python3 -m venv $HOME/.local/bin/${APP_NAME,,}/.venv
source $HOME/.local/bin/${APP_NAME,,}/.venv/bin/activate
python3 ./install.py
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Finanx 12c HP-12c financial calculator emulator
APP_NAME=finanx
APP_VERSION=12c-0.2.4
APP_EXT=zip
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/finanx/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
mv /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION} /tmp/${APP_NAME}/${APP_NAME}
cd /tmp/${APP_NAME}
sudo mv ${APP_NAME} /opt
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=Finanx 12c
Comment=HP-12c Financial Calculator Emulator
GenericName=Financial Calculator
Exec=/opt/${APP_NAME}/${APP_NAME}.sh
#Icon=/opt/${APP_NAME}/themes/default/wicon.xbm
Type=Application
StartupNotify=true
Terminal=true
Categories=Accessories;System;
Keywords=Finance;Calculator;
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install PivotX weblog platform
APP_NAME=pivotx
APP_VERSION=2.3.11
APP_EXT=zip
DB_NAME=pivotx
DB_USER=pivotx
DB_PASSWORD=pivotx
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/pivot-weblog/${APP_NAME}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 777 ${WWW_HOME}/${APP_NAME,,}/images/ ${WWW_HOME}/${APP_NAME,,}/pivotx/db/ ${WWW_HOME}/${APP_NAME,,}/pivotx/templates
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install Swiss File Knife (SFK) shell file utility
APP_NAME=sfk
APP_VERSION=2.0.0
APP_EXT=exe
	if [[ $(uname -m | grep '64') ]]; then  # Check for 64-bit Linux kernel
		ARCH_TYPE=linux-64
	else    # Otherwise use version for 32-bit kernel
	    APP_VERSION=1.9.6
		ARCH_TYPE=linux
	fi
curl -o /tmp/${APP_NAME} -J -L https://downloads.sourceforge.net/swissfileknife/${APP_NAME}${APP_VERSION//./}-${ARCH_TYPE}.${APP_EXT}
sudo chmod a+x /tmp/${APP_NAME}
sudo mv /tmp/${APP_NAME} /usr/local/bin

# Install Freeplane mind-mapping tool from Debian package
APP_NAME=Freeplane
APP_VERSION=1.12.11
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}~upstream-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install HyperJump Bash bookmark tool
APP_NAME=hyperjump
APP_VERSION=
APP_EXT=
sudo apt-get install -y dialog
curl -o /tmp/${APP_NAME} -J -L https://github.com/x0054/${APP_NAME}/raw/master/${APP_NAME}
mv /tmp/${APP_NAME} $HOME/bin/${APP_NAME}
echo '## Load HyperJump Bash bookmark tool' >> $HOME/.bashrc
echo 'source $HOME/bin/'${APP_NAME} >> $HOME/.bashrc
source $HOME/bin/${APP_NAME}	# Activate HyperJump immediately

# Install Feng Office
APP_NAME=fengoffice
APP_VERSION=3.5.1.5
APP_EXT=zip
DB_NAME=fengoffice
DB_USER=fengoffice
DB_PASSWORD=fengoffice
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/opengoo/${APP_NAME}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 777 ${WWW_HOME}/${APP_NAME,,}/cache/ ${WWW_HOME}/${APP_NAME,,}/config/ ${WWW_HOME}/${APP_NAME,,}/tmp/ ${WWW_HOME}/${APP_NAME,,}/upload/
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/public/install &

# Install CheckMails system tray new email notification tool from package
APP_NAME=checkmails
APP_VERSION=1.1.4-2
APP_EXT=deb
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}_${APP_VERSION}_all.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install jEdit Java text editor from Debian package
APP_NAME=jEdit
APP_VERSION=5.7.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Franz messenger consolidator tool from AppImage
APP_NAME=Franz
APP_GUI_CATEGORIES="Accessories;Internet;"
APP_GUI_KEYWORDS="Messenger;Chat;"
APP_VERSION=5.11.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/meetfranz/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/meetfranz/${APP_NAME,,}/master/build-helpers/images/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Sciter Notes notepad utility
APP_NAME=sciter-notes
APP_VERSION=N/A
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://notes.sciter.com/distributions/${APP_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
mv bin.gtk ${APP_NAME,,}
sudo mv ${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Sciter Notes
Comment=Cross-platform notepad with capability to sync among devices
GenericName=Notepad
Exec=/opt/${APP_NAME,,}/notes
#Icon=/opt/${APP_NAME}/themes/default/wicon.xbm
Type=Application
StartupNotify=true
Terminal=true
Categories=Accessories;System;
Keywords=Notepad;Collaboration;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME,,}/notes /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Leo editor/IDE/PIM
APP_NAME=Leo-Editor
APP_GUI_NAME="Cross-platform, Python-based editor/IDE, outliner, and PIM."
APP_VERSION=6.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y python3-pyqt5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/launchLeo.py
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/launchLeo.py
Icon=/opt/${APP_NAME,,}/leo/Icons/LeoApp.ico
Type=Application
StartupNotify=true
Terminal=true
Categories=Programming;Development;Accessories;
Keywords=Editor;IDE;Python;PIM
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install bed (Binary Editor) from source
APP_NAME=bed
APP_VERSION=3.1.2
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.src
sudo apt-get install -y build-essential libmagic-dev lynx libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/binaryeditor/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Saga GIS application from source
APP_NAME=saga
APP_VERSION=9.8.1
APP_EXT=tar.gz
sudo apt-get install -y libwxgtk3.0-dev python-wxgtk3.0 postgresql-server-dev-all libgdal-dev libpqxx-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/saga-gis/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Group-Office web-based office suite (manual installation)
APP_NAME=GroupOffice
APP_VERSION=6.8.124
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libwbxml2-utils tnef
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/group-office/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir ${WWW_HOME}/${APP_NAME,,}
sudo mv ${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo touch ${WWW_HOME}/${APP_NAME,,}/config.php
sudo mkdir -p /home/${APP_NAME,,}
sudo mkdir -p /tmp/${APP_NAME,,}
sudo chmod -R 0777 /home/${APP_NAME,,} /tmp/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,} /home/${APP_NAME,,} /tmp/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/ &
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Brackets text editor from package
APP_NAME=Brackets
APP_VERSION=1.13
APP_EXT=deb
	if [[ $(uname -m | grep '64') ]]; then  # Check for 64-bit Linux kernel
		ARCH_TYPE=64-bit
	else    # Otherwise use version for 32-bit kernel
		ARCH_TYPE=32-bit
	fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${APP_NAME}.Release.${APP_VERSION}.${ARCH_TYPE}.${APP_EXT}
cd /tmp
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Worker File Manager from source
APP_NAME=worker
APP_VERSION=3.12.0
APP_EXT=tar.bz2
sudo apt-get install -y libdbus-glib-1-dev libmagic-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}fm/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install CuteMarkEd Qt Markdown editor from source
APP_NAME=CuteMarkEd
APP_VERSION=0.11.3
APP_EXT=tar.gz
sudo apt-get install -y libqt5webkit5-dev qttools5-dev-tools qt5-default discount libmarkdown2-dev libhunspell-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/cloose/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
qmake && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Scilab math toolkit
APP_NAME=scilab
APP_VERSION=6.0.0
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://www.scilab.org/download/${APP_VERSION}/${APP_NAME}-${APP_VERSION}.bin.linux-${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
mv ${APP_NAME}-${APP_VERSION} ${APP_NAME}
sudo mv ${APP_NAME} /opt
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Scilab
Comment=Cross-platform IDE for math
GenericName=Scilab
Exec=/opt/${APP_NAME,,}/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME}/share/icons/hicolor/32x32/apps/scilab.png
Type=Application
StartupNotify=true
Terminal=true
Categories=Programming;Development;Science
Keywords=Math;Programming;Data;Science
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME,,}/bin/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install EeeWeather desktop weather widget from package
APP_NAME=eeeweather
APP_VERSION=0.71-1
APP_EXT=deb
KERNEL_TYPE=getKernelType()
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
cd /tmp
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install XSchem circuit schematic editor from source
APP_NAME=XSchem
APP_VERSION=3.4.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y bison flex libxpm-dev libx11-dev tcl8.6-dev tk8.6-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/src
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install QPDF PDF transformation/manipulation program and library from source
APP_NAME=QPDF
APP_VERSION=12.2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y zlib1g-dev libjpeg62-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Griffon multi-language IDE from source
APP_NAME=griffon
APP_VERSION=1.8.4
APP_EXT=tar.gz
sudo apt-get install -y vte-2.91-dev webkitgtk-3.0-dev gtksourceview-3.0-dev libgtk-3-dev libnotify-dev scons
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/griffonide/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
sudo ./install-griffon
sudo cp ./pixmaps/griffon_icon.png /usr/share/pixmaps
sudo cp ./${APP_NAME}.desktop /usr/local/share/applications
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}

# Install Collabtive project management suite (manual installation)
APP_NAME=Collabtive
APP_VERSION=31
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
#cd /tmp/${APP_NAME,,}
#mv ${APP_NAME}-${APP_VERSION} ${APP_NAME,,}
mkdir -p ./${APP_NAME,,}/templates_c
chmod 777 ./${APP_NAME,,}/config/standard/config.php ./${APP_NAME,,}/files ./${APP_NAME,,}/templates_c ./${APP_NAME,,}/templates
sudo mv ${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cd $HOME
rm -rf /tmp/${APP_NAME}*
xdg-open http://localhost/${APP_NAME,,}/install.php &

# Install Doogie Chromium-based browser with tree-style pages
APP_NAME=doogie
APP_VERSION=0.6.0
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/cretz/${APP_NAME}/releases/download/v${APP_VERSION}/${APP_NAME}-${APP_VERSION}-linux64.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME} /opt
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install qdPM Web-Based Project Management Tool (manual installation)
APP_NAME=qdPM
APP_VERSION=9.2
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
#cd /tmp/${APP_NAME,,}
#mv ${APP_NAME}-${APP_VERSION} ${APP_NAME,,}
sudo mv ${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cd $HOME
rm -rf /tmp/${APP_NAME}*
xdg-open http://localhost/${APP_NAME,,}/install/index.php &

# Install DK Tools system utility suite from source
APP_NAME=DKTools
APP_GUI_NAME="System utility suite."
APP_VERSION=4.38.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
WXVERS="3.0"
LJTVERS="8"
sudo apt-get install -yy build-essential autoconf automake autotools-dev dh-make debhelper dh-systemd reprepro devscripts fakeroot file gfortran git gnupg fp-compiler lintian patch patchutils pbuilder quilt xutils-dev make gcc g++ zlib1g-dev libbz2-dev libssl-dev libdb-dev libpng-dev libjpeg${LJTVERS}-dev libjpeg-turbo${LJTVERS}-dev libsnmp-dev wx${WXVERS}-headers libwxgtk${WXVERS}-gtk3-dev libwxbase${WXVERS}-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Task Coach to do list manager from Debian package
APP_NAME=TaskCoach
APP_VERSION=1.4.6-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
sudo apt-get install -y libbz2-dev libpng-dev libjpeg-dev libtiff-dev libdb-dev libmysqlclient-dev libwxgtk3.0-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Agilefant Web-Based Project Management Tool (manual installation)
# https://github.com/Agilefant/agilefant/wiki/Agilefant-installation-guide
APP_NAME=agilefant
APP_VERSION=3.5.4
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
sudo apt-get install -y tomcat8 tomcat8-admin
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
#cd /tmp/${APP_NAME,,}
#mv ${APP_NAME}-${APP_VERSION} ${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,}.war /var/lib/tomcat8/webapps
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
sudo service tomcat8 restart
cd $HOME
rm -rf /tmp/${APP_NAME}*
xdg-open http://localhost:8080/${APP_NAME,,}/ &

# Install Squirrel SQL Java-based SQL database client utility from package
APP_NAME=Squirrel-SQL
APP_GUI_NAME="Java-based SQL database client utility."
APP_VERSION=4.8.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-standard
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo java -jar /tmp/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/${APP_NAME,,}-${APP_VERSION}/${APP_NAME,,}.sh /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/${APP_NAME,,}-${APP_VERSION}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/${APP_NAME,,}-${APP_VERSION}/icons/acorn.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;
Keywords=Database;SQL;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Only Office Desktop Editor from package
APP_NAME=onlyoffice-desktopeditors
APP_VERSION=7.0
APP_EXT=deb
FILE_NAME=${APP_NAME}_${KERNEL_TYPE}
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(ze|ar|bi|co|di|eo|fo|gr|hi)$ ]]; then
	DISTRIB_RELEASE=16
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(vi|wi)$ ]]; then
	DISTRIB_RELEASE=14
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://sourceforge.net/projects/desktopeditors/files/v${APP_VERSION}/ubuntu/${DISTRIB_RELEASE:0:2}/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Beige UML editor
APP_NAME=beige-uml
APP_VERSION=16Aug2017
APP_EXT=jar
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://sourceforge.net/projects/beigeuml/files/${APP_VERSION}/${APP_NAME}-swing-jar-with-dependencies.jar
sudo mkdir /opt/${APP_NAME}
sudo mv /tmp/${APP_NAME,,}.${APP_EXT} /opt/${APP_NAME}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Beige UML
Comment=Java-based UML diagram editor
GenericName=Beige UML
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development
Keywords=Programming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Upterm terminal/shell built with Electron (AppImage)
APP_NAME=upterm
APP_VERSION=0.4.3
APP_EXT=AppImage
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/railsware/${APP_NAME}/releases/download/v${APP_VERSION}/${APP_NAME}-${APP_VERSION}-${ARCH_TYPE}-linux.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME}
sudo mv /tmp/${APP_NAME}.${APP_EXT} /opt/${APP_NAME}
sudo chmod +x /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Upterm
Comment=Electron-based terminal/shell
GenericName=Beige UML
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;Accessories;System
Keywords=Terminal;Shell;IDE
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install CopyMastro file move/copy utility from package
APP_NAME=CopyMastro
APP_GUI_NAME="File move/copy utility."
APP_VERSION=4.2.8
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-qt5-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Copy;File;Utilities;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Printed Circuit Board (PCB) Layout Tool from source
APP_NAME=pcb
APP_VERSION=4.2.0
APP_EXT=tar.gz
sudo apt-get install -y intltool libgtkglext1-dev libgd-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Organize My Files file management utility
APP_NAME=Organize-My-Files
APP_VERSION=2.4.0
APP_EXT=appimage
sudo apt-get install -y intltool libgtkglext1-dev libgd-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}-Lite.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Agora Project groupware application (manual installation)
APP_NAME=agora_project
APP_VERSION=3.7.3.1
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/agora-project/${APP_NAME}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
#cd /tmp/${APP_NAME,,}
#mv ${APP_NAME}-${APP_VERSION} ${APP_NAME,,}
sudo mv ${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cd $HOME
rm -rf /tmp/${APP_NAME}*
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install Strong Java Chess Engine (SJCE) graphical chess tool
APP_NAME=SJCE
APP_VERSION=08-08-18
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L  https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_bin.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
#cd /tmp/${APP_NAME,,}
#mv ${APP_NAME}_${APP_VERSION}_bin ${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_bin /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Strong Java Chess Engine (SJCE)
Comment=Java-based graphical chess tool
GenericName=SJCE
Exec=/opt/${APP_NAME,,}/${APP_NAME}_run_linux.sh
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Education;
Keywords=Chess;Java;Games;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Stellarium astronomy utility from PPA
sudo apt-add-repository -y ppa:stellarium/stellarium-releases
sudo apt-get update
sudo apt-get install -y stellarium

# Install EGroupware PHP-based groupware from package
APP_NAME=egroupware
APP_VERSION=
APP_EXT=
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
source /etc/lsb-release
wget -nv https://download.opensuse.org/repositories/server:eGroupWare/xUbuntu_${DISTRIB_RELEASE}/Release.key -O /tmp/Release.key
sudo apt-key add - < /tmp/Release.key
sudo apt-get update
sudo sh -c "echo 'deb http://download.opensuse.org/repositories/server:/eGroupWare/xUbuntu_"${DISTRIB_RELEASE}"/ /' > /etc/apt/sources.list.d/egroupware-epl.list"
sudo apt-get update
sudo apt-get install -y ${APP_NAME}-epl
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install clib package manager for C language from Github source
APP_NAME=clib
APP_VERSION=
APP_EXT=
sudo apt-get install -y libcurl4-gnutls-dev -qq
git clone https://github.com/clibs/${APP_NAME}.git /tmp/${APP_NAME}
cd /tmp/${APP_NAME}
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Newsboat command-line RSS reader (Newsbeuter replacement) from source
APP_NAME=Newsboat
APP_VERSION=2.24
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-r${APP_VERSION}
sudo apt-get install -y libcurl4-gnutls-dev libstfl-dev pkg-config libxml2-dev libjson-c-dev libjson[0-9]*-dev libkrb5-dev asciidoctor -qq
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/archive/r${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./config.sh && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Tiny Scan Java-based disk usage utility
APP_NAME=TinyScan
APP_VERSION=7.3
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Java-based disk usage utility
GenericName=${APP_NAME}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Disk;System;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Shufti simple PyQt image viewer from source
APP_NAME=shufti
APP_VERSION=2.3
APP_EXT=tar.gz
sudo apt install -y python-pyqt5 python-pyqt5.qtsql -qq
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/danboid/${APP_NAME}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
#cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Simple PyQt image viewer
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME}/${APP_NAME}.py
Icon=/opt/${APP_NAME}/${APP_NAME}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;Graphics;
Keywords=Graphics;Image;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME}/${APP_NAME}.py /usr/local/bin/${APP_NAME}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Monitorix system monitoring utility from Debian package
# https://www.monitorix.org/
APP_NAME=Monitorix
APP_VERSION=3.15.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-izzy1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://apt.izzysoft.de/ubuntu/dists/generic/index.php?file=${FILE_NAME}.${APP_EXT};dirnum=1
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Notes cross-platform Qt-based note-taking application from AppImage
# https://www.get-notes.com/
# https://github.com/nuttyartist/notes
APP_NAME=Notes
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Qt-based note-taking application."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;Productivity;"
APP_VERSION=2.2.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}_${APP_VERSION}-Qt5.15.2-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/notes/icon?1678301736
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Freemind Java-based mind mapping application
APP_NAME=freemind
APP_VERSION=1.1.0_Beta_2
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-bin-max-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=FreeMind
Comment=Java-based mind mapping application
GenericName=FreeMind
Exec=sh /opt/${APP_NAME,,}/${APP_NAME,,}.sh
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Graphics;Office;
Keywords=Mind;Mapping;Productivity;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Treeline Python/Qt-based tree-structured notepad from package
APP_NAME=TreeLine
APP_GUI_NAME="Python/Qt-based tree-structured notepad"
APP_VERSION=3.1.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y python3-pyqt5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo python3 /tmp/${FILE_NAME}/${APP_NAME}/install.py
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Micro terminal-based text editor from package
APP_NAME=Micro
APP_VERSION=2.0.14
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux32
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}
APP_EXT=tar.gz
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/zyedidia/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/${APP_NAME,,} /usr/local/bin
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/${APP_NAME,,}.1 /usr/local/man/man1
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Bishop Java-based chess application
APP_NAME=bishop
APP_VERSION=1_0_0
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}chess/${APP_NAME,,}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Bishop Chess
Comment=Java-based chess game
GenericName=Chess
Exec=sh /opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME,,}/graphics/icon/icon_48.png
Path=/opt/${APP_NAME,,}
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;
Keywords=Games;Chess;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME,,}.sh /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Smuxi IRC/Twitter/Jabbr/XMPP client from PPA
sudo add-apt-repository -y ppa:meebey/smuxi-stable
sudo apt-get update
sudo apt-get install -y smuxi

# Install Textadept minimalist cross-platform text editor from package
APP_NAME=Textadept
APP_GUI_NAME="Minimalist cross-platform text editor"
APP_VERSION=12.4
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}.linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/orbitalquark/${APP_NAME,,}/releases/download/textadept_${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=Editor
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/core/images/ta_32x32.png
Path=/opt/${APP_NAME,,}
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Accessories;System;Development;
Keywords=Editor;Text;Lua;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install TexStudio cross-platform Qt-based LaTeX editor from source
APP_NAME=TexStudio
APP_VERSION=4.8.7
APP_EXT=tar.gz
FILE_NAME=${APP_VERSION}
sudo apt-get install -y libpoppler-qt5-dev libqt5svg5-dev qttools5-dev libgs-dev qtscript5-dev texlive
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}*
mkdir -p build && cd build
qtchooser -run-tool=qmake -qt=5 ../${APP_NAME,,}.pro && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Diffuse file compare/merge utility
APP_NAME=diffuse
APP_VERSION=0.4.8
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}-1_all.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install myNetPCB Java-based PCB layout and schematic capture tool from package
APP_NAME=myNetPCB
APP_VERSION=8.7
APP_EXT=zip
FILE_NAME=${APP_NAME}_${APP_VERSION//./_}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/mynetpcb/icon?1621505490
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/bin/${APP_NAME}.sh
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Java-based PCB layout and schematic capture tool
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/bin/${APP_NAME}.sh
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Path=/opt/${APP_NAME,,}/bin;/opt/${APP_NAME,,}/lib
Type=Application
StartupNotify=true
Terminal=false
Categories=Science;Education;Electronics;
Keywords=PCB;Electronics;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Shotcut cross-platform non-linear video editor from package
APP_NAME=Shotcut
APP_GUI_NAME="Cross-platform non-linear video editor."
APP_GUI_CATEGORIES="Multimedia;Video;"
APP_GUI_KEYWORDS="Video;Editor;"
APP_VERSION=25.05.11
APP_EXT=txz
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-${APP_VERSION//./}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mltframework/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME} /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME}.app/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${APP_NAME}.app/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME}.app/share/icons/hicolor/64x64/apps/org.shotcut.Shotcut.png
Path=/opt/${APP_NAME,,}/${APP_NAME}.app
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Nightcode Clojure/Clojurescript IDE from package
APP_NAME=Nightcode
APP_VERSION=2.8.3
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/oakes/${APP_NAME}/releases/download/${APP_VERSION}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Dropbox online storage utility from Debian package
APP_NAME=dropbox
APP_VERSION=2022.12.05
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://linux.dropbox.com/packages/ubuntu/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install OovAide C++/Java IDE with UML support from package
APP_NAME=Oovaide
APP_VERSION=0.1.7
APP_EXT=deb
sudo apt-get install -y libclang1 libgtk-3-0
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}-Linux.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install PlantUML Java-based UML modeling tool from package
APP_NAME=PlantUML
APP_GUI_NAME="Java-based UML modeling tool"
APP_VERSION=1.2025.3
APP_EXT=jar
FILE_NAME=${APP_NAME,,}.${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=UML;Modeling;Programming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}


# Install Clevit "smart" text editor
APP_NAME=Clevit
APP_VERSION=1.3.4.1
APP_EXT=tar.gz
sudo apt-get install -y build-essential make cmake qtdeclarative5-dev qml-module-qtquick-controls qt5-default
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}%20v${APP_VERSION}.${APP_EXT}
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/TigaxMT-Clevit-d44c1d3
qmake && make && sudo make install
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /usr/share/icons/hicolor/scalable/apps/icon.png /usr/share/icons/hicolor/scalable/apps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment="Smart" text editor
GenericName=${APP_NAME}
Exec=/usr/bin/${APP_NAME}
Icon=/usr/share/icons/hicolor/scalable/apps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;Accessories;
Keywords=Editor;Text;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install OCS Store application installer from package
APP_NAME=ocsstore
APP_VERSION=2.2.1
APP_EXT=deb
sudo apt-get install -y libclang1 libgtk-3-0
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://dl.opendesktop.org/api/files/download/id/1506729421/${APP_NAME}_${APP_VERSION}-0ubuntu1_amd64.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install NixNote open source Evernote client from package
APP_NAME=nixnote
APP_VERSION=2.0.2
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/nevernote/${APP_NAME}2-${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Minbrowser minimalist web browser from Debian package
APP_NAME=min
APP_VERSION=1.28.0
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/minbrowser/${APP_NAME}/releases/download/v${APP_VERSION}/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install gFileFinder file search GUI utility from source
APP_NAME=gFileFinder
APP_VERSION=0.2
APP_EXT=tar.gz
sudo apt-get install -y libgtk-3-dev libxcb-ewmh-dev libxcb1-dev xcb-proto xcb-util-image xcb-util-wm xcb-util-xrm
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/gff${APP_VERSION}-src.${APP_EXT}
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/gff
make && sudo mv src/gff /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Polybar status bar from source
APP_NAME=polybar
APP_VERSION=3.0.5
APP_EXT=tar.gz
sudo apt-get install -y libcairo2-dev libx11-xcb-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/gff${APP_VERSION}-src.${APP_EXT}
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/gff
make && sudo mv src/gff /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install GLosung daily Bible verse tool from PPA
# http://www.godehardt.org/losung.html
sudo add-apt-repository -y ppa:godehardt/ppa
sudo apt-get update -y
sudo apt-get install -y glosung

# Install PHP Address Book web-based address book
# https://sourceforge.net/projects/php-addressbook/
APP_NAME=php-addressbook
APP_VERSION=9.0.0.1
APP_EXT=zip
DB_NAME=phpaddressbook
DB_USER=phpaddressbook
DB_PASSWORD=phpaddressbook
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/addressbookv${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
#cd /tmp/${APP_NAME,,}
#mv ${APP_NAME}-${APP_VERSION} ${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}/addressbook ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cd $HOME
rm -rf /tmp/${APP_NAME}*
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install Qutebrowser keyboard-focused minimalist web browser from package
APP_NAME=qutebrowser
APP_VERSION=1.0.4
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${APP_NAME}_${APP_VERSION}-1_all.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install LAME MP3 encoder from source
APP_NAME=lame
APP_VERSION=3.100
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Qodem terminal emulator from package
APP_NAME=qodem
APP_VERSION=1.0.0-1
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install dxirc Fox/Qt IRC client from source
APP_NAME=dxirc
APP_VERSION=1.40.1
APP_EXT=tar.gz
sudo apt-get install -y libfox-1.6-dev qt5-qmake libqt5multimedia5 qtmultimedia5-dev
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
mkdir build && cd build
cmake .. && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install ForeverNote open-source Evernote web client from package
APP_NAME=ForeverNote
APP_VERSION=1.3
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install OSMO organizer utility from source
APP_NAME=osmo
APP_VERSION=0.4.4
APP_EXT=tar.gz
sudo apt-get install -y libwebkitgtk-3.0-dev libxml2-dev
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}-pim/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install PDF Split and Merge (PDFsam) editor from Debian package
APP_NAME=PDFSam
APP_VERSION=5.3.1
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=all
	APP_VERSION=4.0.1
fi
FILE_NAME=${APP_NAME}_${APP_VERSION}-1_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Voya Media video, music, and picture player from Debian package
APP_NAME=VoyaMedia
APP_VERSION=3.1-500
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=noarch
	APP_VERSION=free-3.0-700
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install GeoServer cross-platform Java-based geospatial server from package
# http://docs.geoserver.org/latest/en/user/installation/linux.html
APP_NAME=GeoServer
APP_GUI_NAME="Cross-platform Java-based geospatial server."
APP_VERSION=2.27.1
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/* /opt/${APP_NAME,,}
sudo chown -R $USER /opt/${APP_NAME,,}
echo "export GEOSERVER_HOME=/opt/"${APP_NAME,,} >> $HOME/.profile
source $HOME/.profile
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/bin/startup.sh
xdg-open http://localhost:8080/geoserver
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${FILE_NAME}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Other;
Keywords=GIS;Maps;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install TeamPass PHP-based collaborative password manager
# https://github.com/nilsteampassnet/TeamPass
APP_NAME=TeamPass
APP_VERSION=3.0.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
sudo apt-get install -y php${PHP5_VERSION}-mcrypt php${PHP5_VERSION}-mbstring php${PHP5_VERSION}-iconv php${PHP5_VERSION}-xml php${PHP5_VERSION}-gd openssl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/nilsteampassnet/${APP_NAME}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir ${WWW_HOME}/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 0777 ${WWW_HOME}/${APP_NAME,,}/includes/config
sudo chmod -R 0777 ${WWW_HOME}/${APP_NAME,,}/includes/avatars
sudo chmod -R 0777 ${WWW_HOME}/${APP_NAME,,}/includes/libraries/csrfp/libs
sudo chmod -R 0777 ${WWW_HOME}/${APP_NAME,,}/includes/libraries/csrfp/log
sudo chmod -R 0777 ${WWW_HOME}/${APP_NAME,,}/includes/libraries/csrfp/js
sudo chmod -R 0777 ${WWW_HOME}/${APP_NAME,,}/backups
sudo chmod -R 0777 ${WWW_HOME}/${APP_NAME,,}/files
sudo chmod -R 0777 ${WWW_HOME}/${APP_NAME,,}/install
sudo chmod -R 0777 ${WWW_HOME}/${APP_NAME,,}/upload
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "grant all privileges on ${DB_NAME}.* to teampass_admin@'%' identified by 'PASSWORD';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cd $HOME
rm -rf /tmp/${APP_NAME}*
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install Pentobi Blokus-style board game from source
APP_NAME=pentobi
APP_VERSION=26.4
APP_EXT=tar.xz
sudo apt-get install -y g++ make cmake qttools5-dev qttools5-dev-tools libqt5svg5-dev
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}-${APP_VERSION}
cmake -DCMAKE_BUILD_TYPE=Release . && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install FeedTurtle Java-based RSS news aggregator client
APP_NAME=FeedTurtle
APP_GUI_NAME="Java-based RSS news aggregator client"
APP_VERSION=11
APP_EXT=zip
FILE_NAME=${APP_NAME}%20${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}${APP_VERSION}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}${APP_VERSION}.jar
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;
Keywords=RSS;News;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install cppcrypto multi-algorithm C++ crypto library including digest and cryptor utilities from source
APP_NAME=cppcrypto
APP_VERSION=0.17
APP_EXT=zip
sudo apt-get install -y g++ make yasm
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}-${APP_VERSION}-src.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}/${APP_NAME}
make && sudo make install
cd ../cryptor
make && sudo make install
cd ../digest
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Video Easy Editor minimal video editor from source
APP_NAME=video-easy-editor
APP_VERSION=195
APP_EXT=tar.gz
sudo apt-get install -y pkg-config libopencv-dev ffmpeg libpulse-dev libgtk2.0-dev
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/easy-editor-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
cd /tmp/${APP_NAME}
./build.sh && sudo cp easy-editor start-project video2yuv.sh yuv2mp4.sh /usr/local/bin && cp ctrlview.jpg $HOME
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install djvu2pdf tool to convert Djvu files to PDF files from package
# http://0x2a.at/s/projects/djvu2pdf
APP_NAME=djvu2pdf
APP_VERSION=0.9.2-1
APP_EXT=deb
sudo apt-get install -y djvulibre-bin ghostscript
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://0x2a.at/site/projects/${APP_NAME}/${APP_NAME}_${APP_VERSION}_all.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install CodeLite C, C++, PHP and Node.js IDE and wxCrafter from package
APP_NAME=wxcrafter
APP_VERSION=2.9-1unofficial
APP_EXT=deb
source /etc/lsb-release
if [ "${DISTRIB_CODENAME}" -eq "bionic" ]; then
	DISTRIB_CODENAME=artful;   # Use Artful Aardvark (17.10) files for 18.04.
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://repos.codelite.org/ubuntu/pool/universe/w/${APP_NAME}/${APP_NAME}_${APP_VERSION}.${DISTRIB_CODENAME}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

APP_NAME=codelite
APP_VERSION=12.0-1
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://repos.codelite.org/ubuntu/pool/universe/c/${APP_NAME}/${APP_NAME}_${APP_VERSION}unofficial.${DISTRIB_CODENAME}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Tuitter Electron-based, cross-platform minimalist Twitter client from package
APP_NAME=Tui
APP_GUI_NAME="Electron-based, cross-platform minimalist Twitter client."
APP_VERSION=0.4.17
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=ia32
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/rhysd/${APP_NAME}/releases/download/v${APP_VERSION}/${APP_NAME}-linux-${ARCH_TYPE}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME}-linux-${ARCH_TYPE} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/resources/app/resources/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;
Keywords=Twitter;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Komodo Edit full-featured editor supporting variety of programming languages from package
APP_NAME=Komodo-Edit
APP_GUI_NAME="Full-featured editor supporting variety of programming languages."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Editor;IDE"
APP_VERSION=12.0.1-18441
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://downloads.activestate.com/Komodo/releases/12.0.1/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo /tmp/${FILE_NAME}/install.sh /opt/${APP_NAME,,}
sudo ln -s /opt/${APP_NAME,,}/bin/komodo /usr/local/bin/komodo
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install CherryTree hierarchical notepad/text editor from AppImage
# https://www.giuspen.com/cherrytree/
APP_NAME=CherryTree
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, hierarchical note taking application, featuring rich text and syntax highlighting."
APP_GUI_CATEGORIES="Office;Accessories;System;"
APP_GUI_KEYWORDS="Notepad;"
APP_VERSION=1.1.4
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.giuspen.net/software/${FILE_NAME}.${APP_EXT}
/CherryTree-1.1.4-x86_64.AppImage
curl -o /tmp/${APP_NAME,,}.png -J -L https://www.giuspen.com/icons_softw/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Raccoon Java-based Google Play Store and APK downloader utility from package
APP_NAME=Raccoon
APP_VERSION=4.24.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -k -L http://${APP_NAME,,}.onyxbits.de/sites/${APP_NAME,,}.onyxbits.de/files/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar ${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Java-based Google Play Store and APK downloader utility
GenericName=${APP_NAME}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;
Keywords=Android;APK;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Mind Map Architect mind mapping tool from package
APP_NAME=mmarchitect
APP_VERSION=0.5.0
APP_EXT=deb
# Install libgee2 dependency from Ubuntu 14.04
curl -o /tmp/libgee2.deb -J -L http://mirrors.kernel.org/ubuntu/pool/main/libg/libgee/libgee2_0.6.8-1ubuntu1_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/libgee2.deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install SmallBASIC interpreter from package
APP_NAME=smallbasic
APP_VERSION=0.12.14
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Java Hex Editor Java-based hexadecimal editor
APP_NAME=JavaHexEditor
APP_VERSION=linux
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -k -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Java-based hexadecimal editor
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Programming;Development;
Keywords=Editor;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Kid3 cross-platform audio tag editor from package
APP_NAME=Kid3
APP_GUI_NAME="Cross-platform audio tag editor."
APP_VERSION=3.9.6
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -k -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}-qt
Icon=/opt/${APP_NAME,,}/icons/hicolor/48x48/apps/${APP_NAME,,}-qt.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Audio;Multimedia;
Keywords=MP3;Tag;Editor
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,}-cli /usr/local/bin/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,}-qt /usr/local/bin/${APP_NAME,,}-qt
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Open Limbas PHP database utility
APP_NAME=openlimbas
APP_VERSION=5.3.12
APP_EXT=tar.gz
DB_NAME=limbas
DB_USER=limbas
DB_PASSWORD=limbas
source /etc/lsb-release
sudo apt-get install -y unixodbc php${PHP5_VERSION}-odbc
curl -o /tmp/mysql-odbc-driver.tar.gz -J -L https://cdn.mysql.com//Downloads/Connector-ODBC/5.3/mysql-connector-odbc-5.3.9-linux-ubuntu16.04-x86-64bit.tar.gz
cd /tmp
dtrx -n /tmp/mysql-odbc-driver.tar.gz
cd /tmp/mysql-odbc-driver/mysql-connector-odbc-5.3.9-linux-ubuntu16.04-x86-64bit
sudo mv ./bin/myodbc-install /usr/local/bin
sudo mv ./lib/* /usr/lib/x86_64-linux-gnu/odbc/
cat > /tmp/odbcinst.ini << EOF
[MySQL]
Description = ODBC for MySQL
Driver = /usr/lib/x86_64-linux-gnu/odbc/libmyodbc5a.so
Setup = /usr/lib/x86_64-linux-gnu/odbc/libodbcmyS.so
FileUsage = 1
EOF
cat > /tmp/odbc.ini << EOF
[${APP_NAME}]
Description = MySQL Connection to OpenLimbas Database
Driver = MySQL
Database = ${DB_NAME}
Server = localhost
Port = 3306
User = ${DB_USER}
Password = ${DB_PASSWORD}
Socket = /var/run/mysqld/mysqld.sock
EOF
sudo mv -f /tmp/odbc* /etc
# Add link to MySQL daemon socket for use by ODBC
sudo ln -s /var/run/mysqld/mysqld.sock /tmp/mysql.sock
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/limbas/${APP_NAME}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME}.${APP_EXT}
sudo mv /tmp/${APP_NAME} ${WWW_HOME}/${APP_NAME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME}
sudo chmod -R a+w /var/www/html/${APP_NAME}/dependent
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/dependent/admin/install/index.php &

# Install Admidio web-based (PHP/MySQL) organizational management tool from package
APP_NAME=Admidio
APP_GUI_NAME="Web-based (PHP/MySQL) organizational management tool."
APP_VERSION=4.3.15
APP_EXT=zip
APP_GUI_CATEGORIES="Office;"
APP_GUI_KEYWORDS="Organization;Management;"
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n ${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 777 ${WWW_HOME}/${APP_NAME,,}/adm_my_files
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}'; GRANT USAGE ON *.* TO '${DB_USER}'@'%'; GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%'; FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php
Icon=${WWW_HOME}/${APP_NAME,,}/adm_program/system/logo/favicon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Shiba JavaScript/Electron Markdown editor with preview from package
APP_NAME=Shiba
APP_VERSION=1.2.1
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=ia32
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/rhysd/${APP_NAME}/releases/download/v${APP_VERSION}/${APP_NAME}-linux-${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME}-linux-${ARCH_TYPE} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=JavaScript/Electron Markdown editor with preview
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/resources/app/resources/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Editors;Office;Development;
Keywords=Markdown;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install WingIDE 101 Python editor/IDE from package
APP_NAME=WingIDE-101
APP_VERSION=6.0.8
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://wingware.com/pub/${APP_NAME,,}/${APP_VERSION}/${APP_NAME,,}-6_${APP_VERSION}-1_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Insomnia cross-platform REST client from AppImage
APP_NAME=Insomnia
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform REST client."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="REST;Web Services;"
APP_VERSION=11.1.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}.Core-${APP_VERSION}
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-api-client.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/insomnia-api-client/icon?2ac6e56897493e86da087290c4cec9719bdd9333d52622b3c351155e23128a63
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install XnViewMP image viewer/converter from package
APP_NAME=XnViewMP
APP_VERSION=0.88
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://download.xnview.com/${APP_NAME}-linux-${ARCH_TYPE}.deb
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install QupZilla Qt5-based minimalistic web browser from source
APP_NAME=QupZilla
APP_VERSION=2.2.5
APP_EXT=tar.xz
sudo apt-get install -y qt5-default qtwebengine5-dev qtwebengine5-dev-tools libqt5x11extras5-dev qttools5-dev-tools libxcb-util0-dev libssl-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -k -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
qmake && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Simple-Arc-Clock Qt5-based desktop clock from source
APP_NAME=Simple-Arc-Clock
APP_VERSION=1.2
APP_EXT=tar.gz
sudo apt-get install -y qt5-default qtwebengine5-dev qtwebengine5-dev-tools libqt5x11extras5-dev qttools5-dev-tools libxcb-util0-dev libssl-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -k -L https://github.com/phobi4n/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
qmake && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Shallot Python-based file manager from package
APP_NAME=shallot
APP_VERSION=1.2.3528
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://pseudopolis.eu/wiki/pino/projs/${APP_NAME}/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Meteo-Qt Qt5-based weather utility from source
APP_NAME=Meteo-Qt
APP_VERSION=0.9.7
APP_EXT=tar.gz
sudo apt-get install -y python3-pyqt5 python3-sip python3-lxml
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -k -L https://github.com/dglent/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
sudo python3 setup.py install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Electric Sheep screensaver from source
# https://blog.openbloc.fr/compiling-electric-sheep-on-ubuntu-linux-17-10/
APP_NAME=flam3
APP_VERSION=3.1.1
APP_EXT=tar.gz
sudo apt-get install -y libxml2-dev libjpeg8-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/scottdraves/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
./configure && make && sudo make install

APP_NAME=electricsheep
APP_VERSION=master
APP_EXT=tar.gz
sudo apt-get install -y subversion autoconf libtool libgtk2.0-dev libgl1-mesa-dev libavcodec-dev libavformat-dev libswscale-dev liblua5.1-0-dev libcurl4-openssl-dev libxml2-dev libjpeg8-dev libgtop2-dev libboost-dev libboost-filesystem-dev libboost-thread-dev libtinyxml-dev freeglut3-dev glee-dev libwxgtk3.0-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://codeload.github.com/scottdraves/${APP_NAME}/${APP_EXT}/${APP_VERSION}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}/client_generic
./autogen.sh && ./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Leiningen and Clojure from script
APP_NAME=lein
APP_VERSION=
APP_EXT=
curl -o /tmp/${APP_NAME,,} -J -L https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}

# Install Moka Video Convert ffmpeg front-end from package
APP_NAME=moka-vc
APP_VERSION=1.0.41-1_Fix
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/moka-video-converter_${APP_VERSION}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Encrypt cross-platform GUI/CLI encryption tool from Debian package
APP_NAME=Encrypt
APP_VERSION=2020.01
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-1_${KERNEL_TYPE}
sudo apt-get install -y libgcrypt20
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install MedleyText notepad/snippet manager built with Electron (AppImage)
APP_NAME=MedleyText
APP_VERSION=latest
APP_EXT=AppImage
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://s3.amazonaws.com/${APP_NAME,,}/releases/medley-latest.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Electron-based notepad/snippet manager
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;Accessories;System
Keywords=Notepad;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Sushi multi-panel web browser from package
APP_NAME=sushi-browser
APP_VERSION=0.19.6
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://sushib.me/dl/${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Rufas Slider puzzle game from source
APP_NAME=RufasSlider
APP_GUI_NAME="Klotsky-style slider puzzle game."
APP_VERSION=17aug24
APP_EXT=7z
FILE_NAME=rs${APP_VERSION}
sudo apt-get install -y qttools5-dev qttools5-dev-tools cmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/rslid
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv ./puzzles /opt/${APP_NAME,,}
sudo mv ./data /opt/${APP_NAME,,}
sudo mv ./include /opt/${APP_NAME,,}
sudo mv ./*.txt ./*.md /opt/${APP_NAME,,}
sudo mkdir -p /opt/${APP_NAME,,}/libs/gnu
sudo mv ./libs/gnu/* /opt/${APP_NAME,,}/libs/gnu
sudo mkdir -p /opt/${APP_NAME,,}/bin/gnu
sudo mv ./bin/gnu/* /opt/${APP_NAME,,}/bin/gnu
sudo mkdir -p /opt/${APP_NAME,,}/src
sudo mv *.cc *.cpp *.h *.hpp /opt/${APP_NAME,,}/src
sudo ldconfig /opt/${APP_NAME,,}/libs/gnu
sudo ln -s /opt/${APP_NAME,,}/bin/gnu/rufaslid /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME}/data/nexslider.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Puzzle;Slider;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install GEOrgET (GoogleEarth Organiser, Editor & Toolkit) map editing tool
APP_NAME=GEOrgET
APP_VERSION=1.5.0
APP_EXT=7z
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod a+x ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+r ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
# Populate data from scripts
mysql -h localhost -u ${DB_USER} -p${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/timezone_regions.sql
mysql -h localhost -u root -proot ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/timezones.sql  # Root permission required to create procedure.
mysql -h localhost -u ${DB_USER} -p${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/cities.sql
xdg-open http://localhost/${APP_NAME,,}/${APP_NAME,,}.php &

# Install Software Process Dashboard Java-based project management tool
APP_NAME=processdash
APP_VERSION=2-4
APP_EXT=jar
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/pdash-install-main-${APP_VERSION}.${APP_EXT}
sudo java -jar /tmp/${APP_NAME,,}.${APP_EXT} &
sudo cp /opt/*.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Buku Python/SQLite command-line web bookmark manager from package
APP_NAME=buku
APP_VERSION=3.7-1
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-bookmark-manager/${APP_NAME,,}_${APP_VERSION}_ubuntu16.04.${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install JSoko Java-based Sokoban puzzle game from Debian package
APP_NAME=JSoko
APP_VERSION=2.23
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}applet/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Crystal Facet UML modeling tool from package
APP_NAME=crystal-facet-uml
APP_VERSION=1.61.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}.x86_64
sudo apt-get install -y libgdk-pixbuf2.0-0 alien
curl -o /tmp/${FILE_NAME}.rpm -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.rpm
cd /tmp
sudo alien /tmp/${FILE_NAME}.rpm
sudo gdebi -n /tmp/${APP_NAME,,}*.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/crystal_facet*

# Install Java Fabled Lands role-playing game
APP_NAME=JaFL
APP_VERSION=106
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -k -L https://downloads.sourceforge.net/flapp/${APP_NAME}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv ${APP_NAME,,} /opt
sudo chmod a+w /opt/${APP_NAME,,}/user.ini
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar ./flands.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Java Fabled Lands
Comment=Java remake of 'Fabled Lands' RPG
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/flands.jar
Icon=/opt/${APP_NAME,,}/icon.jpg
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Games;RPG;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install JFileProcessor Java-based file manager
APP_NAME=JFileProcessor
APP_VERSION=1.5.10
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/stant/${APP_NAME,,}/releases/download/v${APP_VERSION}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
mv jFileProcessor ${APP_NAME,,}
sudo mv ${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar ./${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Java file manager
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
#Icon=/opt/${APP_NAME,,}/icon.jpg
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=File;Manager;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install QtPass GUI for pass, the standard Unix password manager from source
APP_NAME=QtPass
APP_VERSION=1.4.0
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -k -L https://github.com/IJHack/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
./release-linux
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Mooedit text editor from source
APP_NAME=medit
APP_VERSION=1.2.92-devel
APP_EXT=tar.bz2
sudo apt-get install -y libgtk2.0-dev libxml2-dev python2.7-dev python-gtk2-dev intltool
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/mooedit/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install pyCSVDB SQLite and CSV DB management tool from source
APP_NAME=pyCSVDB
APP_VERSION=1V75
APP_EXT=zip
sudo apt-get install -y python3-tk
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
python3 ./${APP_NAME}.pyw
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Python SQLite/CSV database management tool
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/${APP_NAME}.pyw
#Icon=/opt/${APP_NAME,,}/icon.jpg
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=SQLite;CSV;Database;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install gvSIG-CE Java-based mapping/GIS desktop tool
APP_NAME=gvSIG-CE
APP_VERSION=1.0.0.b1
APP_EXT=tar.bz2
sudo apt-get install -y python3-tk
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/gvsigce/${APP_NAME,,}-${APP_VERSION}-linux-64.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
mv ${APP_NAME,,}-${APP_VERSION}-linux-64 ${APP_NAME,,}
sudo mv ${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
./gvSIGCE.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Python SQLite/CSV database management tool
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/gvSIGCE.sh
Icon=/opt/${APP_NAME,,}/lib/ico-gvSIG.png
Type=Application
StartupNotify=true
Terminal=false
Categories=GIS;Mapping;
Keywords=GIS;Maps;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Nihil Dice Roller (NDR) dice-rolling utility for multiple RPG platforms
APP_NAME=ndr3
APP_VERSION=3.20.1
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
sudo apt-get install -y python3-tk
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/nihildiceroller/${APP_NAME,,}-linux${ARCH_TYPE}.${APP_VERSION}.bin.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
./${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Nihil Dice Roller
Comment=Dice-rolling program for multiple RPG platforms
GenericName=Dice Roller
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
#Icon=/opt/${APP_NAME,,}/lib/ico-gvSIG.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Dice;Games;RPG;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Shaarli PHP-based databaseless bookmark manager
APP_NAME=Shaarli
APP_VERSION=0.10.4
APP_EXT=tar.gz
sudo apt-get install -y qttools5-dev qttools5-dev-tools cmake
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://codeload.github.com/${APP_NAME,,}/${APP_NAME}/${APP_EXT}/v${APP_VERSION}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
mv ${APP_NAME}-${APP_VERSION} ${APP_NAME,,}
sudo mv ${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
cd ${WWW_HOME}/${APP_NAME,,}
sudo composer update
xdg-open http://localhost/${APP_NAME,,}/index.php &
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install KiCad electronic design automation suite from PPA
sudo add-apt-repository -y ppa:js-reynaud/kicad-4
sudo apt update
sudo apt install -y kicad

# Install View Your Mind (VYM) Qt mind-mapping tool from source
APP_NAME=vym
APP_VERSION=2.9.26
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential python3-tk qt5-qmake libqt5svg5-dev libqt5scripttools5 qtscript5-dev cmake qttools-dev libdbus-1-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/insilmaril/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 .. && make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Vym (View Your Mind)
Comment=Mind-mapping tool
GenericName=Vym
#Path=
Exec=/usr/bin/${APP_NAME,,}
Icon=/usr/share/${APP_NAME,,}/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Mind-mapping;Diagrams;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install GtkHash GUI tool for calculating file hashes/checksums from source
APP_NAME=GtkHash
APP_VERSION=1.4
APP_EXT=tar.xz
sudo apt-get install -y libgcrypt20-dev libb2-dev libssl-dev libcrypto++-dev libmbedtls-dev libmhash-dev nettle-dev intltool
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
./configure --enable-libcrypto --enable-linux-crypto --enable-mbedtls --enable-mhash --enable-nettle --with-gtk=2.0
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install GridSheet printable PDF graph paper generator from package
APP_NAME=gridsheet
APP_VERSION=0.2.0-1
APP_EXT=deb
sudo apt-get install -y libgcrypt20-dev libb2-dev libssl-dev libcrypto++-dev libmbedtls-dev libmhash-dev nettle-dev intltool
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}_all.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install ChessPDFBrowser Java-based tool to work with chess PDF books and PGNs from package
APP_NAME=ChessPDFBrowser
APP_GUI_NAME="Java-based tool to work with chess PDF books and PGNs."
APP_VERSION=1.26
APP_DATE=2024-01-29
APP_EXT=7z
FILE_NAME=${APP_DATE//-/}.${APP_NAME}.v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}1/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /opt/${APP_NAME,,}/_source/apps/chess/${APP_NAME}.v${APP_VERSION}/src/main/resources/com/frojasg1/${APP_NAME,,}/resources/icons/App.icon.png /usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}/_binary
PATH=/opt/${APP_NAME,,}/_binary:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/_binary/${APP_NAME}-v${APP_VERSION}-SNAPSHOT-all.jar
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}/_binary
Exec=java -jar /opt/${APP_NAME,,}/_binary/${APP_NAME}-v${APP_VERSION}-SNAPSHOT-all.jar
Icon=/usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Chess;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install JStock stock market tool for 28 countries
APP_NAME=JStock
APP_VERSION=1.0.7.30
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/yccheok/${APP_NAME,,}/releases/download/release_1-0-7-30/${APP_NAME,,}-${APP_VERSION}-bin.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp
sudo mv ${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar ./${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Stock market tool for 28 countries
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
#Icon=/opt/${APP_NAME,,}/lib/ico-gvSIG.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Finance;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Riot instant messenger/collaboration platform from package
APP_NAME=riot-web
APP_VERSION=0.15.7
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://riot.im/packages/debian/pool/main/r/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Angry IP Scanner from package
APP_NAME=ipscan
APP_VERSION=3.8.0
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install SimulIDE electronic circuit simulator
APP_NAME=SimulIDE
APP_VERSION=0.4.14-SR4
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=Lin64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=Lin32
fi
FILE_NAME=${APP_NAME}_${APP_VERSION}_${ARCH_TYPE}
sudo apt-get install -y libqt5serialport5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://mailfence.com/pub/docs/santigoro/web/${APP_NAME}_${APP_VERSION//-SR4/}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
PATH=/opt/${APP_NAME,,}/bin:/opt/${APP_NAME,,}/share:$PATH; export PATH
/opt/${APP_NAME,,}/bin/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Electronic circuit emulator
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}/bin
Exec=/opt/${APP_NAME,,}/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/share/icons/hicolor/256x256/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Science;Electronics;
Keywords=Electronics;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install GNU nano text editor from source
APP_NAME=nano
APP_GUI_NAME="Minimalist console text editor."
APP_VERSION=8.4
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://nano-editor.org/dist/v5/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME}
#Icon=/opt/${APP_NAME,,}/lib/ico-gvSIG.png
Type=Application
StartupNotify=true
Terminal=true
Categories=Programming;Development;Accessories;
Keywords=Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install nuBASIC IDE and compiler for BASIC from package
APP_NAME=nubasic
APP_VERSION=1.50.0
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Xiki shell enhancement
sudo apt-get install -y emacs
curl -L https://xiki.com/install_xsh -o ~/install_xsh; sudo bash ~/install_xsh

# Install Incremental Scenario Testing Tool (ISTT) web-based test scenario management tool
APP_NAME=istt
APP_VERSION=v1.1.1
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod a+x ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+r ${WWW_HOME}/${APP_NAME,,}
# Update default password in configuration file
UPDATE_STRING=s/Teleca01/${APP_NAME}/g
sudo sed -i ${UPDATE_STRING} ${WWW_HOME}/${APP_NAME,,}/include/defines.php
# Update time zone in configuration file
sudo sed -i 's@Europe/Berlin@Americas/Chicago@g' ${WWW_HOME}/${APP_NAME,,}/include/defines.php
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install HOFAT (Hash Of File And Text) Java-based hash calculator
APP_NAME=HOFAT
APP_VERSION=1.0.26_07-10-20
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Java-based file/text hash calculator
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
#Icon=/opt/${APP_NAME,,}/lib/ico-gvSIG.png
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Security;Hash;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Tabby (formerly Terminus) cross-platform JavaScript/Electron terminal from AppImage
APP_NAME=Tabby
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform JavaScript/Electron terminal."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Terminal;Shell;"
APP_VERSION=1.0.223
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-x64
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Eugeny/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Eugeny/${APP_NAME,,}/master/build/icons/128x128.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Parlatype GTK audio player for transcription from source
APP_NAME=Parlatype
APP_VERSION=4.1
APP_EXT=tar.gz
sudo apt-get install -y build-essential automake autoconf intltool libgirepository1.0-dev libgladeui-dev gtk-doc-tools yelp-tools libgtk-3-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/gkarsay/${APP_NAME,,}/releases/download/v${APP_VERSION}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
autoreconf && ./configure --prefix=/usr --disable-introspection && make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=GTK audio player for transcription
GenericName=${APP_NAME}
Path=/usr/bin
Exec=/usr/bin/${APP_NAME,,}
Icon=/usr/share/icons/hicolor/48x48/apps/com.github.gkarsay.parlatype.png
Type=Application
StartupNotify=true
Terminal=true
Categories=Audio;Multimedia;Other;
Keywords=Audio;Player;Multimedia;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install BashStyle-NG graphical tool for managing Bash and other shell tools from package
APP_NAME=BashStyle-NG
APP_VERSION=10.7.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1nano_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://apt.nanolx.org/pool/main/b/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install JEditor Java-based text editor from package
APP_NAME=jEditor
APP_VERSION=1.2.29
APP_EXT=zip
FILE_NAME=${APP_NAME}_GPL-bin-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
unzip /tmp/${FILE_NAME}.${APP_EXT} -d /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -cp jEditorGPL.jar org.jeditor.app.JAppEditor
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Java-based text editor
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -cp jEditorGPL.jar org.jeditor.app.JAppEditor
#Icon=/opt/${APP_NAME,,}/lib/ico-gvSIG.png
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;Programming;Development;
Keywords=Editor;Text;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install DataMelt Java-based scientific computation and visualization environment
# http://jwork.org/dmelt/
APP_NAME=dmelt
APP_VERSION=2.2
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv ${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
./${APP_NAME,,}.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Java-based scientific computation and visualization environment
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME,,}/Docs/jehep.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Science;Scientific;Development;Math;
Keywords=Math;Science;Visualization;Programming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Quickcal minimalist arithmetic and statistical calculator from package
APP_NAME=Quickcal
APP_VERSION=2.4-1
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}_all.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install XML Copy Editor validating XML editor from Debian package
APP_NAME=" XML Copy Editor"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_VERSION=1.3.1.0
APP_EXT=deb
FILE_NAME=${_APP_NAME//-/}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${_APP_NAME//-/}*

# Install qmmp Qt-based Multimedia Player from source
APP_NAME=qmmp
APP_VERSION=1.7.6
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y cmake build-essential qtbase5-dev qttools5-dev libqt5x11extras5-dev qtmultimedia5-dev libcdio-dev libsoxr-dev libpulse-dev libjack-dev libogg-dev libvorbis-dev libcurl4-openssl-dev libwavpack-dev libavformat-dev libmpeg3-dev libcddb2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-dev/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
cmake ./ -DCMAKE_INSTALL_PREFIX=/usr/local && make && sudo make install INSTALL_ROOT=/usr/local
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Dextrous Text Editor (DTE) console text editor from source
APP_NAME=DTE
APP_GUI_NAME="Console text editor"
APP_VERSION=1.11.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y make gcc libncurses5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/craigbarnes/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make -j8 && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=/opt/${APP_NAME,,}/lib/ico-gvSIG.png
Type=Application
StartupNotify=true
Terminal=true
Categories=System;Accessories;Programming;Development;
Keywords=Editor;Text;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Sqlectron Electron-based database manager for PostgreSQL, MySQL, and MS SQL Server from package
APP_NAME=Sqlectron
APP_VERSION=1.38.0
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}-gui/releases/download/v${APP_VERSION}/${APP_NAME,,}_${APP_VERSION}_amd64.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Modelio UML modeling tool from package
APP_NAME=Modelio
APP_VERSION=4.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-open-source_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}uml/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Dooble web browser from Debian package
APP_NAME=Dooble
APP_VERSION=2021.07.05
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/textbrowser/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install EncNotex encrypted notepad from package
APP_NAME=EncNotex
APP_VERSION=1.4.3.0
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://sites.google.com/site/${APP_NAME,,}/download/${APP_NAME,,}_${APP_VERSION}_amd64.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Thonny minimalist Python IDE/editor for beginners from package
APP_NAME=Thonny
APP_VERSION=4.1.7
APP_GUI_NAME="Minimalist Python IDE/editor for beginners."
APP_EXT=tar.gz
if [[ $(uname -m | grep '64') ]]; then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
sudo apt-get install -y python3 python3-pip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
/tmp/${FILE_NAME}/${APP_NAME,,}/install
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd ${HOME}/apps/${APP_NAME,,}/bin
PATH=${HOME}/apps/${APP_NAME,,}/bin:\$PATH; export PATH
${HOME}/apps/${APP_NAME,,}/bin/${APP_NAME,,}
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install cpu-stat command-line CPU usage statistics tool from source
# http://blog.davidecoppola.com/2016/12/released-cpu-stat-command-line-cpu-usage-statistics-for-linux/
APP_NAME=cpu-stat
APP_VERSION=0.01.02
APP_EXT=tar.gz
sudo apt-get install -y scons
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/vivaladav/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
scons mode=release
sudo scons mode=release install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Qt-based Torrent File Editor from source
APP_NAME=torrent-file-editor
APP_VERSION=0.3.14
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
mkdir - p build && cd build
cmake -DCMAKE_BUILD_TYPE=Release -DQT5_BUILD=ON .. && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install OGapp Qt-based notepad from source
APP_NAME=OGapp
APP_VERSION=N/A
APP_EXT=N/A
git clone https://git.code.sf.net/p/${APP_NAME,,}/code /tmp/${APP_NAME,,}
cd /tmp/${APP_NAME,,}
qmake && make && sudo make install
sudo ln -s /usr/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install MLTerm multi-language terminal emulator from source
APP_NAME=MLTerm
APP_VERSION=3.8.4
APP_EXT=tar.gz
sudo apt-get install -y libfribidi-dev libssh2-1-dev libvte-dev libgdk-pixbuf2.0-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
./configure && make && sudo make install
sudo cp ./doc/icon/mlterm_48x48.xpm /usr/local/share/icons/hicolor/48x48
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=Multi-language terminal emulator
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/hicolor/48x48/mlterm_48x48.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Terminal;Shell;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install util-linux general system utilites from source
APP_NAME=util-linux
APP_VERSION=2.35.1
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/karelzak/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
./autogen.sh && ./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Linux Process Explorer GUI process viewer/manager from package
APP_NAME=procexp
APP_VERSION=1.7.289
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}-0ubuntu1_all.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}.${APP_EXT}.1
sudo cp -R * /
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install MantisBT web-based bug tracking tool
APP_NAME=mantisbt
APP_VERSION=2.24.2
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
mv ${APP_NAME,,}-${APP_VERSION} ${APP_NAME,,}
sudo mv ${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/admin/install.php &

# Install VBox Raw Disk GUI Java-based VBox disk editing/resizing GUI
APP_NAME=vboxrawdiskgui
APP_GUI_NAME="VBox Raw Disk GUI"
APP_VERSION=v2.7
APP_EXT=jar
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/VBox%20Raw%20Disk%20GUI%20${APP_VERSION}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+r /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_GUI_NAME}
Comment=Java-based VBox disk editing/resizing GUI
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
#Icon=/opt/${APP_NAME,,}/Docs/jehep.png
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Utilities;
Keywords=Virtualization;Java;Disk;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install EJE (Everyone's Java Editor) minimalist Java IDE
APP_NAME=EJE
APP_GUI_NAME="EJE (Everyone's Java Editor)"
APP_VERSION=4.1
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME} /opt
sudo chmod a+x /opt/${APP_NAME}/${APP_NAME,,}.sh
sudo chmod -R a+w /opt/${APP_NAME}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME}
PATH=/opt/${APP_NAME}:$PATH; export PATH
sh /opt/${APP_NAME}/${APP_NAME,,}.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_GUI_NAME}
Comment=Minimalist editor/IDE for Java programming
GenericName=${APP_NAME}
Path=/opt/${APP_NAME}
Exec=sh /opt/${APP_NAME}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME}/resources/images/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Programming;Java;Editor;IDE;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Java YouTube Video Downloader (ytd2)
APP_NAME=ytd2
APP_GUI_NAME="Java YouTube Video Downloader (ytd2)"
APP_VERSION=V20170914
APP_EXT=jar
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/run_${APP_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}.${APP_EXT} /opt/${APP_NAME,,}
sudo chown -R root:root /opt/${APP_NAME,,}
sudo chmod -R a+r /opt/${APP_NAME}
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /opt/${APP_NAME}
PATH=/opt/${APP_NAME}:$PATH; export PATH
java -jar /opt/${APP_NAME}/${APP_NAME,,}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_GUI_NAME}
Comment=Java-based GUI YouTube Video Downloader
GenericName=${APP_NAME}
Path=/opt/${APP_NAME}
Exec=java -jar /opt/${APP_NAME}/${APP_NAME,,}.${APP_EXT}
#Icon=/opt/${APP_NAME}/resources/images/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Video;Internet;Multimedia;
Keywords=Video;Downloader;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Domination (Risk-style world conquest) Java-based game
APP_NAME=Domination
APP_GUI_NAME="Risk-style world conquest game built with Java"
APP_VERSION=1.3.3
APP_EXT=jar
FILE_NAME=${APP_NAME}_install_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo java -jar /tmp/${FILE_NAME}.${APP_EXT}
cat > /tmp/${APP_NAME,,} << EOF
# /bin/sh
cd /usr/local/${APP_NAME}
PATH=/usr/local/${APP_NAME}:$PATH; export PATH
/usr/local/${APP_NAME}/SwingGUI.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/${APP_NAME}
Exec=/usr/local/${APP_NAME}/SwingGUI.sh
Icon=/usr/local/${APP_NAME}/resources/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;
Keywords=Games;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Snd open-source sound editor from source
APP_NAME=Snd
APP_GUI_NAME="Popular open-source audio file editor"
APP_VERSION=25.4
APP_EXT=tar.gz
sudo apt-get install -y libasound2-dev wavpack
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
./configure && make && sudo make install
sudo cp /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}/pix/s.png /usr/local/share/snd
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/snd/s.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Audio;Multimedia;
Keywords=Audio;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install pgweb cross-platform client for PostgreSQL databases
APP_NAME=pgweb
APP_GUI_NAME="Cross-platform client for PostgreSQL databases"
APP_VERSION=0.16.2
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux_amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux_386
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${APP_NAME,,}_${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}_${ARCH_TYPE} &
xdg-open http://localhost:8081/ &
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=/usr/local/share/snd/s.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Database;PostgreSQL;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Fileaxy Java-based file de-duplication, organization, and bulk previewing tool
APP_NAME=Fileaxy
APP_GUI_NAME="Java-based file de-duplication, organization, and bulk previewing tool"
APP_VERSION=122
APP_EXT=jar
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
#Icon=/usr/local/${APP_NAME}/resources/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=File;Management;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install PDF Studio Viewer Java-based PDF viewer
APP_NAME=PDFStudioViewer
APP_GUI_NAME="PDF Studio Viewer"
APP_VERSION=v12_0_5
APP_EXT=sh
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/pdf-studio-viewer/${APP_NAME}_${APP_VERSION}_${ARCH_TYPE}.${APP_EXT}
sudo sh /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install ProjectLibre Java-based project management tool from Debian package
APP_NAME=ProjectLibre
APP_VERSION=1.9.8
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1
sudo apt-get install openjdk-11-jre
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}* /tmp/*${APP_NAME}*

# Install phpCollab web-based collaboration and project management tool
# http://www.phpcollab.com/
APP_NAME=phpCollab
APP_VERSION=v2.10.2
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
sudo mv ${APP_NAME,,} ${WWW_HOME}
sudo cp ${WWW_HOME}/${APP_NAME,,}/includes/settings_blank.php ${WWW_HOME}/${APP_NAME,,}/includes/settings.php
sudo chmod -R 777 ${WWW_HOME}/${APP_NAME,,}/includes/settings.php ${WWW_HOME}/${APP_NAME,,}/files ${WWW_HOME}/${APP_NAME,,}/logos_clients
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/installation/setup.php &

# Install PySolFC Python-based Solitaire card game from package
APP_NAME=PySolFC
APP_GUI_NAME="Python-based Solitaire card game"
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Solitaire;Cards;Games;"
APP_VERSION=3.0.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y python3-pip
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p $HOME/.local/bin/${APP_NAME,,}
cd $HOME/.local/bin/${APP_NAME,,}
cp -R /tmp/${FILE_NAME}/* $HOME/.local/bin/${APP_NAME,,}
python3 -m venv $HOME/.local/bin/${APP_NAME,,}/.venv
source $HOME/.local/bin/${APP_NAME,,}/.venv/bin/activate
python -m pip3 install random2 sgmllib3k
python3 $HOME/.local/bin/${APP_NAME,,}/setup.py install
# Install card sets
curl -o /tmp/${APP_NAME}-Cardsets-2.1PRE.tar.bz2 -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-Cardsets-2.1PRE.tar.bz2
cd /tmp
dtrx -n /tmp/${APP_NAME}-Cardsets-2.1PRE.tar.bz2
cd /tmp/${APP_NAME}-Cardsets-2.1PRE
sudo cp -R /tmp/${APP_NAME}-Cardsets-2.1PRE/* $HOME/.local/bin/${APP_NAME,,}/data
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd \$HOME/.local/bin/${APP_NAME,,}
. \$HOME/.local/bin/${APP_NAME,,}/.venv/bin/activate
python \$HOME/.local/bin/${APP_NAME,,}/pysol.py &
deactivate
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=$HOME/.local/bin/${APP_NAME,,}/data/pysol.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}*

# Install Workrave repetitive-strain injury (RSI) prevention/recovery tool from source.
APP_NAME=Workrave
APP_GUI_NAME="Utility to remind you to take breaks when working at keyboard."
APP_VERSION=1.10.1
APP_EXT=tar.gz
sudo apt-get install -y libx11-dev libxtst-dev pkg-config libsm-dev libice-dev libglib2.0-dev python-cheetah libgtk2.0-dev libglibmm-2.4-dev libgtkmm-2.4-dev libsigc++-2.0-dev intltool libxss-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
./configure --prefix=/usr/local && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}*

# Install Delta Hexadecimal Editor (Java-based) from package
APP_NAME=deltahex
APP_VERSION=0.1.3
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-editor_${APP_VERSION}_all.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Gambit Qt5 chess game from source
APP_NAME=Gambit
APP_GUI_NAME="Cross-platform Qt5 chess game."
APP_VERSION=1.0.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}-source
sudo apt-get install -y qt6-base-dev cmake make gcc g++
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}chess/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${FILE_NAME}
cd ./engine/gupta && make release
cmake . && make
sudo cp -R gambitchess ./data ./nls ./web ./doc ./artwork ./engine /opt/gambit
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}chess
cd $HOME
EOF
sudo cp /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}chess
Icon=/opt/${APP_NAME,,}/data/icons/gambit/gambit-48.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Chess;Games;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Xtreme Download Manager (XDM) download accelerator from package
APP_NAME=xdm
APP_VERSION=2018
APP_EXT=tar.xz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/xdman/${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo sh /tmp/${APP_NAME,,}/install.sh
# Remove built-in JRE and use system JRE instead.
sudo rm -rf /opt/xdman/jre
sudo mkdir -p /opt/xdman/jre/bin
sudo ln -s /usr/bin/java /opt/xdman/jre/bin/java
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install NGSpice electronic circuit simulation tool from source
APP_NAME=NGSpice
APP_GUI_NAME="Classic electronic circuit simulation tool."
APP_VERSION=44.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libx11-dev libxaw7-dev libreadline6-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p release && cd release
../configure --with-x --with-readline=yes --disable-debug && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}*

# Install QDVDAuthor Qt-based DVD authoring tool from Debian package
APP_NAME=qdvdauthor
APP_VERSION=2.3.1-13
APP_EXT=deb
source /etc/lsb-release
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/tkb/x${DISTRIB_ID}_${DISTRIB_RELEASE}/${KERNEL_TYPE}/${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install wxHexEditor hexadecimal editor from package
APP_NAME=wxHexEditor
APP_GUI_NAME="wxWidgets-based hexadecimal editor."
APP_VERSION=0.24
APP_EXT=tar.bz2
sudo apt-get install -y qtbase5-dev cmake make gcc g++
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-v${APP_VERSION}-Linux_x86_64.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
sudo mv ${APP_NAME} /opt
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME}
PATH=/opt/${APP_NAME}:$PATH; export PATH
/opt/${APP_NAME}/${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME}
Exec=/opt/${APP_NAME}/${APP_NAME}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;Programming;
Keywords=Editor;Hex Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install DrJava lightweight Java editor/IDE
APP_NAME=DrJava
APP_GUI_NAME="Lightweight Java editor/IDE."
APP_VERSION=beta-20160913-225446
APP_EXT=jar
# Check to ensure Java installed
if ! [ -x "$(command -v java)" ]; then
	echo 'Error. Java is not installed. ' >&2
	echo 'Installing Java...'
	sudo apt-get install -y openjdk-8-jre
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Java;Programming;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install JPDFViewer cross-platform Java-based PDF viewer/reader
APP_NAME=JPDFViewer
APP_GUI_NAME="Cross-platform Java-based PDF viewer/reader."
APP_VERSION=N/A
APP_EXT=jar
# Check to ensure Java installed
if ! [ -x "$(command -v java)" ]; then
	echo 'Error. Java is not installed. ' >&2
	echo 'Installing Java...'
	sudo apt-get install -y openjdk-8-jre
fi
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;System;
Keywords=PDF;Viewer;Reader;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install FinalCrypt Java-based file encryption utility from Debian package
APP_NAME=FinalCrypt
APP_VERSION=6.3.6
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_linux_x86_64_debian_based
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install SMPlayer Qt-based MPlayer front-end audio/video player with support for YouTube from source
APP_NAME=SMPlayer
APP_GUI_NAME="Cross-platform Qt-based audio/video player with support for YouTube."
APP_VERSION=18.5.0
APP_EXT=tar.bz2
sudo apt-get install -y qtbase5-dev qt5-qmake qt5-default qtscript5-dev qttools5-dev-tools qtbase5-private-dev libqt5webkit5-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install OutWiker tree-style notepad/personal wiki from package
APP_NAME=OutWiker
APP_GUI_NAME="Cross-platform tree-style notepad/personal wiki."
APP_VERSION=2.1.0.834
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
	APP_VERSION=2.1.0.832   # Last version with builds for x86.
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/Jenyay/${APP_NAME,,}/releases/download/unstable_${APP_VERSION}/${APP_NAME,,}-${APP_VERSION}_${ARCH_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Clevit Qt-based 'smart' text editor with built-in encryption from source
APP_NAME=Clevit
APP_GUI_NAME="Cross-platform Qt-based 'smart' text editor with built-in encryption."
APP_VERSION=1.4.0
APP_EXT=tar.gz
sudo apt-get install -y build-essential libssl-dev make cmake qtdeclarative5-dev qml-module-qtquick-controls qt5-default openssl
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/TigaxMT/${APP_NAME}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
qmake && make && sudo make install
sudo cp /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}/src/icons/icon.png /usr/share/icons/hicolor/scalable/apps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/bin
Exec=/usr/bin/${APP_NAME}
Icon=/usr/share/icons/hicolor/scalable/apps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Programming;Development;
Keywords=Text;Editor;Encryption;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s /usr/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Alpus cross-platform offline dictionary viewer from package
APP_NAME=Alpus
APP_GUI_NAME="Freeware cross-platform offline dictionary viewer."
APP_VERSION=7.6
APP_EXT=tgz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=-x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://ng-comp.com/${APP_NAME,,}/${APP_NAME}-linux${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME}/* /opt/${APP_NAME,,}
sudo mkdir -p /opt/${APP_NAME,,}/${APP_NAME}.Config
sudo chmod 777 /opt/${APP_NAME,,}/${APP_NAME}.Config
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}.sh
#Icon=/usr/share/icons/hicolor/scalable/apps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;Education;
Keywords=Dictionary;Reference;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install WackoWiki PHP-based lightweight wiki tool from package
APP_NAME=Wacko
APP_GUI_NAME="PHP-based lightweight wiki tool."
APP_GUI_CATEGORIES="Internet;Office;"
APP_GUI_KEYWORDS="Wiki;"
APP_VERSION=6.1.27
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}.${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}wiki/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,}wiki-${APP_VERSION}/${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+x ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+r ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci;"
mysql -u root -proot -Bse "CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "GRANT USAGE ON *.* TO '${DB_USER}'@'%'; GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/


# Install CuteCODE minimalist Tcl-based text editor
APP_NAME=CuteCODE
APP_GUI_NAME="Minimalist Tcl-based text editor."
APP_VERSION=N/A
APP_EXT=zip
sudo apt-get install -y tcl8.6 tk8.6 tclx8.4 tcllib tklib tkdnd expect tcl-tls  # Install required packages
curl -o /tmp/${APP_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME}.${APP_EXT}
sudo mv /tmp/${APP_NAME} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME}/src
PATH=/opt/${APP_NAME}/src:$PATH; export PATH
wish /opt/${APP_NAME}/src/${APP_NAME}.tcl
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME}/src
Exec=wish /opt/${APP_NAME}/src/${APP_NAME}.tcl
Icon=/opt/${APP_NAME}/Screenshots/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Programming;Development;
Keywords=Text;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install TeamSQL MySQL/PostgreSQL client from package
APP_NAME=TeamSQL
APP_GUI_NAME="Cross-platform MySQL/PostgreSQL client."
APP_VERSION=latest
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://teamsql.io/latest/linux
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install ProjectForge Java-based project management tool
APP_NAME=ProjectForge
APP_GUI_NAME="Cross-platform Java-based project management tool."
APP_VERSION=8.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-application-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/pforge/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
xdg-open http://localhost:8080
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Project;Management;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Sigil cross-platform ebook (EPUB) editor/creator from source
APP_NAME=Sigil
APP_GUI_NAME="Cross-platform ebook (EPUB) editor/creator."
APP_VERSION=2.5.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y build-essential cmake qtbase5-dev qttools5-dev qttools5-dev-tools qtwebengine5-dev libhunspell-dev libpcre3-dev libminizip-dev python3-dev python3-pip python3-lxml python3-six python3-css-parser python3-dulwich python3-tk python3-pyqt5 python3-pyqt5.qtwebengine python3-html5lib python3-regex python3-pillow python3-cssselect python3-chardet
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://fossies.org/linux/www/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/build-${APP_NAME} && cd /tmp/build-${APP_NAME}
cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release /tmp/${FILE_NAME} && make && sudo make install
cd ${HOME}
sudo rm -rf /tmp/*${APP_NAME}*

# Install SpaceFM file manager from PPA
APP_NAME=SpaceFM
APP_GUI_NAME="GTK canonical file manager for Linux."
APP_VERSION=
APP_EXT=deb
sudo apt-add-repository -y ppa:mati75/spacefm
sudo apt-get update -y
sudo apt-get install -y spacefm udevil

# Install TexStudio LaTeX GUI editor from PPA
APP_NAME=TexStudio
APP_GUI_NAME="LaTeX GUI Editor."
APP_VERSION=
APP_EXT=deb
sudo apt-add-repository -y ppa:sunderme/texstudio
sudo apt-get update -y
sudo apt-get install -y texstudio

# Install Falcon Electron-based cross-platform SQL client from package
APP_NAME=falcon-sql-client
APP_GUI_NAME="Electron-based cross-platform SQL client."
APP_VERSION=2.4.0
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/plotly/${APP_NAME,,}/releases/download/v${APP_VERSION}/${APP_NAME,,}_${APP_VERSION}_amd64.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Cutterff FFMpeg video cutting utility from package
APP_NAME=CutterFF
APP_GUI_NAME="FFMpeg video cutting utility."
APP_GUI_CATEGORIES="Multimedia;Video;"
APP_GUI_KEYWORDS="FFMpeg;Video;Editor;"
APP_VERSION=1.3.1
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-static-gtk3
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xjf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}/bin
PATH=/opt/${APP_NAME,,}/bin:$PATH; export PATH
/opt/${APP_NAME,,}/bin/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}/bin
Exec=/opt/${APP_NAME,,}/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Tea Ebook reader from package
APP_NAME=tea-ebook
APP_GUI_NAME="Cross-platform Ebook (PDF and EPUB) reader."
APP_VERSION=N/A
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux32
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://app.${APP_NAME,,}.com/download/${ARCH_TYPE}/${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install PhotoFlare cross-platform Qt-based image viewer/editor from package
APP_NAME=PhotoFlare
APP_GUI_NAME="Cross-platform Qt-based image viewer/editor."
APP_VERSION=1.5
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://launchpad.net/photofiltre-lx/trunk/v${APP_VERSION}/+download/${APP_NAME}_CE_${APP_VERSION}_amd64.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Glyphr Studio Electron-based font editor
APP_NAME=Glyphr-Studio
APP_GUI_NAME="Cross-platform Electron-based font editor."
APP_VERSION=0.4.1
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=ia32
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME}-Desktop/releases/download/v${APP_VERSION}/Glyphr.Studio-linux-${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
/opt/${APP_NAME,,}/"Glyphr Studio"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/"Glyphr Studio"
#Icon=/opt/${APP_NAME,,}/parts/FreeLatin.jpg
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;
Keywords=Font;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Scrabble3D crossword game from package
APP_NAME=Scrabble3D
APP_GUI_NAME="Cross-platform crossword game."
APP_VERSION=N/A
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/scrabble/${APP_NAME}-${ARCH_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install VICE (Versatile Commodore Emulator) cross-platform retro Commodore computer emulator collection from source
APP_NAME=VICE
APP_GUI_NAME="Cross-platform retro Commodore computer emulator collection."
APP_VERSION=3.5
APP_EXT=tar.gz
sudo apt-get install -y build-essential autoconf bison flex libreadline-dev libxaw7-dev libpng-dev xa65 texinfo libpulse-dev texi2html libpcap-dev dos2unix libgtk2.0-cil-dev libgtkglext1-dev libvte-dev libvte-dev libavcodec-dev libavformat-dev libswscale-dev libmp3lame-dev libmpg123-dev yasm ffmpeg libx264-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-emu/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
./autogen.sh && ./configure --enable-fullscreen --with-pulse --enable-ethernet --with-x --enable-gnomeui --enable-vte --enable-cpuhistory --with-resid --enable-external-ffmpeg && make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=x64
#Icon=/opt/${APP_NAME,,}/parts/FreeLatin.jpg
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Emulator;
Keywords=Commodore;Emulator;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Zeal Qt-based offline API documentation browser from source
APP_NAME=Zeal
APP_GUI_NAME="Cross-platform Qt-based offline API documentation browser."
APP_VERSION=0.6.1
APP_EXT=tar.gz
sudo apt-get install -y libarchive-dev libqt5webkit5-dev extra-cmake-modules libqt5x11extras5-dev libx11-xcb-dev libxcb-keysyms1-dev libsqlite3-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/zealdocs/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
mkdir -p build && cd build
cmake .. && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Dagri non-standard Tcl/Tk spreadsheet from source
APP_NAME=Dagri
APP_GUI_NAME="Non-standard Tcl/Tk spreadsheet."
APP_VERSION=1.5
APP_EXT=tar.gz
sudo apt-get install -y tcl8.6 tk8.6 tklib tkpng tk-tktray libtk-img tdom tcllib libsqlite3-tcl
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://www.jmos.net/download/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/stuff/icon/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=Spreadsheet;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Damn Cool Editor (DCE) Tcl/Tk plain text editor from source
APP_NAME=DCE
APP_GUI_NAME="Tcl/Tk plain text editor."
APP_VERSION=1.0
APP_EXT=tar.gz
sudo apt-get install -y tcl8.6 tk8.6 tklib tkpng tk-tktray libtk-img tdom tcllib libsqlite3-tcl
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://www.jmos.net/download/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/stuff/icon/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Code::Blocks open-source, cross-platform, WX-based, free C, C++ and Fortran IDE
APP_NAME=CodeBlocks
APP_GUI_NAME="Open-source, cross-platform, WX-based, free C, C++ and Fortran IDE."
APP_VERSION=25.03
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}_stable
# Code::Blocks requires at least version 1.62 of Boost C++ libraries
# TODO: Update to include check for version of Ubuntu before updating.
curl -o /tmp/libboost-dev.deb -J -L http://ubuntu.mirrors.tds.net/ubuntu/pool/main/b/boost1.62/libboost1.62-dev_1.62.0+dfsg-4_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/libboost-dev.deb
curl -o /tmp/libboost-system-dev.deb -J -L http://ubuntu.mirrors.tds.net/ubuntu/pool/main/b/boost1.62/libboost-system1.62.0_1.62.0+dfsg-4_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/libboost-system-dev.deb
curl -o /tmp/libhunspell.deb -J -L http://ubuntu.mirrors.tds.net/ubuntu/pool/main/h/hunspell/libhunspell-1.4-0_1.4.1-2build1_amd64.deb
sudo gdebi -n /tmp/libhunspell.deb
sudo apt-get install -y hunspell-en-us
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}_stable.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}-common_${APP_VERSION}_all.deb
sudo gdebi -n /tmp/${FILE_NAME}/lib${APP_NAME,,}0_${APP_VERSION}_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}-contrib-common_${APP_VERSION}_all.deb
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}-libwxcontrib0_${APP_VERSION}_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/${FILE_NAME}/libwxsmithlib0_${APP_VERSION}_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/${FILE_NAME}/wxsmith-dev_${APP_VERSION}_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/${FILE_NAME}/wxsmith-headers_${APP_VERSION}_all.deb
sudo gdebi -n /tmp/${FILE_NAME}/libwxsmithlib0-dev_${APP_VERSION}_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}-contrib_${APP_VERSION}_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}-contrib-common_${APP_VERSION}_all.deb
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}-dev_${APP_VERSION}_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}-headers_${APP_VERSION}_all.deb
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install news-indictor open-source Python desktop news notification tool from source
# Requires that NEWS_API_KEY environment variable be set to API key from https://newsapi.org/ (i.e., via $HOME/.profile).
APP_NAME=news-indicator
APP_GUI_NAME="Open-sourcePython desktop news notification tool."
APP_VERSION=master
APP_EXT=zip
sudo apt-get install -y python3-setuptools
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/0dysseas/${APP_NAME,,}/archive/${APP_VERSION}.zip
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
sudo python3 ./setup.py install

# Install hstr (a.k.a. 'hh') shell command history suggestion menu utility from PPA
sudo apt-add-repository -y ppa:ultradvorka/ppa
sudo apt-get update
sudo apt-get install -y hh
# Create 'hh' configuration file and call it from $HOME/.bashrc
cat >> $HOME/.config/hh_config << EOF
bind '"\e\C-r":"\C-ahh -- \C-j"'  # Bind 'hh' to <Ctrl>+<Alt>+R keyboard shortcut
export HH_CONFIG=hicolor   # Enable more colors for 'hh'
export HISTFILESIZE=10000
export HISTSIZE=${HISTFILESIZE}
export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"  # Sync .bash_history with in-memory history
shopt -s histappend   # Force in-memory history to be appended to (instead of overwritten) .bash_history
export HISTCONTROL=ignorespace   # Add leading space(s) to exclude/ignore command in history
EOF
echo 'source $HOME/.config/hh_config' >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration

# Install bin64ed Qt-based Base64 file encoder/decoder from source
APP_NAME=bin64ed
APP_GUI_NAME="Cross-platform Qt-based Base64 file encoder/decoder."
APP_VERSION=2.0.1
APP_EXT=tar.bz2
sudo apt-get install -y qt5-default qt5-qmake
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/base64-binary/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
qtchooser -run-tool=qmake -qt=5 && make
sudo cp /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin  # No 'install' target for make
sudo cp /tmp/${APP_NAME,,}/images/info_icon.png /usr/local/share/pixmaps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;System;
Keywords=Base64;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Legend of Edgar 2D platform adventure game from package
APP_NAME=edgar
APP_GUI_NAME="Cross-platform 2D platform adventure game."
APP_VERSION=1.28
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/riksweeney/${APP_NAME,,}/releases/download/${APP_VERSION}/${APP_NAME,,}-${APP_VERSION}-1.${ARCH_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Universal Media Server (UMS) from package
APP_NAME=UMS
APP_VERSION=7.0.0-rc2
APP_EXT=tgz
sudo apt-get install -y mediainfo openjdk-8-jre dcraw vlc
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/unimediaserver/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}
sudo mv ${APP_NAME,,}-${APP_VERSION} /opt/${APP_NAME,,}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME}.sh /usr/local/bin/${APP_NAME,,}
ln -s /opt/${APP_NAME,,}/${APP_NAME}.sh $HOME/.config/autostart
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}

# Install PacmaniaQt Qt-based, C++ classic Pacman game from source
APP_NAME=PacmaniaQt
APP_GUI_NAME="Cross-platform Qt-based, C++ classic Pacman game."
APP_VERSION=v.1.0.0
APP_EXT=zip
sudo apt-get install -y qt5-default qt5-qmake qtmultimedia5-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_Sources.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_Sources
qtchooser -run-tool=qmake -qt=5 && make
sudo cp /tmp/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_Sources/${APP_NAME,,} /usr/local/bin  # No 'install' target for make
sudo cp /tmp/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_Sources/resources/images/pac_map.png /usr/local/share/pixmaps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Pacman;Arcade;Games;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install CPod (formerly Cumulonimbus) Electron-based podcast player and organizer from package
APP_NAME=CPod
APP_GUI_NAME="Cross-platform Electron-based podcast player and organizer."
APP_VERSION=1.27.1
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/z-------------/cumulonimbus/releases/download/v${APP_VERSION}/${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Mozilla Rust programming language via installation shell script
# https://www.rust-lang.org/en-US/install.html
sudo apt-get install -y curl
curl -o /tmp/rustup-init.sh https://sh.rustup.rs -sSf
sh /tmp/rustup-init.sh -y
echo 'export PATH="$PATH:$HOME/.cargo/bin"' >> $HOME/.profile
source $HOME/.profile
cd $HOME
sudo rm -rf /tmp/rust*

# Install NorQualizer command-line audio normalizer/equalizer from source
APP_NAME=NorQualizer
APP_GUI_NAME="Cross-platform command-line audio normalizer/equalizer."
APP_VERSION=1.40
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION//./}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
gcc norqualizer.c -o norqualizer
chmod a+x norqualizall
sudo cp norqualizall norqualizer /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Basilisk Browser cross-platform XUL-based modern web browser from package
# https://www.basilisk-browser.org/
APP_NAME=Basilisk
APP_GUI_NAME="Cross-platform XUL-based modern web browser."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="Browser;Web;XUL;"
APP_VERSION=20250422154702
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-gtk3
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://dl.basilisk-browser.org/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/${APP_NAME,,}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/browser/icons/mozicon128.png
Type=Application
StartupNotify=true
Terminal=false
Category=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Pipette cross-platform screen color grabber from package
APP_NAME=Pipette
APP_GUI_NAME="Cross-platform screen color grabber."
APP_VERSION=N/A
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.zip -J -L https://www.sttmedia.com/downloads/PipetteDeb.zip
cd /tmp
dtrx /tmp/${APP_NAME,,}.zip
sudo gdebi -n /tmp/${APP_NAME,,}/${APP_NAME,,}*.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Searchmonkey GUI desktop search client from source
APP_NAME=Searchmonkey
APP_GUI_NAME="GUI desktop search client."
APP_VERSION=0.8.3
APP_EXT=tar.gz
sudo apt-get install -y autoconf automake
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
sh ./autogen.sh && make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/pixmaps/searchmonkey/searchmonkey-48x48.png
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Search;Find;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install QVGE (Qt Visual Graph Editor) Qt-based 2-D visual graph editor from source
APP_NAME=QVGE
APP_GUI_NAME="Cross-platform Qt-based 2-D visual graph editor."
APP_VERSION=0.6.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}%20${APP_VERSION}
sudo apt-get install -y qt5-qmake qt5-default libqt5x11extras5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/*${APP_NAME,,}*/src
qtchooser -run-tool=qmake -qt=5 -r && make && sudo make install
sudo mkdir -p /usr/local/share/pixmaps
sudo cp ./src/qvgeapp/Icons/AppIcon.png /usr/local/share/pixmaps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}app
Icon=/usr/local/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Education;Accessories;
Keywords=Graphics;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install OpenProj cross-platform Java-based enterprise project management application from package
APP_NAME=OpenProj
APP_GUI_NAME="Cross-platform Java-based enterprise project management application."
APP_VERSION=1.4-2
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Functional Calculator Java-based multipurpose calculator
APP_NAME=FunctionalCalculator
APP_GUI_NAME="Java-based multipurpose calculator."
APP_VERSION=1.3
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME}${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
#Icon=/usr/local/${APP_NAME}/resources/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Science;Accessories;System;
Keywords=Math;Calculator;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Flameshot Qt-based GUI/CLI screenshot capture tool from source
APP_NAME=Flameshot
APP_GUI_NAME="Qt-based GUI/CLI screenshot capture tool."
APP_VERSION=12.1.0
APP_EXT=tar.gz
sudo apt-get install -y qt5-qmake qtbase5-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/flameshot-org/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
qtchooser -run-tool=qmake -qt=5 && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Dibuja lightweight image editor similar to MS Paint from source
APP_NAME=Dibuja
APP_GUI_NAME="Lightweight image editor similar to MS Paint."
APP_VERSION=0.24.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y intltool libgtk2.0-dev libbabl-dev libgegl-dev libexiv2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/${APP_NAME,,}/trunk/${APP_VERSION}/+download/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure --with-gegl-0.4 --libdir=/usr/include && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Miller text processor which combines functions of awk, sed, cut, join, and sort for name-indexed data such as CSV, TSV, and tabular JSON from package
APP_NAME=miller
APP_GUI_NAME="Text processor which combines functions of awk, sed, cut, join, and sort for name-indexed data such as CSV, TSV, and tabular JSON."
APP_VERSION=6.13.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/johnkerl/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo cp /tmp/${FILE_NAME}/mlr /usr/local/bin
sudo ln -s -f /usr/local/bin/mlr /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Easy Beginner's Environment for Qt (qtebe) simplified Qt-based C++ development environment from source
APP_NAME=qtebe
APP_GUI_NAME="Simplified Qt-based C++ development environment."
APP_VERSION=N/A
APP_EXT=sh
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/install_ebe.sh
cd /tmp
sh /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /usr/local/share/icons
sudo cp /tmp/ebe/icons/48/ebe.png /usr/local/share/icons
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=ebe
Icon=/usr/local/share/icons/ebe.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;Education;Other;
Keywords=C++;IDE;Programming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Block Attack SDL Tetris clone from package
APP_NAME="Block Attack"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="SDL Tetris clone."
APP_VERSION=2.7.0
APP_EXT=tar.bz2
FILE_NAME=${_APP_NAME}-linux-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:$PATH; export PATH
/opt/${_APP_NAME}/${_APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/opt/${_APP_NAME}/${_APP_NAME}
Icon=/opt/${_APP_NAME}/icons/${_APP_NAME}128.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Puzzle;Arcade;Retro;
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install CrococryptFile Java-based file archiving and encryption utility
APP_NAME=CrococryptFile
APP_GUI_NAME="Java-based file archiving and encryption utility."
APP_VERSION=1.6
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
/opt/${APP_NAME,,}/croco
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/croco
#Icon=/usr/local/${APP_NAME}/resources/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Encrypt;Decrypt;Archive;Crypto;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install BiglyBT Java-based (Azureus) GUI BitTorrent client
APP_NAME=BiglyBT
APP_GUI_NAME="Java-based (Azureus) GUI BitTorrent client."
APP_VERSION=3.8.0.2
APP_EXT=sh
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/BiglySoftware/${APP_NAME}/releases/download/v${APP_VERSION}/GitHub_${APP_NAME}_Installer.${APP_EXT}
sudo sh /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Java-- minimalist Eclipse-based IDE for learning Java programming
APP_NAME=JavaMM
APP_GUI_NAME="Minimalist Eclipse-based IDE for learning Java programming."
APP_VERSION=1.15.0-v20220622-1751
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
	APP_VERSION=1.10.0-v20181001-1303
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-ide-${APP_VERSION}-linux.gtk.${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
/opt/${APP_NAME,,}/eclipse
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Java-- IDE (Eclipse)
Comment=${APP_GUI_NAME}
GenericName=Java-- IDE (Eclipse)
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/eclipse
Icon=/opt/${APP_NAME,,}/icon.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;Education;
Keywords=Java;Eclipse;IDE;Programming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install FeedReader RSS news reader/aggregator from package
APP_NAME=FeedReader
APP_GUI_NAME="RSS news reader/aggregator."
APP_VERSION=1.6.2~ubuntu0.4.1
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://launchpad.net/~eviltwin1/+archive/ubuntu/${APP_NAME,,}-stable/+files/${APP_NAME,,}_${APP_VERSION}_${ARCH_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install DB Tarzan Java-based database client from Debian package
APP_NAME=DBTarzan
APP_GUI_NAME="Java-based database client."
APP_VERSION=1.34
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Koxinga Python-based board game similar to Jamaica
APP_NAME=Koxinga
APP_GUI_NAME="Python-based board game similar to Jamaica."
APP_VERSION=032
APP_EXT=tar.gz
sudo pip3 install pygame
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py
Icon=/opt/${APP_NAME,,}/Images/back4.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Board;Game;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Crossword Express Java-based crossword/logic puzzle builder
APP_NAME=CrosswordExpress
APP_GUI_NAME="Java-based crossword/logic puzzle builder."
APP_VERSION=N/A
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://www.crauswords.com/program/${APP_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar /opt/${APP_NAME,,}/Crossword-Express.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/Crossword-Express.jar
Icon=/opt/${APP_NAME,,}/graphics/crossword.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;Education;
Keywords=Word;Logic;Puzzle;Crossword;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Nathansoftware ConnectFour Java-based puzzle game
APP_NAME=ConnectFour
APP_GUI_NAME="ConnectFour Java-based puzzle game."
APP_VERSION=1.1.0
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/nathansoftware-games/${APP_NAME}-${APP_VERSION}-JAR.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
#Icon=/opt/${APP_NAME,,}/graphics/crossword.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;Education;
Keywords=Logic;Puzzle;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Galaxy Forces V2 2D multiplayer (and single-player versus AI) space shooter game
APP_NAME=GalaxyV2
APP_GUI_NAME="2D multiplayer (and single-player versus AI) space shooter game."
APP_VERSION=2.00
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}_linux_bin.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}_linux_bin/* /opt/${APP_NAME,,}
sudo ln -s /opt/${APP_NAME,,}/${ARCH_TYPE}/libportaudio.so /opt/${APP_NAME,,}/${ARCH_TYPE}/libportaudio.so.2
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}/${ARCH_TYPE}
PATH=/opt/${APP_NAME,,}/${ARCH_TYPE}:$PATH; export PATH
/opt/${APP_NAME,,}/${ARCH_TYPE}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}/${ARCH_TYPE}
Exec=/opt/${APP_NAME,,}/${ARCH_TYPE}/${APP_NAME,,}
#Icon=/opt/${APP_NAME,,}/graphics/crossword.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;Education;
Keywords=Arcade;Retro;2D;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Git Town shell-based Git workflow enhancement tool from package
APP_NAME=Git-Town
APP_VERSION=19.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_intel_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}

# Install SMath Studio WYSIWYG math editor
APP_NAME=SMathStudio
APP_GUI_NAME="WYSIWYG math editor."
APP_VERSION=0.99.6839
APP_EXT=tar.gz
sudo apt-get install -y mono-runtime libmono-system-windows-forms4.0-cil
curl -o /tmp/${APP_NAME,,}.${APP_EXT} --referer https://en.smath.info/view/SMathStudio/summary -J -L https://smath.info/file/v4yoT/${APP_NAME}Desktop.${APP_VERSION//./_}.Mono.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}/${ARCH_TYPE}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}_Desktop.exe
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}_Desktop.exe
#Icon=/opt/${APP_NAME,,}/graphics/crossword.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Math;Science;Education;
Keywords=Calculator;Math;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Qt-TaskManager Qt-based to do list/time management tool from source
APP_NAME=Qt-TaskManager
APP_GUI_NAME="Qt-based to do list/time management tool."
APP_VERSION=N/A
APP_EXT=N/A
sudo apt-get install -y qt5-default
cd /tmp
git clone https://git.code.sf.net/p/${APP_NAME,,}/code ${APP_NAME,,}
cd /tmp/${APP_NAME,,}
qtchooser -run-tool=qmake -qt=5 && make && sudo make install
sudo cp /tmp/${APP_NAME,,}/Icons/calendar.png /usr/share/pixmaps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/bin
Exec=/usr/bin/${APP_NAME,,}
Icon=/usr/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=ToDo;Time;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install pcalc command-line programmer's calculator with support for HEX/DEC/OCT/BIN math from source
APP_NAME=pcalc
APP_GUI_NAME="Command-line programmer's calculator with support for HEX/DEC/OCT/BIN math."
APP_VERSION=4
APP_EXT=tar.gz
sudo apt-get install -y flex bison
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/vapier/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install bed cross-platform binary/hex data editor from package
APP_NAME=bed
APP_GUI_NAME="Cross-platform binary/hex data editor."
APP_VERSION=3.0.0
APP_EXT=deb
source /etc/lsb-release
# If our version of Ubuntu is *before* 17.04 (Zesty Zapus),
# then we need to install a couple of dependency packages.
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(ze|ar|bi)$ ]]; then
	curl -o /tmp/libhyperscan4.deb -J -L http://ubuntu.mirrors.tds.net/ubuntu/pool/universe/h/hyperscan/libhyperscan4_4.6.0-1_${KERNEL_TYPE}.deb
	sudo gdebi -n /tmp/libhyperscan4.deb
	curl -o /tmp/libre2-3.deb -J -L http://ubuntu.mirrors.tds.net/ubuntu/pool/universe/r/re2/libre2-3_20170101+dfsg-1_amd64.deb
	sudo gdebi -n /tmp/libre2-3.deb
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/binaryeditor/${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install QDirStat Qt-based GUI for viewing directory statistics from source
APP_NAME=QDirStat
APP_GUI_NAME="Qt-based GUI for viewing directory statistics."
APP_VERSION=1.9
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/shundhammer/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
qtchooser -run-tool=qmake -qt=5 && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install usql cross-platform command-line SQL client in Go
APP_NAME=usql
APP_GUI_NAME="Cross-platform command-line SQL client in Go."
APP_VERSION=0.19.24
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/xo/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install IDLE SDL-based minimal Apple Lisa emulator from source
APP_NAME=IDLE
APP_GUI_NAME="SDL-based minimal Apple Lisa emulator."
APP_VERSION=N/A
APP_EXT=N/A
sudo apt-get install -y libsdl-dev git-svn
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/shundhammer/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
git svn clone https://svn.code.sf.net/p/idle-lisa-emu/code/ ${APP_NAME,,}
cd /tmp/${APP_NAME,,}
cp Makefile.unixsdl Makefile
make
sudo cp /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}/lisa.ico /usr/share/icons/lisa_idle.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/icons/lisa_idle.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Emulation;Games;Programming;
Keywords=Retro;Lisa;Mac;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install CToy interactive C coding environment (REPL) from package
APP_NAME=CToy
APP_GUI_NAME="Interactive C coding environment (REPL) from package."
APP_VERSION=1.01
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://anael.maratis3d.com/${APP_NAME,,}/bin/${APP_NAME}-${APP_VERSION}-LINUX-x86_64.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}-LINUX-x86_64/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}/${ARCH_TYPE}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/data/hello_world.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=REPL;C;Programming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install CalcuDoku Qt-based KenKen puzzle game from source
APP_NAME=CalcuDoku
APP_GUI_NAME="Qt-based KenKen puzzle game."
APP_VERSION=N/A
APP_EXT=N/A
sudo apt-get install -y git-svn
cd /tmp
git svn clone https://svn.code.sf.net/p/${APP_NAME,,}/code/ ${APP_NAME,,}
cd /tmp/${APP_NAME,,}
# Need to insert "QT" module directive into Qt configuration file
sed -i~ '1iQT += core gui widgets printsupport' /tmp/${APP_NAME,,}/${APP_NAME,,}.pro
qtchooser -run-tool=qmake -qt=5 && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install NotePuppy Qt-based minimalist text editor from source
APP_NAME=NotePuppy
APP_GUI_NAME="Qt-based minimalist text editor."
APP_VERSION=N/A
APP_EXT=N/A
sudo apt-get install -y git-svn
cd /tmp
git svn clone https://svn.code.sf.net/p/${APP_NAME,,}/code/ ${APP_NAME,,}
cd /tmp/${APP_NAME,,}
qtchooser -run-tool=qmake -qt=5 && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install WebTorrent Desktop cross-platform Electron-based torrent streaming client from package
APP_NAME=WebTorrent-Desktop
APP_GUI_NAME="Cross-platform Electron-based torrent streaming client."
APP_VERSION=0.24.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Amp Rust-based command-line text editor from source
APP_NAME=Amp
APP_GUI_NAME="Cross-platform Rust-based command-line text editor."
APP_VERSION=0.7.1
APP_EXT=N/A
sudo apt-get install -y zlib1g-dev openssl libxcb1-dev cmake pkg-config libssl-dev
curl https://sh.rustup.rs -sSf | sh
cargo install --git https://github.com/jmacdonald/${APP_NAME,,}/ --tag ${APP_VERSION}

# Install Fractalscope Qt-based fractal explorer from source
APP_NAME=Fractalscope
APP_GUI_NAME="Cross-platform Qt-based fractal explorer."
APP_VERSION=1.6.3
APP_EXT=tar.gz
sudo apt-get install -y qt5-default yasm
# Install MPIR (Multiple Precision Integers and Rationals) LGPL C library
curl -o /tmp/mpir.tar.bz2 -J -L http://mpir.org/mpir-3.0.0.tar.bz2
cd /tmp && dtrx -n /tmp/mpir.tar.bz2 && cd /tmp/mpir/mpir-3.0.0
./configure --enable-gmpcompat && make && sudo make install
# Install GNU MPFR (multiple-precision floating-point computations with correct rounding) C Library
curl -o /tmp/mpfr.tar.xz -J -L http://www.mpfr.org/mpfr-current/mpfr-4.0.0.tar.xz
cd /tmp && dtrx -n /tmp/mpfr.tar.xz && cd /tmp/mpfr/mpfr-4.0.0
./configure --with-gmp-include=/usr/local/include --with-gmp-lib=/usr/local/lib && make && make check && sudo make install
# Install MPFR C++ library
curl -o /tmp/mpfrc++.zip -J -L http://www.holoborodko.com/pavel/wp-content/plugins/download-monitor/download.php?id=4
cd /tmp && dtrx -n /tmp/mpfrc++.zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}-source.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}-source/${APP_NAME}
cp /tmp/mpfrc++/mpreal.h /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}-source/${APP_NAME}/gmp
qtchooser -run-tool=qmake -qt=5 CONFIG+=release Fractalscope.pro && make
sudo cp ./Fractalscope /usr/local/bin
sudo cp ./resources/icons/48x48/application.png /usr/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME}
Icon=/usr/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Science;
Keywords=Math;Visualization;Fractals;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install QFutureBuilder Qt-based goal-tracking tool from package
APP_NAME=QFutureBuilder
APP_GUI_NAME="Cross-platform Qt-based goal-tracking tool."
APP_VERSION=N/A
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/futurbuilder/linux_deb.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}/linux_deb/${APP_NAME,,}*.deb
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Pioneer space adventure game from package
APP_NAME=Pioneer
APP_GUI_NAME="Cross-platform space adventure game."
APP_VERSION=20220203
APP_EXT=tar.bz2
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux32
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/pioneerspacesim/${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/data/icons/logo.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Adventure;Space;Games;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install mgrep multi-line grep utility
APP_NAME=mgrep
APP_VERSION=1.1.2
APP_EXT=tar.gz
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/multiline-grep/${APP_NAME,,}-${APP_VERSION}-static.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv ${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Impressive PDF slide show presenter from source
APP_NAME=Impressive
APP_GUI_NAME="PDF slide show presenter."
APP_VERSION=0.12.1
APP_EXT=tar.gz
sudo apt-get install -y python-pygame python-imaging pdftk mupdf-tools xdg-utils mplayer ffmpeg
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python /opt/${APP_NAME,,}/${APP_NAME,,}.py \$1
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python /opt/${APP_NAME,,}/${APP_NAME,,}.py \$1
#Icon=/opt/${APP_NAME,,}/data/icons/logo.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;
Keywords=PDF;Presentation;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Open-Numismat cross-platform PyQt-based coin-collection management tool from package
APP_NAME=Open-Numismat
APP_GUI_NAME="Cross-platform PyQt-based coin-collection management tool."
APP_VERSION=1.4.9
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}_all.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install UNA social-media community management web-based tool (PHP/MySQL)
APP_NAME=UNA
APP_VERSION=13.1.0
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/una-io/${APP_NAME}-v.${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME}-v.${APP_VERSION}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 777 ${WWW_HOME}/${APP_NAME,,}/storage ${WWW_HOME}/${APP_NAME,,}/tmp ${WWW_HOME}/${APP_NAME,,}/logs ${WWW_HOME}/${APP_NAME,,}/cache ${WWW_HOME}/${APP_NAME,,}/cache_public ${WWW_HOME}/${APP_NAME,,}/plugins_public ${WWW_HOME}/${APP_NAME,,}/inc
sudo chmod a+x ${WWW_HOME}/${APP_NAME,,}/plugins/ffmpeg/ffmpeg.exe
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/install &

# Install VeroRoute Qt-based PCB layout and routing tool from package
APP_NAME=VeroRoute
APP_GUI_NAME="Qt-based PCB layout and routing tool."
APP_VERSION=2.39
APP_EXT=zip
FILE_NAME=${APP_NAME}_V${APP_VERSION//./}_LinuxMint203_64bit
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Science;Other;
Keywords=Electronics;PCB;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install TupiTube cross-platform 2D animation tool for amateur artists from package
APP_NAME=TupiTube
APP_GUI_NAME="Cross-platform 2D animation tool for amateur artists."
APP_VERSION=0.2.11
APP_EXT=sh
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/tupi2d/${APP_NAME,,}_${APP_VERSION}_linux_${ARCH_TYPE}.${APP_EXT}
cd /tmp
sudo sh /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}_${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}.desk \$1
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.desk
Icon=/opt/${APP_NAME,,}/share/pixmaps/${APP_NAME,,}.desk.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Graphics;Other;
Keywords=Graphics;Animation;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install TraySearch Java-based cross-platform quick search utility
APP_NAME=TraySearch
APP_GUI_NAME="Java-based cross-platform quick search utility."
APP_VERSION=5.4.1
APP_EXT=jar
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
#Icon=/opt/${APP_NAME,,}/graphics/crossword.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Search;Productivity;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Abricotine cross-platform Electron-based Markdown editor with inline preview from package
APP_NAME=Abricotine
APP_GUI_NAME="Cross-platform Electron-based Markdown editor with inline preview."
APP_VERSION=0.6.0
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=ia32
fi
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/brrd/${APP_NAME}/releases/download/${APP_VERSION}/${APP_NAME}-${APP_VERSION}-ubuntu-debian-${ARCH_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install INSTEAD Interactive Fiction interpreter/player from source
APP_NAME=INSTEAD
APP_GUI_NAME="Interactive Fiction interpreter/player."
APP_VERSION=3.5.2
APP_EXT=tar.gz
sudo apt-get install -y liblua5.1-dev libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev libsdl2-mixer-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
export PREFIX=/usr/local && ./configure.sh && make && sudo make install
sudo rm -rf /usr/local/share/applications/instead.desktop
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/sdl-instead
Icon=/usr/local/share/pixmaps/sdl_instead.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Games;Adventure;Text;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install PyPref Python-based Russian card game Preferans
APP_NAME=PyPref
APP_GUI_NAME="Python-based Russian card game Preferans."
APP_VERSION=2.34
APP_EXT=zip
sudo apt-get install -y python-tk
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/python-pref/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python2 /opt/${APP_NAME,,}/${APP_NAME,,}.pyw
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python2 /opt/${APP_NAME,,}/${APP_NAME,,}.pyw
Icon=/opt/${APP_NAME,,}/big/back.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Games;Cards;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install phpSysInfo web-based Linux system information utility
APP_NAME=phpSysInfo
APP_VERSION=3.4.4
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}/* ${WWW_HOME}/${APP_NAME,,}
sudo cp ${WWW_HOME}/${APP_NAME,,}/phpsysinfo.ini.new ${WWW_HOME}/${APP_NAME,,}/phpsysinfo.ini
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod a+x ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+r ${WWW_HOME}/${APP_NAME,,}
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install PICSimLab wxWidgets-based real-time PIC and Arduino microcontroller simulator laboratory from AppImage
APP_NAME=PICSimLab
APP_GUI_NAME="Cross-platform real-time PIC and Arduino microcontroller simulator laboratory."
APP_GUI_CATEGORIES="Electronics;Engineering;"
APP_GUI_KEYWORDS="PIC;Arduino;Microcontroller;Simulation;"
APP_VERSION=0.9.1_231210
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/picsim/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/picsim/icon?1690651145
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install x-whnb self-contained web-based hierarchical notebook (similar to Cherrytree)
APP_NAME=x-whnb
APP_GUI_NAME="Self-contained web-based hierarchical notebook (similar to Cherrytree)."
APP_VERSION=v0.5.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}.${APP_VERSION//./}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=${WWW_HOME}
Exec=xdg-open http://localhost/${APP_NAME,,}/${APP_NAME,,}.html
#Icon=/opt/${APP_NAME,,}/big/back.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Internet;
Keywords=Productivity;Notepad;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}/${APP_NAME,,}.html &

# Install Text Trix Java-based minimalist text editor with HTML and RTF support from package
APP_NAME=TextTrix
APP_GUI_NAME="Java-based cross-platform minimalist text editor with HTML and RTF support."
APP_VERSION=1.2.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/yoda-vid/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
Icon=/opt/${APP_NAME,,}/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Programming;Development;
Keywords=Editor;Text;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install JSound Java-based audio player and editor
APP_NAME=JSound
APP_GUI_NAME="Java-based audio player and editor."
APP_VERSION=4.0
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/jortegasound/${APP_NAME,,}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}/bin
PATH=/opt/${APP_NAME,,}/bin:\$PATH; export PATH
/opt/${APP_NAME,,}/bin/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}/bin
Exec=/opt/${APP_NAME,,}/bin/${APP_NAME,,}
#Icon=/opt/${APP_NAME,,}/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Multimedia;Audio;
Keywords=Audio;Player;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install PeaZip cross-platform archive management utility from Debian package
APP_NAME=PeaZip
APP_GUI_NAME="Cross-platform archive management utility."
APP_VERSION=10.4.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}.LINUX.GTK2-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install viewPDF Qt-based PDF viewer/editor
APP_NAME=viewPdf
APP_GUI_NAME="Qt-based PDF viewer/editor."
APP_VERSION=0.2.2
APP_EXT=N/A
sudo apt-get install -y libpoppler-qt5-1
curl -o /tmp/${APP_NAME,,} -J -L https://sourceforge.net/projects/${APP_NAME,,}/files/${APP_NAME}${APP_VERSION}/download
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=/opt/${APP_NAME,,}/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;
Keywords=PDF;Viewer;Reader;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install QFlashCards Qt-based flash card editor/viewer
APP_NAME=QFlashCards
APP_GUI_NAME="Qt-based flash card editor/viewer."
APP_VERSION=1.4
APP_EXT=N/A
curl -o /tmp/${APP_NAME,,} -J -L https://sourceforge.net/projects/${APP_NAME,,}/files/v${APP_VERSION}/${APP_NAME}/download
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=/opt/${APP_NAME,,}/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Education;
Keywords=Flashcards;Viewer;Reader;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Flare SDL-based 2-D adventure RPG from source
APP_NAME=Flare
APP_GUI_NAME="SDL-based 2-D adventure RPG."
APP_VERSION=1.14
APP_EXT=tar.gz
sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev cmake
curl -o /tmp/${APP_NAME,,}-engine.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-game/${APP_NAME,,}-engine-v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}-engine.${APP_EXT}
cd /tmp/${APP_NAME,,}-engine/${APP_NAME,,}-engine-v${APP_VERSION}
cmake . && make && sudo make install
curl -o /tmp/${APP_NAME,,}-game.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-game/${APP_NAME,,}-game-v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}-game.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -r /tmp/${APP_NAME,,}-game/${APP_NAME,,}-game-v${APP_VERSION}/* /opt/${APP_NAME,,}
sudo ln -s /usr/local/share/games/${APP_NAME,,}/mods/default /opt/${APP_NAME,,}/mods
sudo ln -s /usr/local/games/${APP_NAME,,} /opt/${APP_NAME,,}
sudo rm -f /usr/local/share/applications/${APP_NAME,,}.desktop
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/usr/local/share/icons/hicolor/scalable/apps/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Adventure;RPG;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install 16p Mahjong Python/Pygame tile puzzle game
APP_NAME=16mj
APP_GUI_NAME="Mahjong Python/Pygame tile puzzle game."
APP_VERSION=20210523
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_py_${APP_VERSION}
sudo pip3 install pygame
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/mahjong-16p/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}_py/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/p${APP_NAME,,}.py
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/Image/Mjt7.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;Games;
Keywords=Mahjong;Puzzle;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Scintilla/SciTE GTK text editor from source
APP_NAME=SciTE
APP_GUI_NAME="GTK text editor."
APP_VERSION=5.5.7
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}${APP_VERSION//./}
sudo apt-get install -y pkg-config libglib2.0-dev libgtk2.0-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/scintilla/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/scintilla/gtk
make
cd /tmp/${FILE_NAME}/lexilla/src
make
cd /tmp/${FILE_NAME}/${APP_NAME,,}/gtk
make && sudo make install
sudo ln -s /usr/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install pgFormatter PostgreSQL and other DB SQL syntax beautifier from source
APP_NAME=pgFormatter
APP_GUI_NAME="PostgreSQL and other DB SQL syntax beautifier."
APP_VERSION=5.1
APP_EXT=tar.gz
sudo apt-get install -y git-svn unixodbc unixodbc-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
sudo mkdir /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}/* /opt/${APP_NAME,,}
sudo ln -s /opt/${APP_NAME,,}/pg_format /usr/local/bin/pgformat
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Hydrus Python-based client/server media tagging and sharing tool from package
APP_NAME=Hydrus
APP_GUI_NAME="Python-based client/server media tagging and sharing tool."
APP_VERSION=462
APP_EXT=tar.gz
sudo apt-get install -y git-svn unixodbc unixodbc-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/hydrusnetwork/${APP_NAME,,}/releases/download/v${APP_VERSION}/${APP_NAME}.Network.${APP_VERSION}.-.Linux.-.Executable.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME,,}\ network/* /opt/${APP_NAME,,}
sudo ln -s /opt/${APP_NAME,,}/client /usr/local/bin/hydrus_client
sudo ln -s /opt/${APP_NAME,,}/server /usr/local/bin/hydrus_server
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Visual Paradigm Community Edition Eclipse-based UML and architecture diagramming tool from package
APP_NAME=Visual-Paradigm
APP_GUI_NAME="Eclipse-based UML and architecture diagramming tool."
APP_MAJOR_VERSION=15.0
APP_MINOR_VERSION=20180801
APP_EXT=sh
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=Linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=Linux32
fi
sudo apt-get install -y git-svn unixodbc unixodbc-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} --referer https://www.${APP_NAME,,}.com/download/community.jsp -J -L https://usa6.${APP_NAME,,}.com/${APP_NAME,,}/vpce${APP_MAJOR_VERSION}/${APP_MINOR_VERSION}/Visual_Paradigm_CE_${APP_MAJOR_VERSION//./_}_${APP_MINOR_VERSION}_Linux64.${APP_EXT}
sudo sh /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install InfiniTex Electron-based LaTeX source and WYSIWYG editor from AppImage
APP_NAME=InfiniTex
APP_GUI_NAME="Electron-based LaTeX source and WYSIWYG editor."
APP_VERSION=0.9.16
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
sudo apt-get install -y git-svn unixodbc unixodbc-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/fetacore/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -f -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=LaTeX;Word;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Zettlr Electron-based Markdown editor with built-in preview from Debian package
APP_NAME=Zettlr
APP_GUI_NAME="Electron-based Markdown editor with built-in preview."
APP_VERSION=3.5.0
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}-amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Bitwarden Electron-based desktop/online password manager from Debian package
APP_NAME=Bitwarden
APP_GUI_NAME="Electron-based desktop/online password manager."
APP_VERSION=2022.9.1
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-client-apps.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install SmartGit Java-based Git/SVN/Mercurial GUI client from Debian package
APP_NAME=SmartGit
APP_GUI_NAME="Java-based Git/SVN/Mercurial GUI client."
APP_VERSION=23.1.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION//./_}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.syntevo.com/downloads/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install i-doit web-based CMDB and IT Documentation Repository
APP_NAME=i-doit
APP_VERSION=25
APP_EXT=zip
DB_NAME=${APP_NAME//-/}
DB_USER=${APP_NAME//-/}
DB_PASSWORD=${APP_NAME//-/}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME//-/}-open-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod a+x ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+r ${WWW_HOME}/${APP_NAME,,}
sudo find . -type d -name \* -exec chmod 775 {} \;
sudo find . -type f -exec chmod 664 {} \;
sudo chmod 774 controller
sudo chmod 774 tenants
sudo chmod 774 import
sudo chmod 774 updatecheck
sudo chmod 774 *.sh
sudo chmod 774 setup/*.sh
sudo cp /etc/php/5.6/apache2/php.ini /tmp/php.ini && sudo chown ${USER}:${USER} /tmp/php.ini
echo '^M' >> /tmp/php.ini
echo 'max_input_vars = 10000' >> /tmp/php.ini
sed -i.bak 's@post_max_size = 8M@post_max_size = 128M@g' /tmp/php.ini
sudo cp /tmp/php.ini /etc/php/5.6/apache2/php.ini && sudo chown root:root /etc/php/5.6/apache2/php.ini
sudo service apache2 restart
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install QMPlay2 Qt-based multimedia player from package
APP_NAME=QMPlay2
APP_GUI_NAME="Qt-based multimedia player."
APP_VERSION=18.03.02
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/zaps166/${APP_NAME}/releases/download/${APP_VERSION}/${APP_NAME,,}-ubuntu-amd64-${APP_VERSION}-1.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Standard Notes Electron-based secure notepad from AppImage
APP_NAME=Standard-Notes
APP_GUI_NAME="Electron-based secure notepad."
APP_VERSION=3.153.12
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/standardnotes/app/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/standardnotes/app/main/packages/icons/src/Icons/ic-sn-logo-full.svg
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Disk;Utility;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Monte Note Electron-based Markdown notepad from package
APP_NAME=Monte-Note
APP_GUI_NAME="Electron-based Markdown notepad."
APP_VERSION=0.1.0b
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/urbanogardun/${APP_NAME,,}/releases/download/v${APP_VERSION}/${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Java_console cross-platform Java shell from source
APP_NAME=Java_console
APP_GUI_NAME="Cross-platform Java shell."
APP_VERSION=2.2.3
APP_EXT=tar.gz
sudo apt-get install -y openjdk-8-jdk
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/javaconsole222/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}
./compile.sh
cd /tmp/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME} /opt
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME}
PATH=/opt/${APP_NAME}:\$PATH; export PATH
java -jar /opt/${APP_NAME}/${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Simutron AVR/Arduino simulator GUI/IDE from package
APP_NAME=Simutron
APP_GUI_NAME="Cross-platform AVR/Arduino simulator GUI/IDE."
APP_VERSION=1.0.1-SR1
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=Linux-x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=Lin32
fi
sudo apt-get install -y qt5-default cutecom gtkwave libelf1
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
LD_LIBRARY_PATH=/opt/${APP_NAME,,}/lib:\$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
/opt/${APP_NAME,,}/bin/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Electronics;Education;Other;
Keywords=Electronics;Microcontroller;AVR;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install SC Calculator cross-platform scientific calculator implemented in C++, Java, and JavaScript from package
APP_NAME=SCCalculator
APP_GUI_NAME="Cross-platform scientific calculator implemented in C++, Java, and JavaScript."
APP_VERSION=1.25
APP_EXT=zip
FILE_NAME=calculator${APP_VERSION}
sudo apt-get install -y openjdk-11-jre
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}/java:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/java/calculator.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}/java
Exec=java -jar /opt/${APP_NAME,,}/java/calculator.jar
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Programming;Math;Science;Other;
Keywords=Math;Calculator;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Tiled Qt-based map tile editor from source
APP_NAME=Tiled
APP_GUI_NAME="Cross-platform Qt-based map tile editor."
APP_VERSION=1.9.2
APP_EXT=tar.gz
sudo apt-get install -y qt5-default qttools5-dev-tools zlib1g-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}%20${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/*${APP_NAME,,}*
mkdir -p build && cd build
qtchooser -run-tool=qmake -qt=5 ../${APP_NAME,,}.pro && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install iTop web-based ITSM and CMDB tool
APP_NAME=iTop
APP_VERSION=3.0.1-9191
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
sudo apt-get install -y php${PHP5_VERSION}-soap graphviz
sudo service apache2 restart
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/web/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install gpsim cross-platform simulator for Microchip's PIC microcontrollers from source
APP_NAME=gpsim
APP_GUI_NAME="Cross-platform simulator for Microchip's PIC microcontrollers."
APP_VERSION=0.32.1
APP_EXT=tar.gz
sudo apt-get install -y libreadline-dev libpopt-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
./configure && make && sudo make install
sudo cp /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}/doc/metadata/${APP_NAME,,}.png /usr/local/share/icons
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Math;Science;Other;Engineering;
Keywords=Microcontroller;Electronics;Simulation;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Pidgin cross-platform, multi-service instant messenger (IM) utility from source
APP_NAME=Pidgin
APP_GUI_NAME="Cross-platform , multi-service instant messenger (IM) utility."
APP_VERSION=2.14.14
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
# Remove if installed from package
sudo apt-get remove pidgin*
sudo apt-get install -y libxss-dev intltool libgtkspell-dev libxml2-dev libidn1*-dev libavahi-glib-dev libavahi-client-dev libdbus-glib-1-dev libnm-dev libgnutls28-dev libnss3-dev libsasl2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure --disable-gstreamer --disable-vv --disable-meanwhile --disable-perl --disable-tcl --disable-gevolution && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install ZimmerSCP Java-based, cross-platform, 3-pane SCP (Secure Copy) utility from package
APP_NAME=ZimmerSCP
APP_GUI_NAME="Java-based, cross-platform, 3-pane SCP (Secure Copy) utility."
APP_VERSION=1.7
APP_EXT=zip
sudo apt-get install -y qt5-default cutecom gtkwave libelf1
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION//./_}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}logo.jpg
Type=Application
StartupNotify=true
Terminal=false
Categories=Network;Accessories;
Keywords=SCP;FTP;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Joy of Text (JOT) minimalist text editor from package
APP_NAME=JOT
APP_GUI_NAME="Cross-platform minimalist text editor."
APP_VERSION=3.2.2
APP_EXT=tz
sudo ln -s /lib/x86_64-linux-gnu/libncurses.so.5 /lib/x86_64-linux-gnu/libncurses.so.6
sudo ln -s /lib/x86_64-linux-gnu/libtinfo.so.5 /lib/x86_64-linux-gnu/libtinfo.so.6
sudo ln -s /lib/x86_64-linux-gnu/libncursesw.so.5 /lib/x86_64-linux-gnu/libncursesw.so.6
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/joyoftext/${APP_NAME,,}_v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/v${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}/bin/lin64:\$PATH; export PATH
JOT_HOME=/opt/${APP_NAME,,}; export JOT_HOME
/opt/${APP_NAME,,}/bin/lin64/jot "$@"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Writer2LaTeX Java-based, command-line converters from OpenDocument Format (ODF/LibreOffice) to LaTeX/BibTeX, XHTML, XHTML+MathML and EPUB from package
APP_NAME=Writer2LaTeX
APP_GUI_NAME="Java-based, command-line converters from OpenDocument Format (ODF/LibreOffice) to LaTeX/BibTeX, XHTML, XHTML+MathML and EPUB."
APP_VERSION=1.6.1
APP_EXT=zip
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}${APP_VERSION//./}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME,,}${APP_VERSION//./}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar "$@"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
sudo ln -s /usr/local/bin/${APP_NAME,,} /usr/local/bin/w2l
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install RHash cross-platform, shell-based tool for calculating and verifying various hash sums for files from source
APP_NAME=RHash
APP_GUI_NAME="Cross-platform, shell-based tool for calculating and verifying various hash sums for files."
APP_VERSION=1.4.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-src
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME}-${APP_VERSION}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install MarkText Electron-based Markdown editor from package
APP_NAME=MarkText
APP_GUI_NAME="Cross-platform, Electron-based Markdown editor."
APP_VERSION=0.17.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Markdown;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install CryptMount encrypted file system mounting tool from Debian package
APP_NAME=CryptMount
APP_GUI_NAME="Encrypted file system mounting tool."
APP_VERSION=6.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install fmedia cross-platform fast media player/recorder/converter from package
APP_NAME=fmedia
APP_GUI_NAME="Cross-platform fast media player/recorder/converter."
APP_VERSION=1.27.2
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/stsaz/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}*/* /opt/${APP_NAME,,}
sudo ln -s /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Multimedia;
Keywords=Audio;Video;Player;Converter;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Tixati cross-platform BitTorrent P2P file sharing client from package
APP_NAME=Tixati
APP_GUI_NAME="Cross-platform BitTorrent P2P file sharing client."
APP_VERSION=2.58-1
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://download2.${APP_NAME,,}.com/download/${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install ZPlayer cross-platform Java-based audio player from package
APP_NAME=ZPlayer
APP_GUI_NAME="Cross-platform Java-based audio player."
APP_VERSION=3.5.1
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://sites.google.com/site/zankuroplayer/${APP_NAME,,}.deb
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Still Yet Another Sokoban cross-platform puzzle game from source
APP_NAME=Sokoban
APP_GUI_NAME="Cross-platform puzzle game."
APP_VERSION=2.0.2
APP_EXT=zip
sudo apt-get install -y libsdl1.2-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/sya-${APP_NAME,,}/${APP_NAME,,}-source-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
make && sudo make install
sudo cp ./data/sokoban/icon/application_icon.ico /usr/local/share/icons/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/syasokoban
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Sokoban;Puzzle
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install LPub3D cross-platform LDraw editor for LEGO style digital building instructions from package
APP_NAME=LPub3D
APP_GUI_NAME="Cross-platform LDraw editor for LEGO style digital building instructions."
APP_VERSION=2.2.0.0.795_20180316-xenial
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}-${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Typora cross-platform, Electron-based Markdown editor/notepad with code syntax support from package
APP_NAME=Typora
APP_GUI_NAME="Cross-platform, Electron-based Markdown editor/notepad with code syntax support."
APP_VERSION=N/A
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=ia32
fi
sudo apt-get install -y libsdl1.2-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://${APP_NAME,,}.io/linux/${APP_NAME}-linux-${ARCH_TYPE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME}-linux-${ARCH_TYPE}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/resources/app/asserts/icon/icon_32x32@2x.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;Programming;
Keywords=Notepad;Editor;Markdown
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Notepadqq simple text editor similar to Notepad++ from package
APP_NAME=Notepadqq
APP_GUI_NAME="Simple text editor similar to Notepad++."
APP_VERSION=1.4.4-1
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (tr|ut|vi|wi)$ ]]; then  # 14.04, 14.10, 15.04, 15.10
	DISTRIB_CODENAME=trusty
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe|ya|ze|ar)$ ]]; then  # 16.04, 16.10, 17.04, 17.10
	DISTRIB_CODENAME=xenial
else    # use Bionic (18.04) version
    DISTRIB_CODENAME=bionic
fi
curl -o /tmp/${APP_NAME,,}-common.${APP_EXT} -J -L https://launchpad.net/~${APP_NAME,,}-team/+archive/ubuntu/${APP_NAME,,}/+files/${APP_NAME,,}-common_${APP_VERSION}~${DISTRIB_CODENAME}1_all.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://launchpad.net/~${APP_NAME,,}-team/+archive/ubuntu/${APP_NAME,,}/+files/${APP_NAME,,}_${APP_VERSION}~${DISTRIB_CODENAME}1_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}-common.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install CWED minimalist web-based C/C++ IDE
APP_NAME=CWED
APP_GUI_NAME="Minimalist web-based C/C++ IDE."
APP_VERSION=0.8.5
APP_EXT=tar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential gdb make
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo ./setcwmod.sh
sudo ./install.sh
cd /tmp
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=${WWW_HOME}/${APP_NAME,,}
Exec=xdg-open http://localhost/cwed/
Icon=${WWW_HOME}/${APP_NAME,,}/res/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Development;Programming;
Keywords=C;C++;Programming;IDE;Editor
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Grisbi cross-platform, GTK+ 3-based personal finance tool from source
APP_NAME=Grisbi
APP_GUI_NAME="Cross-platform, GTK+ 3-based personal finance tool from source."
APP_VERSION=1.2.2-1
APP_EXT=tar.bz2
sudo apt-get install -y libgtk-3-dev libgsf-1-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install jdbsee cross-platform command-line utility for database actions via JDBC from package
APP_NAME=jdbsee
APP_GUI_NAME="Cross-platform command-line utility for database actions via JDBC."
APP_VERSION=0.4.1-1
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}_${APP_VERSION}_all.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install QtChess cross-platform, peer-to-peer Qt/OpenGL chess program from Debian package
APP_NAME=QtChess
APP_GUI_NAME="Cross-platform , peer-to-peer Qt/OpenGL chess program."
APP_VERSION=2021.12.25
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}_amd64
sudo apt-get install -y qt5-default
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/textbrowser/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install BlueJ educational Java IDE from package
APP_NAME=BlueJ
APP_GUI_NAME="Cross-platform educational Java IDE."
APP_VERSION=5.2.1
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://www.${APP_NAME,,}.org/download/files/${APP_NAME}-linux-${APP_VERSION//./}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Microsoft PowerShell cross-platform shell and scripting environment from package
# https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell-core-on-macos-and-linux?view=powershell-6
APP_NAME=PowerShell
APP_GUI_NAME="Cross-platform shell and scripting environment."
APP_VERSION=7.4.10
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1.${APP_EXT}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Oni cross-platform GUI text editor based on Neovim and React/Redux from package
APP_NAME=Oni
APP_GUI_NAME="Cross-GUI text editor based on Neovim and React/Redux."
APP_VERSION=0.3.9
APP_EXT=deb
# Neovim must be installed to use Oni
sudo apt-get install -y python-dev python-pip python3-dev python3-pip
sudo add-apt-repository -y ppa:neovim-ppa/stable
sudo apt-get -y update
sudo apt-get install -y neovim
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/onivim/${APP_NAME,,}/releases/download/v${APP_VERSION}/${APP_NAME}-${APP_VERSION}-amd64-linux.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Rodent applications, including Rodent File Manager, from source
APP_NAME=xffm
APP_GUI_NAME="Rodent applications, including Rodent File Manager."
APP_VERSION=5.3.16.3
APP_EXT=tar.bz2
sudo apt-get install -y libzip-dev librsvg2-dev libmagic-dev
cd /tmp
FILE_NAME=libtubo0-5.0.15
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
dtrx -n /tmp/${FILE_NAME}.${APP_EXT} && cd /tmp/${FILE_NAME}
./configure && make && sudo make install && cd /tmp
FILE_NAME=libdbh2-5.0.22
curl -o /tmp/${FILE_NAME}.tar.gz -J -L https://downloads.sourceforge.net/dbh/${FILE_NAME}.tar.gz
dtrx -n /tmp/${FILE_NAME}.tar.gz && cd /tmp/${FILE_NAME}
./configure && make && sudo make install && cd /tmp
FILE_NAME=librfm5-5.3.16.4
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
dtrx -n /tmp/${FILE_NAME}.${APP_EXT} && cd /tmp/${FILE_NAME}
./configure && make && sudo make install && cd /tmp
FILE_NAME=rodent-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
dtrx -n /tmp/${FILE_NAME}.${APP_EXT} && cd /tmp/${FILE_NAME}
./configure && make && sudo make install && cd /tmp
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Remote Operation On Files (ROOF) FTP client from package
APP_NAME=ROOF
APP_GUI_NAME="Cross-platform educational Java IDE."
APP_VERSION=2.2.27
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install jGameBase Java version of GameBase emulator frontend and database utility from package
APP_NAME=jGameBase
APP_GUI_NAME="Java version of GameBase emulator frontend and database utility."
APP_VERSION=0.71-3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Flextype flat-file content management system (CMS)
APP_NAME=Flextype
APP_VERSION=0.2.0
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
sudo apt-get install -y php${PHP5_VERSION}-soap graphviz
sudo service apache2 restart
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n ${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 777 ${WWW_HOME}/${APP_NAME,,}/site
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install GoldenDict cross-platform Qt-based dictionary client from source
APP_NAME=GoldenDict
APP_GUI_NAME="Cross-platform Qt-based dictionary client."
APP_VERSION=1.5.0-RC2
APP_EXT=tar.gz
sudo apt-get install -y git pkg-config build-essential qt5-qmake libvorbis-dev zlib1g-dev libhunspell-dev x11proto-record-dev qtdeclarative5-dev libqtwebkit-dev libxtst-dev liblzo2-dev libbz2-dev libao-dev libavutil-dev libavformat-dev libtiff5-dev libeb16-dev libqt5webkit5-dev libqt5svg5-dev libqt5x11extras5-dev qttools5-dev qttools5-dev-tools
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
qtchooser -run-tool=qmake -qt=5 ${APP_NAME,,}.pro && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install FreeMAN extensible, cross-platform, Electron-based file manager for power users from package
APP_NAME=FreeMAN
APP_GUI_NAME="Extensible, cross-platform, Electron-based file manager for power users."
APP_VERSION=0.8.1
APP_EXT=snap
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/matthew-matvei/${APP_NAME,,}/releases/download/v${APP_VERSION}/${APP_NAME,,}_${APP_VERSION}_amd64.${APP_EXT}
sudo snap install --dangerous /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install PAGE drag-and-drop GUI generator for Python and Tkinter from package
APP_NAME=PAGE
APP_GUI_NAME="Drag-and-drop GUI generator for Python and Tkinter."
APP_VERSION=8.0
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y tcl8.6 tk8.6 tclx8.4 tcllib tklib tkdnd expect tcl-tls
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}/* /opt/${APP_NAME,,}
sudo /opt/${APP_NAME,,}/configure
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/page-icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Python;Tk;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Easy Disk Cleaner cross-platform disk maintenance utility from package
APP_NAME=Easy-Disk-Cleaner
APP_GUI_NAME="Cross-platform disk maintenance utility."
APP_VERSION=2.0.0
APP_EXT=zip
sudo apt-get install -y tcl8.6 tk8.6 tclx8.4 tcllib tklib tkdnd expect tcl-tls
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-linux.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mv /tmp/${APP_NAME,,} /opt
sudo chmod +x /opt/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}-x86_64.AppImage
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}-x86_64.AppImage /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}-x86_64.AppImage
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Disk;Utility;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Yoda Python-based personal assistant to terminal from source
APP_NAME=Yoda
APP_GUI_NAME="Python-based personal assistant to terminal."
APP_VERSION=0.2.0
APP_EXT=tar.gz
sudo apt-get install -y python-setuptools python-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/yoda-pa/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}
sudo python2 ./setup.py install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Pinguy ISO Builder live CD creator for Ubuntu-based distributions from package
APP_NAME=PinguyBuilder
APP_GUI_NAME="Live CD creator for Ubuntu-based distributions."
APP_VERSION=N/A
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (ze|ar|bi)$ ]]; then  # 17.04, 17.10, 18.04
	APP_VERSION=5.2-1_all
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe|ya)$ ]]; then  # 16.04, 16.10
	APP_VERSION=4.3-8_all-beta
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (vi|wi)$ ]]; then  # 15.04, 15.10
	APP_VERSION=15.10
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (tr|ut)$ ]]; then  # 14.04, 14.10
	APP_VERSION=3.3-7_all
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/pinguy-os/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Bodhi Builder live CD creator for Ubuntu-based distributions from Debian package
APP_NAME=BodhiBuilder
APP_GUI_NAME="Live CD creator for Ubuntu-based distributions."
APP_VERSION=N/A
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co)$ ]]; then  # 18.04
	APP_VERSION=2.18.5_all
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe|ya|ze|ar)$ ]]; then  # 16.04, 16.10, 17.04, 17.10
	APP_VERSION=2.2.7_all
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (tr|ut|vi|wi)$ ]]; then  # 14.04, 14.10, 15.04, 15.10
	APP_VERSION=2.1.6_all
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Geogebra Java-based cross-platform math education and visualization tool from package
APP_NAME=Geogebra
APP_GUI_NAME="Java-based cross-platform math education and visualization tool."
APP_VERSION=6
APP_EXT=deb
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L http://www.${APP_NAME,,}.org/download/deb.php?arch=${KERNEL_TYPE}&ver=${APP_VERSION}
sudo gdebi -n /tmp/${APP_NAME,,}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install yEd Java-based cross-platform diagramming tool from package
APP_NAME=yEd
APP_GUI_NAME="Java-based cross-platform diagramming tool."
APP_VERSION=3.17.2
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://yworks.com/resources/${APP_NAME,,}/demo/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${FILE_NAME,,}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar -classpath /opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar -classpath /opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Icon=/opt/${APP_NAME,,}/icons/yicon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;Programming;
Keywords=Diagramming;Flowcharts;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install BlueGriffon cross-platform EPUB and web editor/IDE from Debian package
APP_NAME=BlueGriffon
APP_GUI_NAME="Cross-platform EPUB and web editor/IDE."
APP_VERSION=3.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.Ubuntu16.04-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://${APP_NAME,,}.org/freshmeat/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install LaTeX2RTF cross-platform utility to convert LaTeX files to RTF from package
APP_NAME=LaTeX2RTF
APP_GUI_NAME="Cross-platform utility to convert LaTeX files to RTF."
APP_VERSION=2.3.17
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT} && cd /tmp/${FILE_NAME}
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Mnemosyne cross-platform Python/Qt-based flashcard program from source
APP_NAME=Mnemosyne
APP_GUI_NAME="Cross-platform Python/Qt-based flashcard program."
APP_VERSION=2.10.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y python3-pip python3-pyqt5 python3-matplotlib python3-virtualenv python3-setuptools python3-wheel python3-webob python3-willow python3-pyqt5.qtwebengine python3-pyqt5.qtwebkit python3-pyqt5.qtsql python3-opengl
sudo pip3 install cheroot
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-proj/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT} && cd /tmp/${FILE_NAME}
sudo python3 ./setup.py install
sudo cp ./pixmaps/${APP_NAME,,}.ico /usr/local/share/pixmaps
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/pixmaps/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Education;
Keywords=Education;Flashcard;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install 8Bit Banditos HTML5/JavaScript retro arcade game from source
APP_NAME=8BitBanditos
APP_GUI_NAME="8bit Banditos HTML5/JavaScript retro arcade game."
APP_VERSION=1.4
APP_EXT=7z
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/banditos/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/banditos
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* ${WWW_HOME}/banditos
sudo chmod -R 777 ${WWW_HOME}/banditos
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=${WWW_HOME}/banditos
Exec=xdg-open ${WWW_HOME}/banditos/index.html
Icon=${WWW_HOME}/banditos/images/invader_bonus_48_24_1_1.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Arcade;Retro;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open ${WWW_HOME}/banditos/index.html
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install PHP Server Monitor web site and service monitoring platform
APP_NAME=PHPServerMon
APP_GUI_NAME="Web site and service monitoring platform."
APP_VERSION=3.3.0
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
cd ${WWW_HOME}/${APP_NAME,,}
sudo php ./composer.phar install
sudo php ./composer.phar update
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
# Create configuration file and copy to installation directory.
cat > /tmp/config.php << EOF
<?php
define('PSM_DB_HOST', 'localhost');
define('PSM_DB_PORT', '3306');
define('PSM_DB_NAME', '${DB_NAME}');
define('PSM_DB_USER', '${DB_USER}');
define('PSM_DB_PASS', '${DB_PASSWORD}');
define('PSM_DB_PREFIX', 'psm_');
define('PSM_BASE_URL', 'http://localhost/${APP_NAME,,}');
EOF
sudo mv /tmp/config.php ${WWW_HOME}/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=${WWW_HOME}/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php
Icon=${WWW_HOME}/${APP_NAME,,}/favicon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Monitoring;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}/index.php &
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install VeraCrypt cross-platform disk encryption utility from Debian package
APP_NAME=VeraCrypt
APP_GUI_NAME="Cross-platform disk encryption utility."
APP_VERSION=1.26.7
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (ki|lu)$ ]]; then 
	DIST_VERSION=23.04
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (gr|hi|im|ja)$ ]]; then  # 22.04 - 
	DIST_VERSION=22.04
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (co|di|eo|fo)$ ]]; then  # 20.04 - 21.10
	DIST_VERSION=20.04
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (ya|ze|ar|bi)$ ]]; then  # 18.04 - 19.10
	APP_VERSION=1.25.4
	DIST_VERSION=18.04
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe)$ ]]; then  # 16.04, 16.10, 17.04, 17.10
	APP_VERSION=1.24
	DIST_VERSION=16.04
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-Ubuntu-${DIST_VERSION}-amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Pinky Bar window manager-independent status bar system information utility from source
APP_NAME=Pinky-Bar
APP_GUI_NAME="Window manager-independent status bar system information utility."
APP_VERSION=N/A
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}
sudo apt-get install -y pciutils libpci-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
perl set.pl "debian" && autoreconf --install --force
./configure --prefix=$HOME/.cache --without-x11 --without-colours && make &&
make install && mkdir -p $HOME/.pinky
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install SwitchHosts cross-platform, Electron-based hosts file manager from AppImage
APP_NAME=SwitchHosts
APP_GUI_NAME="Cross-platform, Electron-based hosts file manager."
APP_GUI_CATEGORIES="System;Networking;"
APP_GUI_KEYWORDS="Hosts;Privacy;Security;"
APP_MAJOR_VERSION=4.0.2
APP_MINOR_VERSION=6057
APP_EXT=AppImage
FILE_NAME=${APP_NAME}_linux_${APP_MAJOR_VERSION}.${APP_MINOR_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/oldj/${APP_NAME}/releases/download/v${APP_MAJOR_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/oldj/${APP_NAME}/master/assets/app.png
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Network;Internet;
Keywords=Hosts;Networking;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Tweet Tray cross-platform, Electron-based Twitter client from package
APP_NAME=Tweet-Tray
APP_GUI_NAME="Cross-platform, Electron-based Twitter client."
APP_VERSION=1.1.5
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jonathontoon/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install fd user-friendly alternative to Linux 'find' from package
APP_NAME=fd
APP_GUI_NAME="Cross-platform, user-friendly alternative to Linux 'find'."
APP_VERSION=10.2.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-musl_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sharkdp/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install fileobj Python-based ncurses hex editor with Vi keybindings from source
APP_NAME=fileobj
APP_GUI_NAME="Python-based ncurses hex editor."
APP_VERSION=0.8.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kusumi/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 ./setup.py install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Flowblade multitrack non-linear video editor for Linux from package
APP_NAME=Flowblade
APP_GUI_NAME="Multitrack non-linear video editor for Linux."
APP_VERSION=2.18
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jliljebl/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install wxglterm Python and C/C++ Wx-based terminal emulator from source
APP_NAME=wxglterm
APP_GUI_NAME="Python and C/C++ Wx-based terminal emulator."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=N/A
sudo apt-get install -y libwxbase3.0-dev pybind11-dev libfontconfig1-dev libglew-dev libglfw*-dev cmake libwxgtk3.0-dev
cd /tmp
git clone https://github.com/stonewell/${APP_NAME,,}
cd /tmp/${APP_NAME,,}
mkdir -p build && cd build
cmake .. -DPYTHON_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") -DBUILD_WXWIDGETS_UI=ON -DBUILD_OPENGL_UI=ON
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Gocho LAN file-sharing application with node auto-discovery from package
APP_NAME=Gocho
APP_GUI_NAME="LAN file-sharing application with node auto-discovery."
APP_VERSION=0.1.0
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/donkeysharp/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install LumberJack4Logs Java-based log file viewer with support for customer parser plugins from package
APP_NAME=LumberJack4Logs
APP_GUI_NAME="Java-based log file viewer with support for customer parser plugins."
APP_VERSION=20180404_2317
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME}
PATH=/opt/${APP_NAME}:\$PATH; export PATH
sh /opt/${APP_NAME}/start_${APP_NAME,,}.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME}
Exec=sh /opt/${APP_NAME}/start_${APP_NAME,,}.sh
Icon=/opt/${APP_NAME}/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;System;
Keywords=Logs;System;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install MultiBootUSB utility for creating bootable USB/Flash drive with multiple live Linux distributions from package
APP_NAME=MultiBootUSB
APP_GUI_NAME="Utility for creating bootable USB/Flash drive with multiple live Linux distributions."
APP_VERSION=9.2.0-1
APP_EXT=deb
FILE_NAME=python3-${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Miam-Player cross-platform Qt-based audio player from source
APP_NAME=Miam-Player
APP_GUI_NAME="Cross-platform Qt-based audio player."
APP_VERSION=0.9.0
APP_EXT=tar.gz
sudo apt-get install -y build-essential qt5-qmake qttools5-dev qttools5-dev-tools libqtav-dev libtag1-dev libqt5multimedia5 qtmultimedia5-dev libqt5x11extras5-dev
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/MBach/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
cd /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
qtchooser -run-tool=qmake -qt=5 ${APP_NAME,,}.pro && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install EtherApe GTK-based GUI network monitoring tool from source
APP_NAME=EtherApe
APP_GUI_NAME="GTK-based GUI network monitoring tool."
APP_VERSION=0.9.18
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libglade2-dev libgnomecanvas2-dev libpcap-dev itstool libpopt-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Hale Studio cross-platform, Java-based interactive tool for data transformation and visualization from package
APP_NAME=Hale-Studio
APP_GUI_NAME="Cross-platform, Java-based interactive tool for data transformation and visualization."
APP_VERSION=5.0.0
APP_EXT=tar
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux.gtk.${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME//-/}/hale/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
mv ${FILE_NAME} ${APP_NAME,,}
sudo mv ${APP_NAME,,} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/HALE
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME}
Exec=/opt/${APP_NAME,,}/HALE
Icon=/opt/${APP_NAME,,}/icon.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;System;
Keywords=Eclipse;Data;Science;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install rpCalc cross-platform, Python/Qt RPN calculator from source
APP_NAME=rpCalc
APP_GUI_NAME="Cross-platform, Python/Qt RPN calculator."
APP_VERSION=0.8.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y python3-pyqt5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME}
sudo python3 ./install.py
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Opera web browser (stable release) from package
APP_NAME=Opera
APP_GUI_NAME=""
APP_VERSION=117.0.5408.154
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-stable_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download3.operacdn.com/pub/${APP_NAME,,}/desktop/${APP_VERSION}/linux/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install smenu interactive shell script menu tool from source
APP_NAME=smenu
APP_GUI_NAME="Interactive shell script menu tool."
APP_VERSION=1.2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libtinfo-dev lib64tinfo5 libncurses5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/p-gen/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./build.sh && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install DeaDBeeF minimalist audio player from Debian package
APP_NAME=DeaDBeeF
APP_GUI_NAME="Minimalist audio player."
APP_VERSION=1.9.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-static_${APP_VERSION}-1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install ghostwriter Qt-based, cross-platform Markdown editor with built-in preview from source
APP_NAME=ghostwriter
APP_GUI_NAME="Qt-based, cross-platform Markdown editor."
APP_VERSION=2.2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y qt5-default hunspell libhunspell-dev libqt5webkit5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/KDE/${APP_NAME,,}/archive/ref/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
qtchooser -run-tool=qmake -qt=5 ghostwriter.pro && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Extraterm Electron-based, cross-platform terminal emulator from package
APP_NAME=Extraterm
APP_GUI_NAME="Electron-based, cross-platform terminal emulator."
APP_VERSION=0.70.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}qt-${APP_VERSION}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sedwards2009/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,}qt /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}qt
Icon=/opt/${APP_NAME,,}/main/resources/logo/${APP_NAME,,}_small_logo_256x256.png
Type=Application
StartupNotify=true
Terminal=false
Categories=System;TerminalEmulator;
Keywords=Terminal;Shell;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Ironclad Go-based, minimalist command line password manager from package
APP_NAME=Ironclad
APP_GUI_NAME="Go-based, minimalist command line password manager."
APP_VERSION=2.5.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dmulholl/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Luna Electron-based GUI for Node.JS/NPM package management from package
APP_NAME=Luna
APP_GUI_NAME="Electron-based GUI for Node.JS/NPM package management."
APP_VERSION=3.4.6
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rvpanoz/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install giv (Gtk+ Image Viewer) Gtk-based image and vector viewer from source
APP_NAME=giv
APP_GUI_NAME="Gtk-based image and vector viewer."
APP_VERSION=0.9.30
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgtk-3-dev
# Install CFITSIO FITS File Subroutine Library <https://heasarc.gsfc.nasa.gov/fitsio/fitsio.html>
TEMP_FILE=cfitsio3440
curl -o /tmp/${TEMP_FILE}.${APP_EXT} -J -L http://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/${TEMP_FILE}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${TEMP_FILE}.${APP_EXT}
cd /tmp/${TEMP_FILE}/cfitsio
./configure && make
UPDATE_STRING=s@/tmp/${TEMP_FILE}/cfitsio@/usr@g
sudo sed -i ${UPDATE_STRING} ./lib/pkgconfig/cfitsio.pc
sudo cp -R ./lib/* /usr/lib
sudo cp fitsio.h fitsio2.h longnam.h drvrsmem.h /usr/include
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Umbrella Note Electron-based minimalist notepad/journal utility from package
# https://github.com/arpban/umbrella-note
APP_NAME=Umbrella-Note
APP_GUI_NAME="Electron-based minimalist notepad/journal utility."
APP_VERSION=2.0.0
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://umbrellanote.com/updates/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install LiVES non-linear video editor from source
APP_NAME=LiVES
APP_GUI_NAME="Non-linear video editor."
APP_VERSION=3.2.0
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y imagemagick mplayer libjpeg62-dev sox libmjpegtools-dev lame ffmpeg libgtk-3-dev libgdk-pixbuf2.0-dev libjack-dev libpulse-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install && sudo ldconfig
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install GetIt GTK+-3-based HTTP request tool from source
APP_NAME=GetIt
APP_GUI_NAME="GTK+-3-based HTTP request tool."
APP_VERSION=4.0.9
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgtk-3-dev libgtksourceview-3.0-dev libsoup2.4-dev libnotify-dev libglib2.0-dev json-glib-tools libjson-glib-dev gettext libwebkitgtk-dev meson
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bartkessels/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
meson --prefix=/usr/local build && cd build && sudo ninja install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Balena Etcher cross-platform Electron-based tool to copy OS images to USB drives from Debian package
# https://github.com/balena-io/etcher
APP_NAME=Balena-Etcher
APP_GUI_NAME="Cross-platform Electron-based tool to copy OS images to USB drives."
APP_VERSION=2.1.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/balena-io/etcher/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install 2D Java Chess Java chess game from package
APP_NAME=Java-Chess-2D
APP_GUI_NAME="Java chess game."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/2D%20Java%20Chess.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Games;Chess;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install QCalc Java-based command-line high-precision calculator from package
APP_NAME=QCalc
APP_GUI_NAME="Java-based command-line high-precision calculator."
APP_VERSION=1.1-beta
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-uni
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/paroxayte/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}.${APP_EXT}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /usr/local/bin
PATH=/usr/local/bin:\$PATH; export PATH
java -jar /usr/local/bin/${APP_NAME,,}.${APP_EXT} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install tkdiff Tcl-based text file difference viewer/editor from source
APP_NAME=tkdiff
APP_GUI_NAME="Tcl-based text file difference viewer/editor."
APP_VERSION=5.7
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION/./-}
sudo apt-get install -y tcl8.6 tk8.6 tclx8.4 tcllib tklib
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}

# Install FreeBASIC cross-platform BASIC compiler, with syntax similar MS-QuickBASIC and advanced features from package
APP_NAME=FreeBASIC
APP_GUI_NAME="Cross-platform BASIC compiler, with syntax similar MS-QuickBASIC and advanced features."
APP_VERSION=1.10.1
APP_EXT=tar.xz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-${ARCH_TYPE}
sudo apt-get install -y gcc libncurses5-dev libffi-dev libgl1-mesa-dev libx11-dev libxext-dev libxrender-dev libxrandr-dev libxpm-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/fbc/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo ./install.sh -i /usr/local
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install LNAV log file viewer/searcher with syntax highlighting from package
APP_NAME=LNAV
APP_GUI_NAME="Log file viewer/searcher with syntax highlighting."
APP_VERSION=0.13.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-64bit
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/tstack/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install DCEdit cross-platform, Java-based editor with built-in snippets for Java, SQL, and JavaFX from package
APP_NAME=DCEdit
APP_GUI_NAME="Cross-platform, Java-based editor with built-in snippets for Java, SQL, and JavaFX."
APP_VERSION=2.4
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
sh /opt/${APP_NAME,,}/${APP_NAME}.sh "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=sh /opt/${APP_NAME,,}/${APP_NAME}.sh
Icon=/opt/${APP_NAME,,}/bin/img/splash.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;Programming
Keywords=Editor;Text;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install PDF Sandwich utility to OCR images and embed text in original PDF file from package
APP_NAME=PDFSandwich
APP_GUI_NAME="Utility to OCR images and embed text in original PDF file."
APP_VERSION=0.1.6
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install CoolReader cross-platform eBook reader supporting FB2, TXT, RTF, DOC, TCR, HTML, EPUB, CHM, PDB, and MOBI formats from package
APP_NAME=CoolReader
APP_GUI_NAME="Cross-platform eBook reader supporting FB2, TXT, RTF, DOC, TCR, HTML, EPUB, CHM, PDB, and MOBI formats."
APP_VERSION=3.0.56-7
APP_EXT=deb
FILE_NAME=cr3_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/libpng12-0.deb -J -L http://mirrors.kernel.org/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/libpng12-0.deb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/crengine/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install IndJShell independent, cross-platform Java shell/REPL from package
APP_NAME=IndJShell
APP_GUI_NAME="Independent, cross-platform Java shell/REPL."
APP_VERSION=0.0.2
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Webmin web-based Unix/Linux administration tool from package
APP_NAME=Webmin
APP_GUI_NAME="Web-based Unix/Linux administration tool."
APP_VERSION=1.881
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/webadmin/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install XiX Music Player cross-platform audio player from package
APP_NAME="XiX Music Player"
APP_GUI_NAME="Cross-platformaudio player."
APP_VERSION=N/A
APP_EXT=zip
# FILE_NAME="$(echo -e "${APP_NAME}" | tr -d '[:space:]')"_x64
FILE_NAME=${APP_NAME// /}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/xixmusicplayer/${FILE_NAME}_x64.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME// /} /opt
cat > /tmp/${FILE_NAME,,} << EOF
#! /bin/sh
cd /opt/${FILE_NAME}
PATH=/opt/${FILE_NAME}:\$PATH; export PATH
LD_LIBRARY_PATH=/opt/${FILE_NAME}/lib:\$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
/opt/${FILE_NAME}/${FILE_NAME} "\$1"
cd $HOME
EOF
sudo mv /tmp/${FILE_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${FILE_NAME}
Exec=/usr/local/bin/${FILE_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Audio;Multimedia
Keywords=Audio;Music
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${FILE_NAME}*

# Install Nethack text-based RPG from source
# Build instructions based on http://jes.st/2015/compiling-playing-nethack-360-on-ubuntu/
APP_NAME=Nethack
APP_GUI_NAME="Text-based RPG."
APP_VERSION=3.6.6
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION//./}-src
sudo apt-get install -y flex bison build-essential libncurses5-dev checkinstall
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://nethack.org/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}
sed -i 's@/* #define LINUX */@#define LINUX@g' ./include/unixconf.h
# Enable Status Hilites
sed -i 's@/* #define STATUS_VIA_WINDOWPORT */@#define STATUS_VIA_WINDOWPORT@g' ./include/config.h
sed -i 's@/* #define STATUS_HILITES */@#define STATUS_HILITES@g' ./include/config.h
curl -o ./sys/unix/hints/linux -J -L https://gist.githubusercontent.com/jesstelford/67eceb7a7fa08405f6b7/raw/4579ba467ad6120a48e2e4b572c83b48dcdbc636/Makefile
# Generate Makefile
sh ./sys/unix/setup.sh ./sys/unix/hints/linux
make all && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Digital Logic Design (DLD) Java-based digital circuit designer and simulator from package
APP_NAME=DLD
APP_GUI_NAME="Java-based digital circuit designer and simulator."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/digitalcircuitdesign/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}*/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar "\$@"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Electronics;Education;Engineering;
Keywords=Electronics;Simulation;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Everest cross-platform JavaFX-based REST API client from package
APP_NAME=Everest
APP_GUI_NAME="Cross-platform JavaFX-based REST API client."
APP_VERSION=Alpha-1.3
APP_EXT=jar
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/RohitAwate/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "\$1"
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Test;Web Services;API;REST;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${FILE_NAME}*

# Install Turing cross-platform, Qt-based Python IDE from package
APP_NAME=Turing
APP_GUI_NAME="Cross-platform, Qt-based Python IDE."
APP_VERSION=0.11
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}-nix
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/TuringApp/${APP_NAME}/releases/download/v${APP_VERSION}-beta/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,} "\$1"
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Python;Editor;IDE;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${FILE_NAME}*

# Install KADOS (KAnban Dashboard for Online Scrum) web-based tool for managing Scrum projects with Kanban board
# http://www.kados.info/
APP_NAME=KADOS
APP_VERSION=r11-YellowCat
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME,,} ${WWW_HOME}
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
sudo cp ${WWW_HOME}/${APP_NAME,,}/updates/R10-GreenBee/install/connect_r10.conf ${WWW_HOME}/${APP_NAME,,}/conf/connect.conf
sudo sed -i 's@PARAM_host@localhost@g' ${WWW_HOME}/${APP_NAME,,}/conf/connect.conf
sudo sed -i 's@PARAM_db@'${DB_NAME}'@g' ${WWW_HOME}/${APP_NAME,,}/conf/connect.conf
sudo sed -i 's@PARAM_user@'${DB_USER}'@g' ${WWW_HOME}/${APP_NAME,,}/conf/connect.conf
sudo sed -i 's@PARAM_password@'${DB_PASSWORD}'@g' ${WWW_HOME}/${APP_NAME,,}/conf/connect.conf
sudo sed -i 's@PARAM_charset@utf8_general_ci@g' ${WWW_HOME}/${APP_NAME,,}/conf/connect.conf
mysql --host=localhost --user=${DB_USER} --password=${DB_PASSWORD} ${DB_NAME} < /tmp/${APP_NAME,,}/sql/create_database_R10.sql
xdg-open http://localhost/${APP_NAME,,}/index.php &

# Install linNet symbolic Analysis of linear Electronic Circuits tool from package
APP_NAME=linNet
APP_GUI_NAME="Cross-platform, symbolic Analysis of linear Electronic Circuits tool."
APP_VERSION=1.0.1
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-svn/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME}/components/${APP_NAME}/* /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/bin/LINUX/PRODUCTION/${APP_NAME}
sudo rm -rf /opt/${APP_NAME,,}/bin/win*
echo 'LINNET_HOME=/opt/'${APP_NAME,,}'/bin/LINUX/PRODUCTION; export LINNET_HOME' >> $HOME/.bashrc
echo 'PATH=$PATH:$LINNET_HOME; export PATH' >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}/bin/LINUX/PRODUCTION
PATH=/opt/${APP_NAME,,}/bin/LINUX/PRODUCTION:\$PATH; export PATH
/opt/${APP_NAME,,}/bin/LINUX/PRODUCTION/${APP_NAME} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}/bin/LINUX/PRODUCTION
Exec=/opt/${APP_NAME,,}/bin/LINUX/PRODUCTION/${APP_NAME} "\$1"
Icon=/opt/${APP_NAME,,}/doc/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Science;Electronics;
Keywords=Electronics;Circuits;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${FILE_NAME}*

# Install Eval minimalist console calculator from package
APP_NAME=concalc
APP_GUI_NAME="Cross-platform, minimalist console calculator."
APP_VERSION=N/A
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/eval-command-line-calculator/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/consolecalc/${APP_NAME} /usr/local/bin
cd $HOME
rm -rf /tmp/${FILE_NAME}*

# Install FileRunner cross-platform, two-pane file manager with built-in FTP/SFTP client from package
APP_NAME=FileRunner
APP_GUI_NAME="Cross-platform, two-pane file manager with built-in FTP/SFTP client."
APP_VERSION=23.03.07.16-2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Web Video Downloader Zenity GUI for cclive video download utility from package
APP_NAME=WebVideoDownloader
APP_GUI_NAME="Zenity GUI for cclive video download utility."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=${APP_NAME}
sudo apt-get install -y zenity cclive
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}
sudo mv /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/WebVideoDownloader
sudo ln -s /usr/local/bin/${FILE_NAME} /usr/local/bin/wvdl
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Origami SMTP cross-platform, Java-based, fake SMTP server with TLS support from package
APP_NAME=Origami-SMTP
APP_GUI_NAME="Cross-platform, Java-based, fake SMTP server with TLS support."
APP_VERSION=v1.6.2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/origamismtp/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Diffuse cross-platform, local and cloud account (AWS S3, Dropbox, Google Drive, etc.) audio player from Snap package
APP_NAME=Diffuse
APP_GUI_NAME="Cross-platform, local and cloud account (AWS S3, Dropbox, Google Drive, etc.) audio player."
APP_VERSION=1.0.0-beta
APP_EXT=snap
FILE_NAME=${APP_NAME}_${APP_VERSION//.4/}_${KERNEL_TYPE}
sudo apt-get install -y snapd snapd-xdg-open
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/icidasset/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo snap install --dangerous /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}

# Install justmd cross-platform, Electron-based MarkDown editor with built-in preview from package
APP_NAME=justmd
APP_GUI_NAME="Cross-platform, Electron-based MarkDown editor with built-in preview "
APP_VERSION=v1.1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-linux-x64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/i38/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME}-linux-x64/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME} "\$1"
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;
Keywords=MarkDown;Editor;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${FILE_NAME}*

# Install Whale cross-platform advanced web browser from Debian package
APP_NAME=Whale
APP_GUI_NAME="Cross-platform advanced web browser."
APP_VERSION=stable
APP_EXT=deb
FILE_NAME=naver-${APP_NAME,,}-${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://update.whale.naver.net/downloads/installers/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME},,*

# Install Anteater Java-based manual test planning/tracking tool from package
APP_NAME=Anteater
APP_GUI_NAME="Cross-platform, Java-based manual test planning/tracking tool "
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=ae-pack
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar "\$1"
Icon=/opt/${APP_NAME,,}/mtu-automaton.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Testing;Development;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${FILE_NAME}*

# Install Nighthawk cross-platform, Electron-based minimalist music player from Debian package
APP_NAME=Nighthawk
APP_GUI_NAME="Cross-platform, Electron-based minimalist music player."
APP_VERSION=v2.0.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-linux-${APP_VERSION}-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/quantumkv/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install MiluDBViewer cross-platform, Java-based multi-database (MySQL/PostgreSQL/Oracle/Cassandra/SQLite/SQLServer/MongoDB) viewer/editor client from package
# Requires JRE 11 or later with JavaFX
APP_NAME=MiluDBViewer
APP_GUI_NAME="Cross-platform, Java-based multi-database (MySQL/PostgreSQL/Oracle/Cassandra/SQLite/SQLServer/MongoDB) viewer/editor client."
APP_VERSION=0.3.9
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}${APP_VERSION}
sudo apt install -y openjdk-11-jre openjfx
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}.sh "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}.sh "\$1"
Icon=/opt/${APP_NAME,,}/resources/images/winicon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Database;Java;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${FILE_NAME}*

# Install SET's Editor simple Turbo C++-style console-mode text editor from Debian package
APP_NAME=SETedit
APP_GUI_NAME="Simple  Turbo C++-style console-mode text editor."
APP_VERSION=0.5.8-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/rhtvision2.2.1_2.2.1-4_amd64.${APP_EXT} -J -L https://downloads.sourceforge.net/tvision/rhtvision2.2.1_2.2.1-4_amd64.${APP_EXT}
sudo gdebi -n /tmp/rhtvision2.2.1_2.2.1-4_amd64.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME},,*

# Install dotProject web-based tool for project management including Gantt charts
# https://dotproject.net/
APP_NAME=dotProject
APP_VERSION=2.2.0
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/install/index.php &

# Install Textosaurus minimalist, cross-platform Qt5/Scintilla-based text editor from AppImage
APP_NAME=Textosaurus
APP_GUI_NAME="Minimalist, cross-platform Qt5/Scintilla-based text editor."
APP_MAJOR_VERSION=0.9.13
APP_MINOR_VERSION=9cb7064
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_MAJOR_VERSION}-${APP_MINOR_VERSION}-linux64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/martinrotter/${APP_NAME,,}/releases/download/${APP_MAJOR_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "\$1"
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;Accessories
Keywords=Editor;Text;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install sqlitebiter cross-platform CLI tool to convert CSV/Excel/HTML/JSON/LTSV/Markdown/SQLite/SSV/TSV/Google-Sheets to a SQLite database file from Debian package
APP_NAME=sqlitebiter
APP_GUI_NAME="Cross-platform, CLI tool to convert CSV/Excel/HTML/JSON/LTSV/Markdown/SQLite/SSV/TSV/Google-Sheets to a SQLite database file ."
APP_VERSION=0.36.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_focal_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/thombashi/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install aria2 cross-platform, lightweight multi-protocol & multi-source, cross platform download utility which supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink from source
APP_NAME=aria2
APP_GUI_NAME="Cross-platform, lightweight multi-protocol & multi-source, cross platform download utility which supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink."
APP_VERSION=1.37.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install libssh-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/aria2/aria2/releases/download/release-${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install X11-Basic cross-platform Basic interpreter with graphics support from Debian package
APP_NAME=x11basic
APP_GUI_NAME="Cross-platform Basic interpreter with graphics support."
APP_VERSION=1.28-65
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/x11-basic/${FILE_NAME}.${APP_EXT}
curl -o /tmp/libreadline6-dev.${APP_EXT} -J -L http://launchpadlibrarian.net/236282832/libreadline6-dev_6.3-8ubuntu2_${KERNEL_TYPE}.${APP_EXT}
curl -o /tmp/libreadline6.${APP_EXT} -J -L http://launchpadlibrarian.net/236282834/libreadline6_6.3-8ubuntu2_${KERNEL_TYPE}.${APP_EXT}
sudo gdebi -n /tmp/libreadline6-dev.${APP_EXT}
sudo gdebi -n /tmp/libreadline6.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install FriCAS computer algebra system from package
APP_NAME=FriCAS
APP_GUI_NAME="Computer algebra system."
APP_VERSION=1.3.3
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo tar -C / -xvjf /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install LinSSID Qt-based GUI wireless network scanner from Debian package
APP_NAME=LinSSID
APP_GUI_NAME="Qt-based GUI wireless network scanner."
APP_VERSION=3.6-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Devdom shell script to automate generating Apache virtual hosts from Debian package
APP_NAME=Devdom
APP_GUI_NAME="Shell script to automate generating Apache virtual hosts."
APP_VERSION=N/A
APP_EXT=deb
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/angela-d/${APP_NAME,,}/raw/master/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install PDF Chain graphical user interface for the PDF Toolkit (PDFtk) from source
APP_NAME=PDFChain
APP_GUI_NAME="Graphical user interface for the PDF Toolkit (PDFtk)."
APP_VERSION=0.4.4.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgtkmm-3.0-dev
# Install PDFtk
# PDFtk removed from repositories for Ubuntu 18.04 (Bionic Beaver), so we must install from Ubunutu 17.10 (Artful Aardvark) files in that case.  See these articles for details:
# https://ubuntuforums.org/showthread.php?t=2390293
# https://askubuntu.com/questions/1028522/how-can-i-install-pdftk-in-ubuntu-18-04-bionic
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(bi)$ ]]; then
	sudo apt-get install -y gcc-6-base
	cd /tmp
	curl -o /tmp/libgcj-common.deb -J -L http://mirrors.kernel.org/ubuntu/pool/main/g/gcc-defaults/libgcj-common_6.4-3ubuntu1_all.deb
	sudo gdebi -n /tmp/libgcj-common.deb
	curl -o /tmp/libgcj17.deb -J -L http://mirrors.kernel.org/ubuntu/pool/main/g/gcc-6/libgcj17_6.4.0-8ubuntu1_amd64.deb
	sudo gdebi -n /tmp/libgcj17.deb
	curl -o /tmp/pdftk.deb -J -L http://mirrors.kernel.org/ubuntu/pool/universe/p/pdftk/pdftk_2.02-4build1_amd64.deb
	sudo gdebi -n /tmp/pdftk.deb
else
	sudo apt-get install -y pdftk
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd ${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install MindForger notepad and Markdown editor/IDE with built-in preview from Debian package
APP_NAME=MindForger
APP_GUI_NAME="Notepad and Markdown editor/IDE with built-in preview."
APP_VERSION=2.0.0
APP_EXT=deb
FILE_NAME=debian-10-buster--${APP_NAME,,}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install MindRaider cross-platform, Java-based notepad, PIM, and outliner from package
APP_NAME=MindRaider
APP_GUI_NAME="Cross-platform, Java-based notepad, PIM, and outliner."
APP_VERSION=15.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-allplatforms-release
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/* /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/bin/${APP_NAME,,}.sh
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}/bin
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/bin:\$PATH; export PATH
/opt/${APP_NAME,,}/bin/${APP_NAME,,}.sh "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}/bin
Exec=/usr/local/bin/${APP_NAME,,} "\$1"
Icon=/opt/${APP_NAME,,}/programIcon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories
Keywords=Editor;PIM;Outliner;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install BackDrop Java-based image editor for multi-monitor wallpaper creation from package
APP_NAME=BackDrop
APP_GUI_NAME="Cross-platform, Java-based image editor for multi-monitor wallpaper creation."
APP_VERSION=v1-0
APP_EXT=jar
FILE_NAME=${APP_NAME}-Linux-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.${APP_EXT} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}.${APP_EXT} "\$1"
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Graphics;Accessories;
Keywords=Editor;Wallpaper;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Battle for Wesnoth high-fantasy themed adventure game from source
APP_NAME=Wesnoth
APP_GUI_NAME="High-fantasy themed adventure game."
APP_VERSION=1.19.12
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y cmake libboost-all-dev libsdl2-dev libsdl2-ttf-dev libsdl2-mixer-dev libsdl2-image-dev libfontconfig1-dev libcairo2-dev libpango1.0-dev libpangocairo-1.0-0 libvorbis-dev libvorbisfile3 libbz2-dev libssl-dev libreadline-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/bin -DENABLE_NLS=0 && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install WAV Audio Compressor from source
APP_NAME=Compressor
APP_GUI_NAME="Command-line WAV audio compressor."
APP_VERSION=0.30
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION//./}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
gcc compress.c -o compress && sudo mv compress /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Piskvorky cross-platform, Qt-based Gomoku game from package
APP_NAME=Piskvorky
APP_GUI_NAME="Cross-platform, Qt-based Gomoku game."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME}Linux
sudo apt-get install -y qt5-default
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}2/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/*${APP_NAME,,}*/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}2
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}2
Icon=/opt/${APP_NAME,,}/data/img/xo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;Games;
Keywords=Gomoku;Puzzle;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install bashj utility to allow use of native Java code in Bash shell scripts from package
# http://fil.gonze.org/wikiPG/index.php/Project_bashj_:_a_bash_mutant_with_java_support
APP_NAME=bashj
APP_GUI_NAME="Utility to allow use of native Java code in Bash shell scripts."
APP_VERSION=0.999
APP_EXT=jar
FILE_NAME=${APP_NAME,,}Install-${APP_VERSION}
sudo apt-get install -y openjdk-9-jdk  # Java 9 or later required!
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -m=777 /var/lib/bashj/
mv /tmp/${FILE_NAME}.${APP_EXT} /var/lib/bashj/
cd /var/lib/bashj/
jar xvf ./${FILE_NAME}.${APP_EXT}
chmod +x ./bashjInstall
sudo ./bashjInstall
# Add configuration settings to .bashrc
echo '# Initialize bashj extensions' >> $HOME/.bashrc
echo '. jsbInit && jsbStart' >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Query Light Java/JDBC-based Oracle database client from package
# https://github.com/milind-brahme/query-light
APP_NAME=QueryLight
APP_GUI_NAME="Java/JDBC-based Oracle database client."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=runsql_anony
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/query-light-light-orcl-client/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT} "\$1"
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;Accessories;
Keywords=Database;Oracle;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Zippy IP Scanner cross-platform Python/Qt-based GUI IP scanner from package
# https://github.com/swprojects/Zippy-Ip-Scanner
APP_NAME=Zippy-IP-Scanner
APP_GUI_NAME="Cross-platform Python/Qt-based GUI IP scanner."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=N/A
sudo pip3 install ${APP_NAME,,}

# Install RecordEditor Java-based, GUI CSV/XML file editor from package
# https://github.com/milind-brahme/query-light
APP_NAME=RecordEditor
APP_GUI_NAME="Java-based, GUI CSV/XML file editor."
APP_VERSION=0.99.3
APP_EXT=zip
FILE_NAME=${APP_NAME}_USB_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/record-editor/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME}
sudo mv /tmp/${FILE_NAME}/${APP_NAME}_USB/* /opt/${APP_NAME}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME}
PATH=/opt/${APP_NAME}:\$PATH; export PATH
sh /opt/${APP_NAME}/${APP_NAME}.sh "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME}
Exec=/usr/local/bin/${APP_NAME,,} "\$1"
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;Accessories;
Keywords=Database;Java;CSV;XML
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install tmount minimalist block device/removable media mounting utility from source
APP_NAME=tmount
APP_GUI_NAME="Minimalist block device/removable media mounting utility."
APP_VERSION=0.0.10
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y qtbase5-dev qt5-qmake qt5-default qttools5-dev-tools udevil libudev-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/abwaldner/${APP_NAME}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
qtchooser -run-tool=qmake -qt=5 ${APP_NAME}.pro && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Y PPA Manager GUI management utility of PPA repositories from PPA
APP_NAME=Y-PPA-Manager
sudo add-apt-repository -y ppa:webupd8team/${APP_NAME,,}
sudo apt-get update
sudo apt-get install -y ${APP_NAME,,}

# Install OpenTodoList cross-platform, Qt-based "To Do" list and task management from AppImage
APP_NAME=OpenTodoList
APP_GUI_NAME="Cross-platform, Qt-based \"To Do\" list and task management."
APP_VERSION=3.47.0
APP_EXT=AppImage
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mhoeher/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=ToDo;Productivity;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install WordPress Desktop application from package
APP_NAME=WordPress-Desktop
APP_GUI_NAME="Desktop editor for blogging on WordPress.com."
APP_VERSION=3.3.0
APP_EXT=deb
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://public-api.wordpress.com/rest/v1.1/desktop/linux/download?type=${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install ElCalc minimalist cross-platform desktop calculator built with Electron from package
APP_NAME=ElCalc
APP_GUI_NAME="Minimalist cross-platform desktop calculator built with Electron."
APP_VERSION=6.1.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Enpass cross-platform desktop password manager from PPA
APP_NAME=Enpass
curl -sL https://dl.sinew.in/keys/enpass-linux.key | sudo apt-key add -
echo "deb http://repo.sinew.in/ stable main" | sudo tee /etc/apt/sources.list.d/enpass.list
sudo apt-get update && sudo apt-get install -y enpass

# Install Waterfox cross-platform web browser based on Firefox from package
APP_NAME=Waterfox
APP_GUI_NAME="Cross-platform web browser based on Firefox."
APP_VERSION=G6.0.20
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.en-US.linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/WaterfoxCo/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* /opt
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/browser/chrome/icons/default/default128.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Network;Networking;
Keywords=Firefox;Browser;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Pixelitor cross-platform, Java-based image editor from package
APP_NAME=Pixelitor
APP_GUI_NAME="Cross-platform, Java-based image editor."
APP_VERSION=4.3.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.${APP_EXT} "\$1"
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Graphics;Accessories;
Keywords=Graphics;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Vidiot cross-platform non-linear video editor from package
APP_NAME=Vidiot
APP_GUI_NAME="Cross-platform non-linear video editor."
APP_VERSION=0.3.24
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}-win64
source /etc/lsb-release
# If Ubuntu version is above 17.10 (Artful), then we install 17.04 version of libva1.
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(bi)$ ]]; then
	curl -o /tmp/libva1.deb -J -L http://mirrors.cat.pdx.edu/ubuntu/pool/universe/libv/libva/libva1_1.8.3-2_amd64.deb
	sudo gdebi -n /tmp/libva1.deb
else
	sudo apt-get install -y libva1
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Java Open Chess cross-platform, Java-based chess client/engine from package
APP_NAME=jChess
APP_GUI_NAME="Cross-platform, Java-based chess client/engine."
APP_VERSION=1.5
APP_EXT=zip
FILE_NAME=joChess-${APP_VERSION}
curl -o /tmp/${APP_NAME,,}.${APP_EXT} -J -L https://downloads.sourceforge.net/javaopenchess/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${APP_NAME,,}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}/${APP_NAME}-${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}.jar
Icon=/opt/${APP_NAME,,}/theme/default/images/King-W100.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;Games;
Keywords=Chess;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Modules environment variable configuration/management utility from source
APP_NAME=Modules
APP_GUI_NAME="Environment variable configuration/management utility."
APP_VERSION=4.1.3
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y tcl8.6-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Project GoldStars Calculator cross-platform, Java-based command-line and GUI calculators from package
APP_NAME="Project GoldStars Calculator"
APP_GUI_NAME="Cross-platform, Java-based command-line and GUI calculators."
APP_VERSION=3.2
APP_EXT=jar
FILE_NAME=${APP_NAME// /.}.S.${APP_VERSION}.Final.Version
DIR_NAME=${APP_NAME,,// /}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ShakeelAlibhai/${APP_NAME// /}S/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${DIR_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${DIR_NAME,,}
cat > /tmp/${DIR_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${DIR_NAME,,}
Exec=java -jar /opt/${DIR_NAME,,}/${FILE_NAME}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Education;
Keywords=Math;Calculator;
EOF
sudo mv /tmp/${DIR_NAME,,}.desktop /usr/share/applications/
FILE_NAME=${FILE_NAME//.S./.C.}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ShakeelAlibhai/${APP_NAME// /}S/releases/download/v${APP_VERSION// Update /.}/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${DIR_NAME,,}
cat > /tmp/${DIR_NAME,,} << EOF
#! /bin/sh
cd /opt/${DIR_NAME,,}
PATH=/opt/${DIR_NAME,,}:\$PATH; export PATH
java -jar /opt/${DIR_NAME,,}/${FILE_NAME}.jar "\$1"
cd $HOME
EOF
sudo mv /tmp/${DIR_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install dred fast, minimalist cross-platform, GTK+-based text editor from source
APP_NAME=dred
APP_GUI_NAME="Environment variable configuration/management utility."
APP_VERSION=0.4.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgtk-3-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mackron/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
cc ./source/dred/dred_main.c -o dred `pkg-config --cflags --libs gtk+-3.0` -lm -ldl
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo mv /tmp/${FILE_NAME}/resources/images/logo.png /usr/local/share/pixmaps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;Programming;
Keywords=Text;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Crosswire SWORD Bible research and study platform from source
APP_NAME=SWORD
APP_GUI_NAME="Bible research and study platform."
APP_VERSION=1.9.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y automake libtool libclucene-dev libcurl4-openssl-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://crosswire.org/ftpmirror/pub/sword/source/v1.9/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./autogen.sh && ./usrinst.sh && make && sudo make install && sudo make install_config
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Bibletime cross-platform Bible study software using Crosswire SWORD toolkit from source
# Crosswire SWORD toolkit must be install FIRST; see above.
APP_NAME=Bibletime
APP_GUI_NAME="Cross-platform Bible study software using Crosswire SWORD toolkit."
APP_VERSION=3.0.3
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y qt5-default cmake libclucene-dev libqt5svg5-dev libqt5webkit5-dev qttools5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
# Update minimum version of Qt library to 5.5 for CMake
UPDATE_STRING=s/REQUIRED_QT_VERSION 5.9/REQUIRED_QT_VERSION 5.5/g
sudo sed -i ${UPDATE_STRING} /tmp/${FILE_NAME}/CMakeLists.txt
mkdir -p ./build && cd ./build
cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..
make clean && make && sudo make -j4 install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install CloudFiler cross-platorm, Python-based Amazon S3/Google Cloud client from package
APP_NAME=CloudFiler
APP_GUI_NAME="Cross-platform, Python-based Amazon S3/Google Cloud client."
APP_VERSION=1.3
APP_EXT=zip
FILE_NAME=${APP_NAME}Source_${APP_VERSION}
sudo apt-get install -y python-wxgtk3.0 python-wxtools wx3.0-i18n python-boto python-keyring python-passlib
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/cloud-filer/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo ./install.sh
sudo rm -rf $HOME/.local/share/applications/${APP_NAME,,}.desktop
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /usr/local/${APP_NAME}
PATH=/usr/local/${APP_NAME}:\$PATH; export PATH
python /usr/local/${APP_NAME}/python/${APP_NAME}.py
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${DIR_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/${APP_NAME}
Exec=python /usr/local/${APP_NAME}/python/${APP_NAME}.py
Icon=/usr/local/${APP_NAME}/python/images/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;
Keywords=Amazon;S3;Google;Cloud;
EOF
sudo mv /tmp/${DIR_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Pomolectron cross-platform, Electron-based desktop Pomodoro application from package
APP_NAME=Pomolectron
APP_GUI_NAME="Cross-platform, Electron-based desktop Pomodoro application."
APP_VERSION=1.1.0
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=ia32
fi
FILE_NAME=${APP_NAME}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/amitmerchant1990/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${APP_NAME}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Pomodoro;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install aclh Python-based asynchronous command-line HTTP client via PIP
APP_NAME=aclh
APP_GUI_NAME="Cross-platform, Python-based asynchronous command-line HTTP client."
APP_VERSION=N/A
APP_EXT=N/A
sudo pip3 install git+https://github.com/kanishka-linux/aclh.git

# Install WebComics minimalist PyQt-based desktop tool for reading web comics from package
APP_NAME=WebComics
APP_GUI_NAME="Minimalist PyQt-based desktop tool for reading web comics."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install python3-pyqt5
sudo pip3 install pillow bs4
sudo pip3 install git+https://github.com/kanishka-linux/vinanti.git
cd /tmp
git clone https://github.com/kanishka-linux/${APP_NAME}
cd /tmp/${APP_NAME}
python3 setup.py sdist
cd /tmp/${APP_NAME}/dist
sudo pip3 install ${APP_NAME}*
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Yosoro cross-platform, Electron-based desktop notepad with Markdown support and One Drive cloud backup from package
APP_NAME=Yosoro
APP_GUI_NAME="Cross-platform, Electron-based desktop notepad with Markdown support and One Drive cloud backup."
APP_VERSION=1.1.7
APP_EXT=zip
FILE_NAME=${APP_NAME}-linux-x64-deb-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/IceEnd/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}*.deb
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install Meld GUI file diff/merge utility from source
APP_NAME=Meld
APP_GUI_NAME="Cross-platform, file diff/merge utility."
APP_VERSION=3.22.2
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get build-dep -y meld python3-cairo-dev libgtksourceview-3.0-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://fossies.org/linux/misc/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 setup.py install --prefix=/usr/local
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Orange Calculator minimalist Java-based calculator from Debian package
# http://www.wagemaker.co.uk/
APP_NAME=OrangeCalc
APP_GUI_NAME="Minimalist Java-based calculator."
APP_VERSION=1.5.8
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/orangecalculator/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install Small Text Pad minimalist Java-based notepad from Debian package
# http://www.wagemaker.co.uk/
APP_NAME=SmallTextPad
APP_GUI_NAME="Minimalist Java-based notepad."
APP_VERSION=1.4.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install UnNetHack Roguelike adventure game forked from NetHack from source
APP_NAME=UnNetHack
APP_GUI_NAME="Roguelike adventure game forked from NetHack."
APP_VERSION=5.1.0-20131208
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y flex bison libncursesw5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make -j4 install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install lf cross-platform, Go-based file manager for the shell/console from package
APP_NAME=lf
APP_GUI_NAME="Cross-platform, Go-based file manager for the shell/console."
APP_VERSION=r31
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/gokcehan/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Mokomaze SDL-based ball labyrinth puzzle game from source
APP_NAME=Mokomaze
APP_GUI_NAME="SDL-based ball labyrinth puzzle game."
APP_VERSION=0.7.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libjson-glib-dev libode-dev libsdl-gfx1.2-dev libsdl-ttf2.0-dev libsdl-image1.2-dev xsltproc autoconf libsdl1.2-dev librsvg2-dev libargtable2-dev libguichan-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./autogen.sh && ./configure && make && sudo make -j4 install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Semantik Python-based mind-mapping tool from Debian package
# https://waf.io/semantik.html
APP_NAME=Semantik
APP_GUI_NAME="Python-based mind-mapping tool."
APP_VERSION=1.0.4-24
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://waf.io/rpms/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install PDFBox Java-based, cross-platform command-line PDF manipulation application from package
APP_NAME=PDFBox
APP_GUI_NAME="Java-based, cross-platform command-line PDF manipulation application."
APP_VERSION=2.0.17
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-app-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://apache.osuosl.org/${APP_NAME,,}/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install MagiTerm cross-platform SDL2-based BBS SSH terminal from Debian package
# https://magickabbs.com/index.php/magiterm/
APP_NAME=MagiTerm
APP_GUI_NAME="Cross-platform SDL2-based BBS SSH terminal."
APP_VERSION=0.9.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
source /etc/lsb-release
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/apamment/xUbuntu_${DISTRIB_RELEASE}/${KERNEL_TYPE}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install Ket cross-platform, Java-based interactive math editor with LaTeX and HTML export from package
APP_NAME=Ket
APP_GUI_NAME="Cross-platform, Java-based interactive math editor with LaTeX and HTML export."
APP_VERSION=0.7.01
APP_EXT=jar
FILE_NAME=${APP_NAME,,}${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Development;Programming;
Keywords=Math;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install gcdemu GTK+-based CD emulation utility from PPA
APP_NAME=gcdemu
APP_GUI_NAME="GTK+-based CD emulation utility."
APP_VERSION=3.2.4
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo add-apt-repository -y ppa:cdemu/ppa
sudo apt-get update
sudo apt-get install -y gcdemu cdemu-daemon cdemu-client

# Install Fresh Memory cross-platform flash card learning tool with Spaced Repetition method from Debian package
# http://fresh-memory.com/
APP_NAME=FreshMemory
APP_GUI_NAME="Cross-platform flash card learning tool with Spaced Repetition method."
APP_VERSION=1.5.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install Sohag Builder (formerly Sohag Developer) cross-platform tool for building Qt/C++ and PHP/Laravel database applications from same codebase from package
# http://sohagdeveloper.com/
APP_NAME="Sohag Builder"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform tool for building Qt/C++ and PHP/Laravel database applications from same codebase."
APP_VERSION=1.1.1
APP_EXT=tar.xz
FILE_NAME=${_APP_NAME}${APP_VERSION}-Gnu-Linux-X86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/sohag-developer/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/p/sohag-developer/icon
https://a.fsdn.com/allura/p/sohag-developer/icon
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* /opt
sudo cp /tmp/${_APP_NAME}.png /opt/${_APP_NAME}
sudo chmod -R 755 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
${_APP_NAME}.sh
cd $HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Qt;PostgreSQL;C++;PHP;Laravel;
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${_APP_NAME}*

# Install Clippy cross-platform, Electron-based clipboard manager with persistent history from AppImage
APP_NAME=Clippy
APP_GUI_NAME="Cross-platform, Electron-based clipboard manager with persistent history."
APP_VERSION=1.5.0
APP_EXT=AppImage
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ikouchiha47/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Clipboard;Productivity;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Parlatype GTK+-based audio player for transcription from source
APP_NAME=Parlatype
APP_GUI_NAME="GTK+-based audio player for transcription."
APP_VERSION=4.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential automake autoconf intltool libgirepository1.0-dev libgladeui-dev gtk-doc-tools yelp-tools libgtk-3-dev libgtk-3-0 libgstreamer1.0-dev libgstreamer1.0-0 libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly libreoffice-script-provider-python itstool
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/gkarsay/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make -j4 install
echo '/usr/local/lib' | sudo tee -a /etc/ld.so.conf.d/${APP_NAME,,}.conf > /dev/null && sudo ldconfig
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Klein minimalist console-based text editor from source
APP_NAME=Klein
APP_GUI_NAME="Minimalist console-based text editor."
APP_VERSION=1.1-src-11-2018
APP_EXT=tar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libncurses-dev libpth-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/mycced/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
make && sudo make -j4 install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install gcsf FUSE file system based on Google Drive from package
APP_NAME=gcsf
APP_GUI_NAME="FUSE file system based on Google Drive."
APP_VERSION=0.2.3
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-${ARCH_TYPE}-unknown-linux-gnu
sudo apt-get install -y fuse
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/harababurel/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Keepboard cross-platform, Java-based clipboard manager from package
APP_NAME=Keepboard
APP_GUI_NAME="Cross-platform, Java-based clipboard manager."
APP_VERSION=5.8
APP_EXT=zip
FILE_NAME=${APP_NAME}_Linux_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/jar.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/jar.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Clipboard;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install NumericalChameleon cross-platform, Java-based unit converter/calculator from Debian package
# http://numericalchameleon.net/en/index.html
APP_NAME=NumericalChameleon
APP_GUI_NAME="Cross-platform, Java-based unit converter/calculator."
APP_VERSION=2.1.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/numchameleon/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install TreeSheets Free-Form Data Organizer (Hierarchical Spreadsheet) from package
APP_NAME=TreeSheets
APP_GUI_NAME="Free-Form Data Organizer (Hierarchical Spreadsheet)."
APP_VERSION=N/A
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux64
fi
FILE_NAME=${APP_NAME,,}_${ARCH_TYPE}
curl -o /tmp/libpng12.deb -J -L http://ftp.osuosl.org/pub/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/libpng12.deb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://strlen.com/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/TS/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/treesheets
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/treesheets "\$1"
Icon=/opt/${APP_NAME,,}/images/icon32.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=Spreadsheet;Notepad;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Reversee Electron-based reverse-proxy web debugger from package
APP_NAME=Reversee
APP_GUI_NAME="Electron-based reverse-proxy web debugger."
APP_VERSION=0.0.16
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.reversee.ninja/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=HTTP;Proxy;Testing;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install IceHRM web-based Human Resources Management (HRM) tool
APP_NAME=IceHRM
APP_GUI_NAME="Web-based Human Resources Management (HRM)"
APP_VERSION=24.0.0
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}.OS
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n ${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+x ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+r ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/app/install/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/web/images/logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=HRM;Management;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/

# Install ODrive cross-platform, Electron-based GUI for Google Drive from Debian package
APP_NAME=ODrive
APP_GUI_NAME="Cross-platform, Electron-based GUI for Google Drive."
APP_VERSION=0.2.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/liberodark/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install TEA Qt-based text editor from source
APP_NAME=TEA
APP_GUI_NAME="Cross-platform Qt-based text editor."
APP_VERSION=63.3.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y qt5-default qt5-qmake libpoppler-qt5-dev libhunspell-dev cmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/psemiletov/tea-qt/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-qt-${APP_VERSION}
mkdir -p build && cd build
cmake .. && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Sielo Qt- and WebEngine-based web browser from AppImage
APP_NAME=Sielo
APP_GUI_NAME="Qt- and WebEngine-based web browser."
APP_VERSION=1.17.14
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}Browser/${APP_NAME,,}-legacy/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME}Browser/${APP_NAME,,}-legacy/master/icons/other/aboutsielo.png
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;
Keywords=Web;Browser;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Slap Sublime Text-style JavaScript-based console text editor from source
APP_NAME=Slap
APP_GUI_NAME="Sublime Text-style JavaScript-based console text editor."
APP_VERSION=N/A
APP_EXT=tar.gz
curl -sL https://raw.githubusercontent.com/slap-editor/slap/master/install.sh | sh
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Universal Tag Finder cross-platform, Java-based HTML tag file search utility from Debian package
APP_NAME=Universal-Tag-Finder
APP_GUI_NAME="Cross-platform, Java-based HTML tag file search utility."
APP_VERSION=1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install Gopherus cross-platform console-mode gopher client from source
APP_NAME=Gopherus
APP_GUI_NAME="Cross-platform console-mode gopher client."
APP_VERSION=1.2.2
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libsdl2-dev libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
cp ./Makefile.lin ./Makefile
make -j8
# No 'make install' target, so copy files manually.
sudo cp ./${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Elegant Calculator Java Swing-based minimalist calculator from package
APP_NAME=Calculator
APP_GUI_NAME="Java Swing-based minimalist calculator."
APP_VERSION=V3.5
APP_EXT=jar
FILE_NAME=${APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/vasilivich0/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Elegant Calculator
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Calculator;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Mindmapp Electron-based desktop mind mapping tool from Debian package
APP_NAME=Mindmapp
APP_GUI_NAME="Electron-based desktop mind mapping tool."
APP_VERSION=0.7.9
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install PharTools PHP CLI utility for managing phar (PHP ARchive) files from source
APP_NAME=PharTools
APP_GUI_NAME="PHP CLI utility for managing phar (PHP ARchive) files."
APP_VERSION=v2.1
APP_EXT=zip
FILE_NAME=${APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/EvolSoft/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME}/${APP_NAME,,}.sh /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}.sh
sudo ln -f -s /usr/local/bin/${APP_NAME,,}.sh /usr/local/bin/${APP_NAME,,}
sudo sed -i 's@;phar.readonly = On@phar.readonly = Off@g' /etc/php/5.6/cli/php.ini
sudo sed -i 's@;phar.readonly = On@phar.readonly = Off@g' /etc/php/7.0/cli/php.ini
sudo sed -i 's@;phar.readonly = On@phar.readonly = Off@g' /etc/php/7.1/cli/php.ini
sudo sed -i 's@;phar.readonly = On@phar.readonly = Off@g' /etc/php/7.2/cli/php.ini
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install MyPGP Java Swing-based GUI for PGP encrypting/signing from package
APP_NAME=MyPGP
APP_GUI_NAME="Java Swing-based GUI for PGP encrypting/signing."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME}
sudo apt-get install -y libbcprov-java libbcpg-java
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/my-pgp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=PGP;Security;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Virtual Celestial Globe Java-based planetarium software from package
APP_NAME="Virtual Celestial Globe"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java-based planetarium software."
APP_VERSION=1.2.5
APP_EXT=jar
FILE_NAME=${APP_NAME// /}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/p/virtualcelestialglobe/icon?1427488845
sudo mkdir -p /opt/${_APP_NAME}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /opt/${_APP_NAME}
sudo cp /tmp/${_APP_NAME}.png /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
java -Xms128m -Xmx512m -classpath /opt/${_APP_NAME}/${FILE_NAME}.${APP_EXT} com.main.GlobeFrame
cd $HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=java -Xms128m -Xmx512m -classpath /opt/${_APP_NAME}/${FILE_NAME}.${APP_EXT} com.main.GlobeFrame
Icon=/opt/${_APP_NAME}/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Science;
Keywords=Stars;Planetarium;
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${FILE_NAME}*

# Install Safe File Manager Java-based minimalist file manager from package
APP_NAME=SafeFileManager
APP_GUI_NAME="Java-based minimalist file manager."
APP_VERSION=1.1
APP_EXT=jar
FILE_NAME=${APP_NAME}_v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.mindbytez.com/sfm/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=File;Manager;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install browsh cross-platform modern browser for shell/console from Debian package
APP_NAME=browsh
APP_GUI_NAME="Cross-platform modern browser for shell/console."
APP_VERSION=1.8.3
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_linux_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/browsh-org/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install ZDT (Zhongwen Development Tool) Java-based flash card utility for learning Mandarin Chinese from package
APP_NAME=ZDT
APP_GUI_NAME="Java-based flash card utility for learning Mandarin Chinese."
APP_VERSION=1.0.3
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -f -s /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/icon.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;
Keywords=Language;Chinese;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install eLogSim digital circuit simulator from package
APP_NAME=eLogSim
APP_GUI_NAME="Digital circuit simulator."
APP_VERSION=3.0.6
APP_EXT=zip
FILE_NAME=My${APP_NAME}_${APP_VERSION//./}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo mv /opt/${APP_NAME,,}/${APP_NAME} /opt/${APP_NAME,,}/${APP_NAME}.app
sudo mv /opt/${APP_NAME,,}/${APP_NAME}.app/* /opt/${APP_NAME,,}
sudo rm -rf /opt/${APP_NAME,,}/${APP_NAME}.app /opt/${APP_NAME,,}/${APP_NAME}.exe
sudo ln -f -s /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Electronics;
Keywords=Electronics;Digital;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Rodent GTK+-based GUI file manager from source
APP_NAME=Rodent
APP_GUI_NAME="GTK+-based GUI file manager."
APP_VERSION=5.3.16.3
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgtk2.0-dev libgtk-3-dev automake libzip-dev librsvg2-dev libxml2-dev libmagic-dev
TEMP_FILE_NAME=libdbh2-5.0.22
TEMP_APP_EXT=tar.gz
curl -o /tmp/${TEMP_FILE_NAME}.${TEMP_APP_EXT} -J -L https://downloads.sourceforge.net/dbh/${TEMP_FILE_NAME}.${TEMP_APP_EXT}
cd /tmp
dtrx -n /tmp/${TEMP_FILE_NAME}.${TEMP_APP_EXT}
cd /tmp/${TEMP_FILE_NAME}
./autogen.sh && ./configure && make && sudo make install
TEMP_FILE_NAME=libtubo0_5.0.14-1_${KERNEL_TYPE}
TEMP_APP_EXT=deb
curl -o /tmp/${TEMP_FILE_NAME}.${TEMP_APP_EXT} -J -L https://downloads.sourceforge.net/xffm/${TEMP_FILE_NAME}.${TEMP_APP_EXT}
sudo gdebi -n /tmp/${TEMP_FILE_NAME}.${TEMP_APP_EXT}
TEMP_FILE_NAME=libtubo0-dev_5.0.14-1_${KERNEL_TYPE}
TEMP_APP_EXT=deb
curl -o /tmp/${TEMP_FILE_NAME}.${TEMP_APP_EXT} -J -L https://downloads.sourceforge.net/xffm/${TEMP_FILE_NAME}.${TEMP_APP_EXT}
sudo gdebi -n /tmp/${TEMP_FILE_NAME}.${TEMP_APP_EXT}
TEMP_FILE_NAME=librfm5-5.3.16.4
TEMP_APP_EXT=tar.bz2
curl -o /tmp/${TEMP_FILE_NAME}.${TEMP_APP_EXT} -J -L https://downloads.sourceforge.net/xffm/${TEMP_FILE_NAME}.${TEMP_APP_EXT}
cd /tmp
dtrx -n /tmp/${TEMP_FILE_NAME}.${TEMP_APP_EXT}
cd /tmp/${TEMP_FILE_NAME}
./autogen.sh && ./configure && make && sudo make install && sudo ldconfig
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/xffm/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./autogen.sh && ./configure && make && sudo make install
sudo cp /tmp/${FILE_NAME}/apps/rodent-fm/${APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install PMan desktop media player and media management tool from Debian package
APP_NAME=PMan
APP_GUI_NAME="Desktop media player and media management tool."
APP_VERSION=0.8.9
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/pman-player/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install OpenProject from PPA
APP_NAME=OpenProject
APP_VERSION=N/A
APP_EXT=N/A
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
sudo apt-get install -y apt-transport-https
wget -qO- https://dl.packager.io/srv/opf/openproject/key | sudo apt-key add -
sudo wget -O /etc/apt/sources.list.d/openproject.list https://dl.packager.io/srv/opf/openproject/stable/10/installer/ubuntu/18.04.repo
sudo apt-get update
sudo apt-get install -y openproject
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
sudo openproject configure

# Install Rachota Java-based minimalist desktop time-tracking tool from package
APP_NAME=Rachota
APP_GUI_NAME="Java-based minimalist desktop time-tracking tool."
APP_VERSION=2.4
APP_EXT=jar
FILE_NAME=${APP_NAME,,}_${APP_VERSION//./}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Time;Tracking;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Password Safe cross-platform password manager from Debian package
APP_NAME=PasswordSafe
APP_GUI_NAME="Cross-platform password manager."
APP_VERSION=1.18
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-ubuntu22-${APP_VERSION}-amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}* /tmp/libqrencode3.deb

# Install Paperboy shell/console-based PDF management utility from package
APP_NAME=PBoy
APP_GUI_NAME="Shell/console-based PDF management utility."
APP_VERSION=1.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/2mol/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Anki flash card utility from package
APP_NAME=Anki
APP_GUI_NAME="Flash card utility."
APP_VERSION=2.0.52
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://apps.ankiweb.net/downloads/current/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}
sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install BWPing network ping utility to measure bandwidth between hosts based on ICMP echo request/echo reply mechanism from source
APP_NAME=BWPing
APP_GUI_NAME="Network ping utility based on ICMP echo request/echo reply mechanism."
APP_VERSION=2.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Ngraph-GTK tool for creating 2D graphs with support for exporting to PostScript, SVG, PNG or PDF from source
APP_NAME=Ngraph-GTK
APP_GUI_NAME="Tool for creating 2D graphs with support for exporting to PostScript, SVG, PNG or PDF."
APP_VERSION=6.08.07
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgtk-3-dev automake libzip-dev librsvg2-dev libxml2-dev libmagic-dev libgtksourceview-3.0-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install && sudo ldconfig
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install XFE GUI file manager from source
APP_NAME=XFE
APP_GUI_NAME="GUI file manager."
APP_VERSION=2.0.1
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libcups2-dev libcupsimage2-dev libfox-1.6-0 libfox-1.6-dev libjbig-dev libjpeg-dev libjpeg-turbo8-dev libjpeg8-dev liblzma-dev libtiff-dev libtiff5-dev libtiffxx5 libxcb-util-dev intltool libx11-xcb-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install && sudo ldconfig
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install WordTsar GTK-based WordStar text editor clone from AppImage
APP_NAME=WordTsar
APP_GUI_NAME="GTK-based WordStar text editor clone."
APP_VERSION=0.3.719
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/wordtsar/icon?1621629052
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Word;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install QtFM lightweight desktop-independent GUI file manager from source
APP_NAME=QtFM
APP_GUI_NAME="Lightweight desktop-independent GUI file manager."
APP_VERSION=6.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}%20${APP_VERSION}
sudo apt-get install -y qt5-qmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/qt-file-manager/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/*${APP_NAME,,}*
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 CONFIG+=release PREFIX=/usr/local .. && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install myAgilePomodoro Java-based Pomodoro timer from package
APP_NAME=myAgilePomodoro
APP_GUI_NAME="Java-based Pomodoro timer."
APP_VERSION=4.2.0
APP_EXT=jar
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/mypomodoro/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;Accessories;
Keywords=Time;Tracking;Agile;Pomodoro;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Mu Editor Python text editor via Pip
APP_NAME=mu-editor
sudo pip3 install shortcut
sudo pip3 install ${APP_NAME}

# Install NoteCase GTK-based hierarchical notepad/outliner from Debian package
APP_NAME=NoteCase
APP_GUI_NAME="GTK-based hierarchical notepad/outliner."
APP_VERSION=1.9.8
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
sudo apt-get install -y libgnomevfs2-0 libgtksourceview2.0-0
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install BOUML Java-based UML modeling and code generation tool from PPA
APP_NAME=BOUML
APP_GUI_NAME="Java-based UML modeling and code generation tool."
APP_VERSION=N/A
APP_EXT=N/A
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (tr|ut|vi|wi)$ ]]; then  # 14.04, 14.10, 15.04, 15.10
	DISTRIB_CODENAME=trusty
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (pr|qu|ra|sa)$ ]]; then  # 13.10, 13.04, 12.10, 12.04
	DISTRIB_CODENAME=precise
fi
wget -q https://www.bouml.fr/bouml_key.asc -O- | sudo apt-key add -
echo "deb https://www.bouml.fr/apt/"${DISTRIB_CODENAME}" "${DISTRIB_CODENAME}" free" | sudo tee -a /etc/apt/sources.list
sudo apt-get update -y
sudo apt-get install -y bouml

# Install Cmajor C#-style programming language and IDE from package
APP_NAME=Cmajor
APP_GUI_NAME="C#-style programming language and IDE."
APP_VERSION=4.2.0
APP_EXT=tar.bz2
source /etc/lsb-release
if [[ "${DISTRIB_CODENAME:0:2}" =~ (tr|ut|vi|wi|xe|ya|ze|ar)$ ]]; then  # 14.04, 14.10, 15.04, 15.10, 16.04, 16.10, 17.04, 17.10
	DISTRIB_RELEASE=14.04
	APP_VERSION=3.1.0
elif [[ "${DISTRIB_CODENAME:0:2}" =~ (bi|co|di|eo)$ ]]; then
	DISTRIB_RELEASE=18.04
    APP_VERSION=3.6.0
else
	DISTRIB_RELEASE=20.04
    APP_VERSION=4.0.0
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-ubuntu-${DISTRIB_RELEASE}-x86_64-binaries
sudo apt-get install -y libboost-dev libboost-system-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/* /opt/${APP_NAME,,}
echo 'CMAJOR_ROOT=/opt/'${APP_NAME,,}'; export CMAJOR_ROOT;' >> $HOME/.bashrc
echo 'PATH=$PATH:$CMAJOR_ROOT/bin' >> $HOME/.bashrc
echo 'LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CMAJOR_ROOT/lib' >> $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install MicroPad Electron-based notepad with MarkDown support from Debian package
APP_NAME=MicroPad
APP_GUI_NAME="Electron-based notepad with MarkDown support."
APP_VERSION=3.30.6
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/Electron/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install TimeSlotTracker Java-based minimalist time tracking tool from Debian package
APP_NAME=TimeSlotTracker
APP_GUI_NAME="Java-based minimalist time tracking tool."
APP_VERSION=1.3.23
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install HHDB SQL Admin Java-based GUI PostgreSQL client from package
APP_NAME="HHDB SQL Admin"
_APP_NAME=hhdb_csadmin
APP_GUI_NAME="Java-based GUI PostgreSQL client."
APP_VERSION=7.0_2022-01-06_06_20_14
APP_EXT=zip
FILE_NAME=HHDBCS_V${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/hhdb-admin/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sed -i.bak 's@"language": "ZH"@"language": "EN"@g' /tmp/${FILE_NAME}/etc/default.json
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
sudo chmod -R 755 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
sh /opt/${_APP_NAME}/start_csadmin.sh
cd $HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/opt/${_APP_NAME}/start_csadmin.sh
Icon=/opt/${_APP_NAME}/etc/icon/shared/logo/logo_64.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Database;PostgreSQL;
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}* /tmp/HHDBCS*

# Install TabuVis Java-based interactive visualization of tabular data tool from package
APP_NAME=TabuVis
APP_GUI_NAME="Java-based interactive visualization of tabular data tool."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME} /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME}
PATH=/opt/${APP_NAME}:\$PATH; export PATH
java -jar /opt/${APP_NAME}/${APP_NAME}_64.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME}/${APP_NAME}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;Science;
Keywords=Data;Science;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install FromScratch Electron-based simple note-taking and "to do" tool from Debian package
APP_NAME=FromScratch
APP_GUI_NAME="Electron-based simple note-taking and \"to do\" tool."
APP_VERSION=1.4.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Kilian/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install VNote Vim-inspired note-taking application with MarkDown support from AppImage
APP_NAME=VNote
APP_GUI_NAME="Vim-inspired note-taking application with MarkDown support."
APP_VERSION=3.19.2
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-x64_v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/vnotex/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/vnotex/${APP_NAME,,}/master/pics/${APP_NAME,,}.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${FILE_NAME}.AppImage /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}.AppImage
sudo ln -s -f /usr/local/bin/${FILE_NAME}.AppImage /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Notepad;MarkDown;Vim;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Open Visual Traceroute Java-based GUI traceroute utility from Debian package
APP_NAME=OVTR
APP_GUI_NAME="Java-based GUI traceroute utility."
APP_VERSION=2.0.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_${KERNEL_TYPE}
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|bi)$ ]]; then  # 18.04
    # Install gksu package from 17.10 (Artful)
    # https://askubuntu.com/questions/1030054/how-to-install-an-application-that-requires-gksu-package-on-ubuntu-18-04
    curl -o /tmp/libgksu2-0.${APP_EXT} -J -L http://ftp.osuosl.org/pub/ubuntu/pool/universe/libg/libgksu/libgksu2-0_2.0.13~pre1-9ubuntu2_${KERNEL_TYPE}.${APP_EXT}
    sudo gdebi -n /tmp/libgksu2-0.${APP_EXT}
    curl -o /tmp/gksu.${APP_EXT} -J -L http://ftp.osuosl.org/pub/ubuntu/pool/universe/g/gksu/gksu_2.0.2-9ubuntu1_${KERNEL_TYPE}.${APP_EXT}
    sudo gdebi -n /tmp/gksu.${APP_EXT}
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/openvisualtrace/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install Golden Scrabble multi-language GUI Scrabble crossword game from package
APP_NAME=GScrabble
APP_GUI_NAME="Multi-language GUI Scrabble crossword game."
APP_VERSION=0.1.5
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 ./setup.py install
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install FullSync Java-based data synchronization tool with support for S/FTP and scheduling from package
APP_NAME=FullSync
APP_GUI_NAME="Java-based data synchronization tool with support for S/FTP and scheduling."
APP_VERSION=0.10.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME}-${APP_VERSION}/* /opt/${APP_NAME,,}
sudo ln -f -s /opt/${APP_NAME,,}/${APP_NAME,,} /usr/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Backup;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install MiniPacman minimalist console Pacman using ASCII characters built with SFML from package
APP_NAME=MiniPacman
APP_GUI_NAME="Minimalist console Pacman using ASCII characters built with SFML."
APP_VERSION=30jul18
APP_EXT=tar.gz
FILE_NAME=mpac${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/pacman/* /opt/${APP_NAME,,}
sudo ln -f -s /opt/${APP_NAME,,}/pacman_gnu /usr/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install Elastic Notepad Java-based text editor with "intelligent" tab stops from package
APP_NAME=ElasticNotepad
APP_GUI_NAME="Java-based text editor with \"intelligent\" tab stops."
APP_VERSION=1.3.0
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/nickgravgaard/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Accessories;Development;Science;
Keywords=Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Wipe Free Space utility to securely erase free space from source
APP_NAME=WipeFreeSpace
APP_GUI_NAME="Utility to securely erase free space."
APP_VERSION=2.5.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libext2fs-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install && sudo ldconfig
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Wipe Free Space GUI 2 Java GUI for free space eraser from package
APP_NAME="Wipe Free Space GUI 2"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java GUI for free space eraser."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Disk;Management;Security;"
APP_VERSION=1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME// /}-${APP_VERSION}-bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME//gui2/}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://wipefreespace.sourceforge.io/img/wfs-icon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME// /}-${APP_VERSION}/* /opt/${_APP_NAME}
sudo cp /tmp/${_APP_NAME}.png /opt/${_APP_NAME}
sudo chmod -R 777 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
java -jar -Duser.language=en -Duser.country=US /opt/${_APP_NAME}/dist/${APP_NAME// /}.jar &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install meo geo-aware journal and personal information manager (PIM) from AppImage
APP_NAME=meo
APP_GUI_NAME="Geo-aware journal and personal information manager (PIM)."
APP_VERSION=N/A
APP_EXT=AppImage
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://rebrand.ly/meo-release-linux
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -f -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;
Keywords=PIM;Journal;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install ao elegant cross-platform desktop "to do" application from Debian package
APP_NAME=ao
APP_GUI_NAME="Elegant cross-platform desktop \"to do\" application."
APP_VERSION=5.6.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/klauscfhq/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install Too Many Files Python script to delete files based on date from source
APP_NAME=TooManyFiles
APP_GUI_NAME="Python script to delete files based on date."
APP_VERSION=0.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo pip3 install cx_Freeze
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/too-many-files/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 ./setup.py install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install gdcalc console and GTK+ financial, statistics, scientific and programmer's calculator from RPM package
APP_NAME=gdcalc
APP_GUI_NAME="Console and GTK+ financial, statistics, scientific and programmer's calculator."
APP_VERSION=3.0
APP_EXT=rpm
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-1
sudo apt-get -y alien
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo alien /tmp/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}*.deb
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Timeline Project Python-based GUI timeline tool from source
APP_NAME=Timeline
APP_GUI_NAME="Python-based GUI timeline tool."
APP_VERSION=2.10.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y python3-wxgtk4.0 python3-pip python3-wxgtk-media4.0 python3-wxgtk-webview4.0
sudo pip3 install git+https://github.com/thetimelineproj/humblewx.git
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/thetimelineproj/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}/source
PATH=/opt/${APP_NAME,,}/source:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/source/${APP_NAME,,}.py
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}/source
Exec=python3 /opt/${APP_NAME,,}/source/${APP_NAME,,}.py
Icon=/opt/${APP_NAME,,}/icons/${APP_NAME}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;
Keywords=Timeline;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Linux Task Manager (LTM) Java-based GUI/console task viewer/manager from package
APP_NAME=LTM
APP_GUI_NAME="Java-based GUI/console task viewer/manager."
APP_VERSION=4.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/dist/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/LinuxTaskMan.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Linux Task Manager (LTM)
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/LinuxTaskMan.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Task Manager;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install SQLiteStudio Qt-based SQLite database GUI client from package
APP_NAME=SQLiteStudio
APP_GUI_NAME="Qt-based SQLite database GUI client."
APP_VERSION=3.4.17
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/pawelsalawa/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/pawelsalawa/${APP_NAME,,}/raw/master/SQLiteStudio3/docs/${APP_NAME,,}_logo.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo ln -f -s /opt/sqlitestudio/sqlitestudio /usr/local/bin/sqlitestudio
sudo ln -f -s /opt/sqlitestudio/sqlitestudiocli /usr/local/bin/sqlitestudiocli
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Database;SQLite;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Wexond React/Electron-based minimalist web browser from Debian package
APP_NAME=Wexond
APP_GUI_NAME="React/Electron-based minimalist web browser."
APP_VERSION=5.2.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Lyrebird Java-based desktop Twitter client from Debian package
APP_NAME=Lyrebird
APP_GUI_NAME="Java-based desktop Twitter client."
APP_VERSION=1.1.2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-DEB
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Tristan971/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install curl-httpie curl client with HTTPie syntax from Debian package
APP_NAME=curl-httpie
APP_GUI_NAME="Curl client with HTTPie syntax."
APP_VERSION=1.0.0
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux_amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux_386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rs/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install YSoccer cross-platform, Java-based retro soccer game from package
APP_NAME=YSoccer
APP_GUI_NAME="Cross-platform, Java-based retro soccer."
APP_VERSION=19
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux32
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux64
fi
FILE_NAME=${APP_NAME,,}${APP_VERSION}_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -f -s /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;Games;
Keywords=Soccer;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install IdleX Tkinter extensions to Python IDLE IDE from package
APP_NAME=IdleX
APP_GUI_NAME="Tkinter extensions to Python IDLE IDE."
APP_VERSION=1.18
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y idle3
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 ./setup.py install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Python;IDE;IDLE;IDLEX;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install LazyGit cross-platform Golang-based shell GUI for Git from package
APP_NAME=LazyGit
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Golang-based shell GUI for Git."
APP_VERSION=0.51.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
sudo ln -s -f /usr/local/bin/${APP_NAME,,} /usr/local/bin/lg
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install UMLet Java-based UML diagram tool from package
APP_NAME=UMLet
APP_GUI_NAME="Java-based UML diagram tool."
APP_VERSION=15.1
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-standalone-${APP_VERSION}.0
sudo apt-get install -y idle3
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.umlet.com/${APP_NAME,,}_${APP_VERSION//./_}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME//ML/ml}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib:\$PATH; export PATH
java -Dsun.java2d.xrender=f -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=java -Dsun.java2d.xrender=f -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
Icon=/opt/${APP_NAME,,}/img/${APP_NAME,,}_logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=UML;Diagramming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Pasang Emas traditional board game from Brunei from source
APP_NAME=Pasang-Emas
APP_GUI_NAME="Traditional board game from Brunei."
APP_VERSION=6.3.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y itstool
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure --prefix=/usr/local && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Double Commander dual-pane canonical file manager from package
APP_NAME=DoubleCmd
APP_GUI_NAME="Dual-pane canonical file manager."
APP_VERSION=1.1.25
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.qt.$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/* /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$(pwd)
./${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=File;Manager;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install SysUsage Perl-based GUI system monitor from package
APP_NAME=SysUsage
APP_GUI_NAME="Perl-based GUI system monitor."
APP_VERSION=5.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y rrdtool librrds-perl sysstat
sudo cpan Proc::Queue
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
perl Makefile.PL && make && sudo make install
sudo ln -f -s /usr/local/${APP_NAME,,}/doc/${APP_NAME,,}.1 /usr/local/man/man1/${APP_NAME,,}.1
sudo chmod -R 777 /usr/local/${APP_NAME,,}/rrdfiles
sudo chmod -R 777 /usr/local/${APP_NAME,,}/etc
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 777 ${WWW_HOME}/${APP_NAME,,}
# Add cron jobs for scripts
(crontab -l 2>/dev/null; echo "*/1 * * * * /usr/local/sysusage/bin/sysusage > /dev/null 2>&1") | crontab -
(crontab -l 2>/dev/null; echo "*/5 * * * * /usr/local/sysusage/bin/sysusagejqgraph > /dev/null 2>&1") | crontab -
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /usr/local/${APP_NAME,,}
PATH=/usr/local/${APP_NAME,,}:\$PATH; export PATH
xdg-open http://localhost/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=CPU;Memory;Monitoring;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Converseen Qt-based bulk image converting/resizing tool from source
APP_NAME=Converseen
APP_GUI_NAME="Qt-based bulk image converting/resizing tool."
APP_VERSION=0.13.0.1
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libmagick++-dev cmake qttools5-dev-tools qttools5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p build && cd build
cmake -DCMAKE_INSTALL_PREFIX=/usr/local .. && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install JIVAM cross-platform Java Image Viewer And Manipulator from package
APP_NAME=JIVAM
APP_GUI_NAME="Cross-platform Java Image Viewer And Manipulator."
APP_VERSION=1.0.17
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_v.${APP_VERSION}_bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Graphics;Accessories;
Keywords=Image Viewer;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install SJmp3 small Java-based MP3 player from package
APP_NAME=SJmp3
APP_GUI_NAME="Small Java-based MP3 player."
APP_VERSION=08-08-18
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Graphics;Accessories;
Keywords=Image Viewer;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install MultiTextEditor Java-based text editor/word processor from package
APP_NAME=MultiTextEditor
APP_GUI_NAME="Java-based text editor/word processor."
APP_VERSION=3.1
APP_EXT=zip
FILE_NAME=${APP_NAME//M/m}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/* /opt
sudo rm -rf /opt/${APP_NAME//M/m}/java
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME//M/m}
PATH=/opt/${APP_NAME//M/m}:/opt/${APP_NAME//M/m}/lib:\$PATH; export PATH
java -jar /opt/${APP_NAME//M/m}/${APP_NAME//M/m}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME//M/m}:/opt/${APP_NAME//M/m}/lib
Exec=java -jar /opt/${APP_NAME//M/m}/${APP_NAME//M/m}.jar
Icon=/opt/${APP_NAME//M/m}/${APP_NAME//M/m}.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Programming;Development;Accessories;
Keywords=Text Editor;Word Processor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install DaSPyMan Python-based SQLite and CSV file management tool from package
APP_NAME=DaSPyMan
APP_GUI_NAME="Python-based SQLite and CSV file management tool."
APP_VERSION=2V16
APP_EXT=zip
FILE_NAME=${APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/pycsvdb/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/${APP_NAME}.pyw
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/${APP_NAME}.pyw
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=SQLite;CSV;Database;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install ExeQt small tool for pinning applications to system tray from source
APP_NAME=ExeQt
APP_GUI_NAME="Small tool for pinning applications to system tray."
APP_VERSION=1.2.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/AlexandruIstrate/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME}-${APP_VERSION}/${APP_NAME}/lib/qtsingleapplication
./configure
sudo ln -s -f /usr/include/x86_64-linux-gnu/qt5/QtCore/qstring.h /usr/include/x86_64-linux-gnu/qt5/QtCore/QStringLiteral
cd /tmp/${FILE_NAME}/${APP_NAME}-${APP_VERSION}/${APP_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 CONFIG+=release PREFIX=/usr/local .. && make && sudo make install
sudo cp /tmp/${FILE_NAME}/${APP_NAME}-${APP_VERSION}/${APP_NAME}/build/TrayIcon /usr/local/bin
sudo ln -f -s /usr/local/bin/TrayIcon /usr/local/bin/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}/${APP_NAME}-${APP_VERSION}/${APP_NAME}/assets/images/app-icon.png /usr/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Tray Menu;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install nnn terminal file manager with desktop integration from package
APP_NAME=nnn
APP_GUI_NAME="Terminal file manager with desktop integration."
APP_VERSION=5.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-static-${APP_VERSION}.$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/nnn-file-browser/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${APP_NAME,,}-static /usr/local/bin
sudo ln -s -f /usr/local/bin/${APP_NAME,,}-static /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Lepton Electron-based Github Gist editor/viewer from AppImage
APP_NAME=Lepton
APP_GUI_NAME="Electron-based Github Gist editor/viewer."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Snippet;Gist;"
APP_VERSION=1.10.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hackjutsu/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/hackjutsu/${APP_NAME,,}/master/docs/img/new_logo2.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install AsciidocFX JavaFX-based book/document editor to build PDF, EPUB, Mobi and HTML books from package
APP_NAME=AsciidocFX
APP_GUI_NAME="JavaFX-based book/document editor to build PDF, EPUB, Mobi and HTML books."
APP_VERSION=1.7.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}_Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/conf/public/favicon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Ebook;PDF;EPUB;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install bs1770gain audio loudness scanner/normalizer from package
APP_NAME=bs1770gain
APP_GUI_NAME="Audio loudness scanner/normalizer."
APP_VERSION=0.8.3
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-debian-9-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://pbelkner.de/projects/files/${APP_NAME,,}/${APP_NAME,,}/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/bin/* /opt/${APP_NAME,,}
sudo ln -f -s /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Haxima (a.k.a. Nazghul) retro Ultima-style RPG from Git repository
APP_NAME=Haxima
APP_GUI_NAME="Retro Ultima-style RPG."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=N/A
sudo apt-get install -y libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev automake
cd /tmp
git clone https://git.code.sf.net/p/nazghul/git ${APP_NAME,,}
dtrx -n /tmp/${APP_NAME,,}
./autogen.sh && make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/share/nazghul/${APP_NAME,,}
Exec=${APP_NAME,,}.sh
Icon=/usr/local/share/nazghul/${APP_NAME,,}/splash.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=RPG;Ultima;Haxima;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install qBittorrent Qt-based Bittorrent client from source
APP_NAME=qBittorrent
APP_GUI_NAME="Qt-based Bittorrent client."
APP_VERSION=5.1.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get build-dep -y ${APP_NAME,,}
sudo apt-get install -y libtorrent-dev libtorrent-rasterbar-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=${APP_NAME,,}
Icon=/usr/local/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;
Keywords=Bittorrent;P2P;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install UkrChess chess game with historical aspects from package
APP_NAME=UkrChess
APP_GUI_NAME="Chess game with historical aspects."
APP_VERSION=0.22
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=lin64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=lin32
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$(pwd)
./${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/opt/${APP_NAME,,}; /opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/assets/pics/title.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Chess;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install GladivsSC Java-based lightweight screen capture tool from package
APP_NAME=GladivsSC
APP_GUI_NAME="Java-based lightweight screen capture tool."
APP_VERSION=0.7c
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux-x86-64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux-x86-32
fi
FILE_NAME=${APP_NAME}-${ARCH_TYPE}
sudo apt-get install -y openjfx
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/gladivs-simple-screen-capture/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -f -s /opt/${APP_NAME,,}/lib/libjnscreencapture.so /usr/lib/x86_64-linux-gnu/libjnscreencapture.so
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib:\$PATH; export PATH
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$(pwd)/lib
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/opt/${APP_NAME,,}/lib; java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Screen Capture;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Vema Python-based minimalist GUI text editor from package
APP_NAME=Vema
APP_GUI_NAME="Python-based minimalist GUI text editor."
APP_VERSION=v1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}%20-%20${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/vemac/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/vemac*/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/main.py
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/main.py
Icon=/opt/${APP_NAME,,}/favicon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Accessories;
Keywords=Text Editor;Python;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install iMath LibreOffice extension for numeric and symbolic calculations inside a Writer document from Debian package
APP_NAME=iMath
APP_GUI_NAME="LibreOffice extension for numeric and symbolic calculations inside a Writer document."
APP_VERSION=2.3.6
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/ooo-imath/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install SC-IM ncurses spreadsheet program for terminal from source
APP_NAME=SC-IM
APP_GUI_NAME="Ncurses spreadsheet program for terminal."
APP_VERSION=0.7.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libzip-dev libxml2-dev bison  libncurses5-dev libncursesw5-dev cmake
# Install libxlsxwriter for support of importing Excel XLSX files.
curl -o /tmp/libxlsxwriter-RELEASE_0.7.7.tar.gz -J -L https://github.com/jmcnamara/libxlsxwriter/archive/RELEASE_0.7.7.tar.gz
cd /tmp
dtrx -n /tmp/libxlsxwriter-RELEASE_0.7.7.tar.gz
cd /tmp/libxlsxwriter-RELEASE_0.7.7
mkdir build && cd build
cmake .. && make && sudo make install
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/andmarti1424/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/src
make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install jRCalc Java-based resistor calculator from package
APP_NAME=jRCalc
APP_GUI_NAME="Java-based resistor calculator."
APP_VERSION=0.3
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y openjfx
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -f -s /opt/${APP_NAME,,}/${APP_NAME,,}.sh /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/icons/icon-${APP_NAME,,}32.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Electronics;Engineering;
Keywords=Resistor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Manuskript editing tool for book writers from Debian package
APP_NAME=Manuskript
APP_GUI_NAME="Editing tool for book writers."
APP_VERSION=0.10.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Gisto Github Gist code snippet management tool from Debian package
APP_NAME=Gisto
APP_GUI_NAME="Github Gist code snippet management tool."
APP_VERSION=1.13.4
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Pext Python/Qt-based productivity tool from AppImage
APP_NAME=Pext
APP_GUI_NAME="Python/Qt-based productivity tool."
APP_VERSION=0.23
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo ln -f -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Productivity;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install jNPad Java-based minimalist text editor/notepad from package
APP_NAME=jNPad
APP_GUI_NAME="Java-based minimalist text editor/notepad."
APP_VERSION=0.4
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.jar "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}-${APP_VERSION}.jar "\$1"
Icon=/opt/${APP_NAME,,}/icons/icon-jnpad48.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Accessories;
Keywords=Text Editor;Notepad;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Robopages PHP-based, no-database CMS with XML configuration from package
APP_NAME=Robopages
APP_GUI_NAME="PHP-based, no-database CMS  with XML configuration."
APP_VERSION=Aug_20_2018
APP_EXT=zip
FILE_NAME=${APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd ${WWW_HOME}/${APP_NAME,,}
PATH=${WWW_HOME}/${APP_NAME,,}:\$PATH; export PATH
xdg-open http://localhost/${APP_NAME,,}/index.php
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=${WWW_HOME}/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;
Keywords=CMS;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Capa Chess Java-based chess program from package
APP_NAME="Capa chess"
APP_GUI_NAME="Java-based chess program."
APP_VERSION=1.1.1
APP_EXT=jar
FILE_NAME=${APP_NAME// /%20}-${APP_VERSION}-installer
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/capa/${FILE_NAME}.${APP_EXT}
sudo java -jar /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Dos9 cross-platform command prompt from source
APP_NAME=Dos9
APP_GUI_NAME="Cross-platform command prompt."
APP_VERSION=218.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make config && make all bin
sudo mkdir -p /usr/local/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/bin/* /usr/local/${APP_NAME,,}
sudo ln -f -s /usr/local/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/*${APP_NAME,,}*

# Install CiteSpace scientific literature visual exploration tool from package
APP_NAME=CiteSpace
APP_GUI_NAME="Scientific literature visual exploration tool."
APP_VERSION=5.3.R5.10.23.2018
APP_EXT=7z
FILE_NAME=${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Xms1g -Xmx4g -Xss5m -jar CiteSpaceV.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Xms1g -Xmx4g -Xss5m -jar CiteSpaceV.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Science;Other
Keywords=Visualization;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install GitGet Java-based tool to download a portion of Git repository from package
APP_NAME=GitGet
APP_GUI_NAME="Java-based tool to download a portion of Git repository."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Photo Manager Java-based GUI image organizer from Debian package
APP_NAME=Photo-Manager
APP_GUI_NAME="Java-based GUI image organizer."
APP_VERSION=1.2.4-0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/photo-man/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install SQLAdmin Java/JDBC-based database management tool from package
APP_NAME=SQLAdmin
APP_GUI_NAME="Java/JDBC-based database management tool."
APP_VERSION=2.6
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}-all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/sql-admin/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar "\$1"
Icon=/opt/${APP_NAME,,}/src/gpl/fredy/images/database.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Accessories;
Keywords=Database;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install FreeJ2ME J2ME emulator for desktop OSes from source
APP_NAME=FreeJ2ME
APP_GUI_NAME="J2ME emulator for desktop OSes."
APP_VERSION=2018-09-07
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y ant
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
ant build.xml
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,}/build/* /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/resources/org/recompile/icon.png /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar "\$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar "\$1"
Icon=/opt/${APP_NAME,,}/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;Games;
Keywords=Games;Emulator;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install SQLite Editor Compiler from AppImage
APP_NAME=SQLite-Editor-Compiler
APP_GUI_NAME="SQLite Editor Compiler."
APP_VERSION=1.0.1
APP_EXT=AppImage
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME}-${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/sqliteeditorcompiler/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -f -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Database;SQLite;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Me and My Shadow SDL2 puzzle arcade game from source
APP_NAME=MeandMyShadow
APP_GUI_NAME="SDL2 puzzle arcade game."
APP_VERSION=0.5-rc
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-src
sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev libsdl2-mixer-dev libcurl4-gnutls-dev liblua5.3-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${FILE_NAME//-src/}
mkdir -p build && cd build
cmake .. && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Todoyu web-based (PHP/MySQL) project and task management tool from package
APP_NAME=Todoyu
APP_GUI_NAME="Web-based (PHP/MySQL) project and task management tool."
APP_VERSION=3.0.2
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://sourceforge.net/projects/todoyu-php7-x/files/${APP_VERSION}/Bugfixes%20Finalized.${APP_EXT}/download
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/*${APP_NAME}*/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_general_ci;"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;Programming;
Keywords=Task Management;Project Management;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install MicroTerm wxWidgets/GTK-based serial port terminal from source
APP_NAME=MicroTerm
APP_GUI_NAME="wxWidgets/GTK-based serial port terminal."
APP_VERSION=0.97
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libvte-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/*${APP_NAME,,}*
./configure && make && sudo make install
sudo mv res/${APP_NAME,,}.png /usr/local/share/icons
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Networking;Development;Programming;
Keywords=TTY;Terminal;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install SystemArchitect Qt-based GUI data modeling tool from package
APP_NAME=SystemArchitect
APP_GUI_NAME="Qt-based GUI data modeling tool."
APP_VERSION=4.0.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-x86-64bit
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
LD_LIBRARY_PATH=/opt/${APP_NAME,,}:\$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
/opt/${APP_NAME,,}/${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=opt/${APP_NAME,,}
Exec=LD_LIBRARY_PATH=/opt/${APP_NAME,,}:\$LD_LIBRARY_PATH; /opt/${APP_NAME,,}/${APP_NAME}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Database;Modeling;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Joplin cross-platform notepad and "To Do" list tool from AppImage
APP_NAME=Joplin
APP_GUI_NAME="Cross-platform notepad and \"To Do\" list tool."
APP_VERSION=3.3.12
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/laurent22/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=ToDo;Productivity;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Markdown Explorer Electron-based markdown viewer/editor from package
APP_NAME=Markdown-Explorer
APP_GUI_NAME="Markdown Explorer Electron-based markdown viewer/editor."
APP_VERSION=0.1.1
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=ia32
fi
FILE_NAME=${APP_NAME//-/}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jersou/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
LD_LIBRARY_PATH=/opt/${APP_NAME,,}:\$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
/opt/${APP_NAME,,}/${APP_NAME//-/}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=opt/${APP_NAME,,}
Exec=LD_LIBRARY_PATH=/opt/${APP_NAME,,}:\$LD_LIBRARY_PATH; /opt/${APP_NAME,,}/${APP_NAME//-/}
Icon=/opt/${APP_NAME,,}/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;
Keywords=Markdown;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install MagicCube 3-D Rubik's cube visualization from Debian package
APP_NAME=MagicCube3
APP_GUI_NAME="3-D Rubik's cube visualization."
APP_VERSION=1.3
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install D-rkstar Java-based galactic civilization game from source
APP_NAME=DrkStar
APP_GUI_NAME="Java-based galactic civilization game."
APP_VERSION=0.7.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -cp derbyclient.jar -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -cp derbyclient.jar -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;Games;
Keywords=Adventure;Space;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install xonsh alternative, cross-platform Python-based console shell from package
APP_NAME=xonsh
APP_GUI_NAME="Alternative, cross-platform Python-based console shell."
APP_VERSION=0.19.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install python3-pip -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 ./setup.py install
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install 			 from package
APP_NAME=Rukovoditel
APP_GUI_NAME="Web-based (PHP/MySQL) project management tool."
APP_VERSION=3.6.2
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_general_ci;"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;Programming;
Keywords=Task Management;Project Management;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Master Password cross-platform Java GUI password management tool from package
APP_NAME=MasterPassword
APP_GUI_NAME="Cross-platform Java GUI password management tool."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-gui
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://masterpassword.app/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Internet;System;
Keywords=Password;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Digital Logic Simulator (DiLoSim) cross-platform Java GUI logic simulator from package
APP_NAME=Digital-Logic-Simulator
APP_GUI_NAME="Cross-platform Java GUI logic simulator."
APP_VERSION=1.0.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Engineering;Electronics;
Keywords=Logic;Electronics;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install JWordProcessor cross-platform Java Swing RTF editor from package
APP_NAME=JWordProcessor
APP_GUI_NAME="Cross-platform Java Swing RTF editor."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Editor;RTF;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Password Keeper-Generator (PKG) Java-based password generator and manager from package
APP_NAME=PKG
APP_GUI_NAME="Java-based password generator and manager."
APP_VERSION=1.0.7
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_v.${APP_VERSION}_sf-bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/j-${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Accessories;
Keywords=Password;Generator;Manager;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Ninja IDE Qt-based Python editor/IDE from Debian package
APP_NAME=Ninja-IDE
APP_GUI_NAME="Qt-based Python editor/IDE."
APP_VERSION=2.3%2Br597~saucy1_all
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.dropbox.com/s/qwxvndlrtzdstpx/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install MP3Gain MP3 file volume normalizer from source
APP_NAME=MP3Gain
APP_GUI_NAME="MP3 file volume normalizer."
APP_VERSION=1.6.2
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION//./_}-src
sudo apt-get install -y libmpg123-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Hashrat file hash tool with support for many hash algorithms from source
APP_NAME=Hashrat
APP_GUI_NAME="File hash tool with support for many hash algorithms."
APP_VERSION=1.25
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ColumPaget/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/libUseful-3
./configure && make && sudo make install
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Videomass GUI front-end for FFmpeg from AppImage
APP_NAME=Videomass
APP_GUI_NAME="GUI front-end for FFmpeg."
APP_GUI_CATEGORIES="Multimedia;Accessories;"
APP_GUI_KEYWORDS="FFmpeg;Video;Audio;Converter;"
APP_VERSION=3.4.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}2/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Chronometer stopwatch and countdown timer from package
APP_NAME=Chrono
APP_GUI_NAME="Stopwatch and countdown timer."
APP_VERSION=1.1.1
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-gui_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-gui/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-gui/${APP_NAME,,}-linux64 /usr/local/bin/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-gui/source/main.ico /usr/share/icons/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Stopwatch;Timer;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install GNU Spice GUI wxWidgets GUI for NG-Spice and GNU-Cap electronic circuit emulation tools from source
APP_NAME=gSpiceUI
APP_GUI_NAME="wxWidgets GUI for NG-Spice and GNU-Cap electronic circuit emulation tools."
APP_VERSION=1.2.87
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}
sudo apt-get install libpangox-1.0-dev libwxgtk3.0-dev gwave
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/${APP_NAME,,}/icons/${APP_NAME,,}-32x32.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=Engineering;Electronics;Programming;Development;
Keywords=Electronics;Spice;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Violet UML Editor Java-based UML modeling tool from package
APP_NAME=VioletUMLEditor
APP_GUI_NAME="Java-based UML modeling tool."
APP_VERSION=3.0.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/violet/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=UML;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install SueIDE minimalist Java IDE from package
APP_NAME=SueIDE
APP_GUI_NAME="Minimalist Java IDE."
APP_VERSION=1.01
APP_EXT=zip
FILE_NAME=${APP_NAME}-all-in-one-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/suei/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/bin/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=IDE;Java;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install DocSearcher cross-platform indexed search tool for documents from package
APP_NAME=DocSearcher
APP_GUI_NAME="Cross-platform indexed search tool for documents."
APP_VERSION=4.0.0
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME//er/}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME//er/}.jar
Icon=/opt/${APP_NAME,,}/icons/ds.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Search;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install TurboVNC remote desktop tool from Debian package
APP_NAME=TurboVNC
APP_GUI_NAME="remote desktop tool."
APP_VERSION=3.0.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install fiets cross-platform, Java-based opinionated RSS feed reader and filter from package
APP_NAME=fiets
APP_GUI_NAME="Cross-platform, Java-based opinionated RSS feed reader and filter."
APP_VERSION=0.9
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ondy/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;
Keywords=RSS;News;Aggregator;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install FreshRSS web-based (PHP/MySQL), self-hosted RSS news aggregator from package
APP_NAME=FreshRSS
APP_GUI_NAME="Web-based (PHP/MySQL), self-hosted RSS news aggregator."
APP_VERSION=1.16.2
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_general_ci;"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;Programming;
Keywords=Task Management;Project Management;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install official OpenJDK 11 along with OpenJDK from repositories with alternatives
APP_NAME=OpenJDK
APP_GUI_NAME="Official OpenJDK 11."
APP_VERSION=11+28
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}_linux-x64_bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.java.net/java/GA/jdk11/28/GPL/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/* /usr/lib/jvm
sudo sh -c 'for bin in /usr/lib/jvm/jdk-11/bin/*; do update-alternatives --install /usr/bin/$(basename $bin) $(basename $bin) $bin 100; done'
sudo sh -c 'for bin in /usr/lib/jvm/jdk-11/bin/*; do update-alternatives --set $(basename $bin) $bin; done'
echo "To change JDK version, run 'sudo update-alternatives --config java'."
cd $HOME
sudo rm -rf /tmp/${FILE_NAME}*

# Install 2048 Java/JavaFX-based puzzle game from package
APP_NAME=Game2048
APP_GUI_NAME="Java/JavaFX-based puzzle game."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}bmsr/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment
Keywords=Puzzle;2048;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Logisim Evolution Java-based digital logic designer and simulator from package
APP_NAME=Logisim-Evolution
APP_GUI_NAME="Java-based digital logic designer and simulator."
APP_VERSION=2.14.6
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/reds-heig/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Electronics;
Keywords=Logic;Simulator;Electronics;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Jet File Transfer Java/JavaFX-based LAN file transfer tool from package
APP_NAME=Jet-File-Transfer
APP_GUI_NAME="Java/JavaFX-based LAN file transfer tool."
APP_VERSION=1.0
APP_EXT=rar
FILE_NAME=JetF_leTransferAll
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/Linux/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME//-}-v${APP_VERSION}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME//-}-v${APP_VERSION}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Network;
Keywords=LAN;Transfer;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install JPasswords Java-based password manager from package
APP_NAME=JPWS
APP_GUI_NAME="Java-based password manager."
APP_VERSION=1.2.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION//./-}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Internet;
Keywords=Password;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Syncped wxWidgets-based text editor from Github repository
APP_NAME=Syncped
APP_GUI_NAME="wxWidgets-based text editor."
APP_VERSION=N/A
APP_EXT=N/A
sudo apt-get install -y cmake libboost-dev
cd /tmp
git clone --recursive https://github.com/antonvw/wex.git
cd wex
mkdir build && cd build
cmake .. && make && sudo make install

# Install Namely Java/JavaFX-based multi-file renamer from package
APP_NAME=Namely
APP_GUI_NAME="Java/JavaFX-based multi-file renamer."
APP_VERSION=1.0
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://download1495.mediafire.com/dp60t6hu96lg/8dpfz3x0b4ea2nd/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Renamer;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Deer React/Electron-based note-taking application from Debian package
APP_NAME=Deer
APP_GUI_NAME="React/Electron-based note-taking application."
APP_VERSION=0.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/abahmed/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Sudoku-Tk Python 3 Tkinter-based Sudoku puzzle generator and solver from package
APP_NAME=Sudoku-Tk
APP_GUI_NAME="Python 3 Tkinter-based Sudoku puzzle generator and solver."
APP_VERSION=1.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y python3-tk python3-pil python3-numpy tcl8.6 tk8.6
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-j4321/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/*${APP_NAME}*/
sudo python3 ./setup.py install
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Google-Drive-Electron cross-platform, Electron-based desktop tool for Google Drive from package
APP_NAME=Google-Drive-Electron
APP_GUI_NAME="Cross-platform, Electron-based desktop tool for Google Drive."
APP_VERSION=v.funky-duck/0.0.2
APP_EXT=zip
FILE_NAME=${APP_NAME//-/.}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/alexkim205/Google-Drive-Electron/releases/download/${APP_VERSION////%2F}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv "/tmp/${FILE_NAME}/${FILE_NAME//./\ }"/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
"/opt/${APP_NAME,,}/${APP_NAME//-/\ }"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec="/opt/${APP_NAME,,}/${APP_NAME//-/\ }"
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Accessories;System;
Keywords=Google;Storage;Drive;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Leibnitz 3D graphing calculator from package
APP_NAME=Leibnitz
APP_GUI_NAME="3D graphing calculator."
APP_VERSION=3.0.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_ubuntu22_amd64
sudo apt-get install -y libjpeg62
sudo ln -s /lib/x86_64-linux-gnu/libpcre.so.3 /lib/x86_64-linux-gnu/libpcre.so.1
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${APP_NAME,,}-${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/desktop/${APP_NAME,,}.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Accessories;
Keywords=Calculator;Graphing;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install System G minimalist GUI file manager from package
APP_NAME=SystemG
APP_GUI_NAME="Minimalist GUI file manager."
APP_VERSION=3.0.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_ubuntu22_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
sudo apt-get install -y libjpeg62
sudo ln -s /lib/x86_64-linux-gnu/libpcre.so.3 /lib/x86_64-linux-gnu/libpcre.so.1
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/nps-systemg/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME//-/_}-${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/systemg
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/systemg
Icon=/opt/${APP_NAME,,}/desktop/systemg.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=File;Manager;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Docker Community Edition Stable channel release from official repository
# https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
# Remove old Docker versions, if any
sudo apt-get remove -y docker docker-engine docker.io
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-cache policy docker-ce
sudo apt-get install -y docker-ce
sudo systemctl status docker
sudo usermod -aG docker ${USER}  # Add user account to 'docker' group to run commands without sudo.
su - ${USER}
id -nG  # Confirm user account added to 'docker' group.
docker run hello-world  # Confirm Docker installation.

# Install Docker Compose command-line utility for multi-container Docker applications from package
APP_NAME=Docker-Compose
APP_GUI_NAME="Command-line utility for multi-container Docker applications."
APP_VERSION=2.37.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp -R /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Dark Chess (Banqi) Python-based chess variant game from package
APP_NAME=DarkChess
APP_GUI_NAME="Python-based chess variant game."
APP_VERSION=086
APP_EXT=tar.gz
FILE_NAME=p_${APP_NAME,,}_${APP_VERSION}
sudo pip3 install pygame
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py
Icon=/opt/${APP_NAME,,}/Image/${APP_NAME,,}_default.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;Games;
Keywords=Chess;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Polar Bookshelf personal document management/ebook reader tool from Debian package
APP_NAME=Polar-Bookshelf
APP_GUI_NAME="Personal document management/ebook reader tool."
APP_VERSION=1.0.9
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/burtonator/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install php4dvd PHP/MySQL personal movie management tool with IMDB integration from package
APP_NAME=php4dvd
APP_GUI_NAME="PHP/MySQL personal movie management tool with IMDB integration."
APP_VERSION=3.8.0
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jreklund/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_general_ci;"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;
Keywords=Movies;IMDB;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install GraphQL Playground Electron-based IDE/client for GraphQL development and testing from Debian package
APP_NAME=GraphQL-Playground
APP_GUI_NAME="Electron-based IDE/client for GraphQL development and testing."
APP_VERSION=1.8.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-electron_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/prisma/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install glparchis OpenGL-based Parchis (Parcheesi) game from package
APP_NAME=glparchis
APP_GUI_NAME="OpenGL-based Parchis (Parcheesi) game."
APP_VERSION=20181020
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-${APP_VERSION}.x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/ficharoja.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;Games;
Keywords=Parcheesi;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install imgp image resizer and rotator from Debian package
APP_NAME=imgp
APP_GUI_NAME="Image resizer and rotator."
APP_VERSION=2.6-1
APP_EXT=deb
source /etc/lsb-release
# If Ubuntu version is above 16.04 (Xenial), then we use 16.04.
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(xe|ya|ze|ar)$ ]]; then
	DISTRIB_RELEASE=16.04
else
    DISTRIB_RELEASE=18.04
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_ubuntu${DISTRIB_RELEASE}.${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install JFootball Java 2D football (soccer) game from package
APP_NAME=JFootball
APP_GUI_NAME="Java 2D football (soccer) game."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -Xms128m -Xmx1024m -classpath ${FILE_NAME}.${APP_EXT} com.loading.GameLoader
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -Xms128m -Xmx1024m -classpath ${FILE_NAME}.${APP_EXT} com.loading.GameLoader
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Football;Soccer;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install nuTetris minimalist Java Tetris puzzle game from package
APP_NAME=nuTetris
APP_GUI_NAME="Minimalist Java Tetris puzzle game."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar ${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar ${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Tetris;Puzzle;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Autoplot Java-based automatic data visualization and management tool from package
APP_NAME=Autoplot
APP_GUI_NAME="Java-based automatic data visualization and management tool."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar ${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar ${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Data;Visualization;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Hallo Northern Sky (HNSky) planetarium program from Debian package
APP_NAME=HNSky
APP_GUI_NAME="Hallo Northern Sky (HNSky) planetarium program."
APP_VERSION=N/A
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Tor Browser self-contained secure web browser from package
APP_NAME=Tor-Browser
APP_GUI_NAME="Self-contained secure web browser."
APP_VERSION=8.0.3
APP_EXT=tar.xz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux32
fi
FILE_NAME=${APP_NAME,,}-${ARCH_TYPE}-${APP_VERSION}_${LANGUAGE//_/-}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,}_${LANGUAGE//_/-}/Browser/* /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/start-${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/start-${APP_NAME,,}
Icon=web-browser
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;
Keywords=Tor;Web;Browser;Privacy;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Kilua small, extensible, Lua-powered text editor from source
APP_NAME=Kilua
APP_GUI_NAME="Small, extensible, Lua-powered text editor."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-master
sudo apt-get install -y libncursesw5-dev liblua5.2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/skx/${APP_NAME,,}/archive/master.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=true
Categories=Programming;Development;
Keywords=Editor;Lua;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install AWGG (Advanced Wget GUI) Qt front-end for wget, aria2, youtube-dl, curl, etc. from package
APP_NAME=AWGG
APP_GUI_NAME="Qt front-end for wget, aria2, youtube-dl, curl, etc.."
APP_VERSION=N/A
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}_x86_64_QT5
sudo apt-get install -y libqt5pas1
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;
Keywords=Wget;Curl;P2P;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install EmACT minimalist terminal Emacs clone from source
APP_NAME=EmACT
APP_GUI_NAME="Minimalist terminal Emacs clone."
APP_VERSION=2.58.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libtinfo-dev libncurses5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install ShareBlogs minimalist PHP/MySQL-based blogging platform from package
APP_NAME=ShareBlogs
APP_GUI_NAME="Minimalist PHP/MySQL-based blogging platform."
APP_VERSION=1.3
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/blogsinphp/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
#sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_general_ci;"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;
Keywords=Movies;IMDB;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}/install.php
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Pennywise Electron-based utility to open any application or web site in floating, stay-on-top window from Debian package
APP_NAME=Pennywise
APP_GUI_NAME="Electron-based utility to open any application or web site in floating, stay-on-top window."
APP_VERSION=0.8.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kamranahmedse/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install HTML Notepad minimalist WYSIWG HTML editor from package
APP_NAME=HTML-Notepad
APP_GUI_NAME="Minimalist WYSIWG HTML editor."
APP_VERSION=N/A
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-dist
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://${APP_NAME,,}.com/dist/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=HTML;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install GXemul full-system computer emulator that emulates processors (ARM, MIPS, M88K, PowerPC, and SuperH) and peripherals from source
APP_NAME=GXemul
APP_GUI_NAME="Full-system computer emulator that emulates processors (ARM, MIPS, M88K, PowerPC, and SuperH) and peripherals."
APP_VERSION=0.7.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libtinfo-dev libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Code Notes simple code snippet/Github Gist manager built with Electron and Vue.JS from AppImage
APP_NAME=Code-Notes
APP_GUI_NAME="Simple code snippet/Github Gist manager built with Electron and Vue.JS."
APP_VERSION=1.2.4
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/lauthieb/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -f -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Snippets;Gist;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Batch Audio Converter command-line audio file converter from package
APP_NAME=BAC
APP_GUI_NAME="Command-line audio file converter."
APP_VERSION=N/A
APP_EXT=sh
FILE_NAME=${APP_NAME,,}
sudo apt-get install -y ffmpeg
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/batchaudiocvt/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -f -s /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install ChurchInfo web-based (PHP/MySQL) church management system from package
APP_NAME=ChurchInfo
APP_GUI_NAME="Web-based (PHP/MySQL) church management system."
APP_VERSION=1.3.0
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
#sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
#sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_general_ci;"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
mysql -u ${DB_USER} -p${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/SQL/Install.sql
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}/index.html
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=Church;Management;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}/index.html
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Rachota Java-based personal time-tracking tool from package
APP_NAME=Rachota
APP_GUI_NAME="Java-based personal time-tracking tool."
APP_VERSION=2.4
APP_EXT=jar
FILE_NAME=${APP_NAME,,}_${APP_VERSION//./}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar ${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar ${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Time;Management;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install JumpFM Electron-based dual-pane file manager from AppImage
APP_NAME=JumpFM
APP_GUI_NAME="Electron-based dual-pane file manager."
APP_VERSION=1.0.5
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -f -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=File;Manager;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install ProcDump Linux version of Sysinternals ProcDump tool Debian package
APP_NAME=ProcDump
APP_GUI_NAME="Linux version of Sysinternals ProcDump tool."
APP_VERSION=1.0.1
APP_EXT=deb
source /etc/lsb-release
# If Ubuntu version is above 16.04 (Xenial), then we use 16.04.
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(xe|ya|ze|ar|bi|co)$ ]]; then
	DISTRIB_CODENAME=xenial
else
    DISTRIB_CODENAME=trusty
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://packages.microsoft.com/repos/microsoft-ubuntu-${DISTRIB_CODENAME}-prod/pool/main/p/procdump/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install SQL Workbench Java-based GUI and console database client from package
APP_NAME=SQLWorkbench
APP_GUI_NAME="Java-based GUI and console database client."
APP_VERSION=124
APP_EXT=zip
FILE_NAME=${APP_NAME//SQL/}-Build${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://www.sql-workbench.eu/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
#sudo chmod -R a+w /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/sqlwbconsole.sh /opt/${APP_NAME,,}/${APP_NAME,,}.sh
sudo ln -s -f /opt/${APP_NAME,,}/sqlwbconsole.sh /usr/local/bin/sqlwbconsole
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME,,}/workbench32.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=SQL;Database;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install Archiver Golang-based multi-format archiver/extractor from package
APP_NAME=Archiver
APP_GUI_NAME="Golang-based multi-format archiver/extractor."
APP_VERSION=3.5.1
APP_EXT=N/A
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=arc_linux_${ARCH_TYPE}
curl -o /tmp/arc -J -L https://github.com/mholt/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo mv /tmp/arc /usr/local/bin
sudo chmod a+x /usr/local/bin/arc
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Conky-Easy customized Conky system monitor configuration from package
APP_NAME=Conky-Easy
APP_GUI_NAME="Customized Conky system monitor configuration."
APP_VERSION=1.0.9
APP_EXT=7z
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y conky-all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://dl.opendesktop.org/api/files/download/id/1541941778/s/e6e6b0063ee171a6a3084f47badceb928031b4b7dab9020ff0ba591f207a2d43678ebe4d5662b6ac0486a4ba4044e908b7c56ab75cf136dc94a7fe9e0d167fb5/t/1542063859/u//${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/conky.png /usr/share/icons # For start notification
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/'zekton rg.ttf' /usr/share/fonts  # For clock font
cp -R /tmp/${FILE_NAME}/${APP_NAME}/.conkybasic_c110 $HOME
cp -R /tmp/${FILE_NAME}/${APP_NAME}/.lua $HOME
cp -R /tmp/${FILE_NAME}/${APP_NAME}/.icons $HOME
sed -i 's@ .conkybasic_c110@ $HOME/.conkybasic_c110@g' /tmp/${FILE_NAME}/${APP_NAME}/startconky.sh
sudo cp /tmp/${FILE_NAME}/${APP_NAME}/startconky.sh /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install MineBlog minimalist blogging platform built with BunnyPHP framework from package
APP_NAME=MineBlog
APP_GUI_NAME="Minimalist blogging platform built with BunnyPHP framework."
APP_VERSION=1.0beta
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/*${APP_NAME}*/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_general_ci;"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
mysql -u ${DB_USER} -p${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/SQL/Install.sql
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=Blogging;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}/install
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install sysget universal package manager for Linux from repository
APP_NAME=sysget
APP_GUI_NAME="Universal package manager for Linux."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=N/A
sudo wget -qO - https://apt.emilengler.com/signkey.asc | sudo apt-key add
echo "deb [arch=all] https://apt.emilengler.com/ stable main" | sudo tee /etc/apt/sources.list.d/emilengler.list
sudo apt update
sudo apt install -y sysget
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Qomp Quick (Qt) Online Music Player from Debian package
APP_NAME=Qomp
APP_GUI_NAME="Quick (Qt) Online Music Player."
APP_VERSION=1.3.1
APP_EXT=deb
source /etc/lsb-release
# If Ubuntu version is above 16.04 (Xenial), then we use 16.04.
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(ar|bi|co)$ ]]; then
	DISTRIB_CODENAME=artful
else
    DISTRIB_CODENAME=zesty
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-0ubuntu1~0ppa1~${DISTRIB_CODENAME}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/~${APP_NAME,,}/+archive/ubuntu/ppa/+files/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Safe Clock multi-panel clock from package
APP_NAME=safe-clock
APP_GUI_NAME="Safe Clock multi-panel clock."
APP_VERSION=1.2.0
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME//-/_}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/source/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Clock;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install JPhotoTagger Java-based GUI photo tag/metadata editor from package
APP_NAME=JPhotoTagger
APP_GUI_NAME="Java-based GUI photo tag/metadata editor."
APP_VERSION=0.42.6
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME} /opt
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME}
PATH=/opt/${APP_NAME}:/opt/${APP_NAME}/lib:\$PATH; export PATH
java -jar ${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME}:/opt/${APP_NAME}/lib
Exec=java -jar ${APP_NAME}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;Graphics;
Keywords=Photo;Tagger;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install ptop Python-based Linux task manager for shell from package
APP_NAME=ptop
APP_GUI_NAME="Python-based Linux task manager for shell."
APP_VERSION=1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/darxtrix/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo pip3 install -r requirements.txt
sudo python3 setup.py install

# Install fre:ac audio converter and CD ripper from AppImage
APP_NAME="fre:ac"
APP_GUI_NAME="Audio converter and CD ripper."
APP_VERSION=1.1.7
APP_EXT=AppImage
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME//:/}-${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/bonkenc/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME//:/}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME//:/}
sudo chmod a+x /opt/${APP_NAME//:/}/${FILE_NAME}.${APP_EXT}
cat > /tmp/${APP_NAME//:/} << EOF
#! /bin/sh
cd /opt/${APP_NAME//:/}
PATH=/opt/${APP_NAME//:/}:\$PATH; export PATH
/opt/${APP_NAME//:/}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME//:/} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME//:/}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME//:/}
Exec=/opt/${APP_NAME//:/}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Audio;Multimedia;
Keywords=Audio;Converter;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Trilium Notes Electron-based hierarchical note taking application from Debian package
APP_NAME=Trilium
APP_GUI_NAME="Electron-based hierarchical note taking application."
APP_VERSION=0.63.6
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/zadam/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install JUL Designer RAD tool for JavaScript development from App Image
APP_NAME=JUL-Designer
APP_GUI_NAME="RAD tool for JavaScript development."
APP_VERSION=3.0.3
APP_EXT=AppImage
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=i386
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86_64
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=JavaScript;Web;Development;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install E.R.A simple Java UML diagramming tool from package
APP_NAME=Era
APP_GUI_NAME="Simple Java UML diagramming tool."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/era-simple-uml/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar ${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar ${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=UML;Diagramming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Qubist GTK2 3-D 4x4x4 Tic-Tac-Toe puzzle game from package
APP_NAME=Qubist
APP_GUI_NAME="GTK2 3-D 4x4x4 Tic-Tac-Toe puzzle game."
APP_VERSION=0.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgtk2.0-dev help2man
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/qubic/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
sudo ln -f -s /usr/local/games/${APP_NAME,,}-gtk2 /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/games
Exec=/usr/local/games/${APP_NAME,,}-gtk2
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Tic-Tac-Toe;Puzzle;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Direnv environment switcher for the shell from package
APP_NAME=Direnv
APP_GUI_NAME="Environment switcher for the shell."
APP_VERSION=2.33.0
APP_EXT=N/A
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=386
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=amd64
fi
FILE_NAME=${APP_NAME,,}.linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo mv /tmp/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
sudo ln -f -s /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install NextFractal Java-based fractal explorer from package
APP_NAME=NextFractal
APP_GUI_NAME="Java-based fractal explorer."
APP_VERSION=2.1.1
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_debian_x86_64_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME} /opt
sudo ln -s -f /opt/${APP_NAME}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Math;Science;
Keywords=Fractal;Math
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install pcaprunner shell-based PCAP IP packet analyzer from source
APP_NAME=pcaprunner
APP_GUI_NAME="Shell-based PCAP IP packet analyzer."
APP_VERSION=0.8
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make
sudo mkdir /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${APP_NAME,,}
sudo ln -f -s /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/${APP_NAME,,}_gui.py
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Networking;
Keywords=PCAP;Networking
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Netsurf minimalist GTK web browser from source
APP_NAME=Netsurf
APP_GUI_NAME="Minimalist GTK web browser."
APP_VERSION=3.11
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-all-${APP_VERSION}
sudo apt-get install -y build-essential pkg-config gperf libcurl3-dev libpng-dev libjpeg-dev libgtk-3-dev librsvg2-dev libssl-dev bison flex
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://download.netsurf-browser.org/${APP_NAME,,}/releases/source-full/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/bin
Exec=/bin/netsurf-gtk
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;
Keywords=Web;Browser;GTK;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install RTextDoc Java-based editor for structured text, such as LaTeX from package
APP_NAME=RTextDoc
APP_GUI_NAME="Java-based editor for structured text, such as LaTeX."
APP_VERSION=2.5
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=Editor;LaTeX;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Jcow social networking tool
APP_NAME=Jcow
APP_VERSION=12
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}.ce.${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/install.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/themes/default/ico.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;
Keywords=Social;Media;Networking;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/

# Install Custom Linux Creator fork of Remastersys for creating Live CD from Ubuntu 17.04 and later installation from Debian package
APP_NAME=CustomLinuxCreator
APP_GUI_NAME="Fork of Remastersys for creating Live CD from Ubuntu 17.04 and later installation."
APP_VERSION=1.2
APP_EXT=deb
FILE_NAME=${APP_NAME}${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/custom-linux-creator/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Tag Inspector GUI MP3 tag viewer/editor from package
APP_NAME=TagInspector
APP_GUI_NAME="GUI MP3 tag viewer/editor."
APP_VERSION=N/A
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=32bit
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=64bit
fi
FILE_NAME=${APP_NAME,,}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Multimedia;
Keywords=MP3;Tags;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install FreeDoko cross-platform version of Doppelkopf German card game from package
APP_NAME=FreeDoko
APP_GUI_NAME="Cross-platform version of Doppelkopf German card game."
APP_VERSION=0.8.0
APP_EXT=zip
FILE_NAME=${APP_NAME}_${APP_VERSION}.Linux
sudo apt-get install -y libalut0
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/free-doko/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}_${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;Other;
Keywords=Cards;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Streamtuner Python-based Internet radio directory browser from Debian package
APP_NAME=Streamtuner2
APP_GUI_NAME="Python-based Internet radio directory browser."
APP_VERSION=2.2.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install go-t cross-platform command line Twitter client from package
APP_NAME="go-t"
APP_GUI_NAME="Cross-platform command line Twitter client."
APP_VERSION=0.1
APP_EXT=N/A
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux-386
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux-amd64
fi
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/cbrgm/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo mv /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Hexyl Rust-based hex viewer for the terminal from package
APP_NAME=Hexyl
APP_GUI_NAME="Rust-based hex viewer for the terminal."
APP_VERSION=0.15.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /usr/local/share/man/man1
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}.1 /usr/local/share/man/man1
sudo mandb -q
sudo rm -rf /tmp/${APP_NAME,,}*

# Install ImLab cross-platform scientific image processing tool from package
APP_NAME=ImLab
APP_GUI_NAME="Cross-platform scientific image processing tool."
APP_VERSION=3.1
APP_EXT=tar.gz
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(vi|wi)$ ]]; then
	DISTRIB_RELEASE=15
	sudo apt-get install -y libpng12* libglu1-mesa
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(tr|ut)$ ]]; then
	DISTRIB_RELEASE=14
	sudo apt-get install -y libpng12* libglu1-mesa
else
	DISTRIB_RELEASE=16
	sudo apt-get install -y libglu1-mesa
	curl -o /tmp/libpng12-0.deb -J -L http://security.ubuntu.com/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1.1_amd64.deb
	sudo gdebi -n /tmp/libpng12-0.deb
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}_Ubuntu${DISTRIB_RELEASE}_x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* /usr/local/bin
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/bin/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Graphics;System;
Keywords=Image;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${FILE_NAME}*

# Install Linux Reminders GUI periodic and one-time reminder tool from Debian package
APP_NAME=Linux-Reminders
APP_GUI_NAME="GUI periodic and one-time reminder tool."
APP_VERSION=2.3.6
APP_EXT=deb
FILE_NAME=reminders_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Vido Python GUI video/audio downloader frontend for youtube-dl from package
APP_NAME=Vido
APP_GUI_NAME="Python GUI video/audio downloader frontend for youtube-dl."
APP_VERSION=1.7.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}/* /opt/${APP_NAME,,}
sudo /opt/${APP_NAME,,}/install.sh
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Grip GTK-based CD player, CD ripper, and MP3 encoder from source
APP_NAME=Grip
APP_GUI_NAME="GTK-based CD player, CD ripper, and MP3 encoder."
APP_VERSION=4.2.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libssl-dev libssh2-1-dev libvte-dev libcurl4-openssl-dev libgnomeui-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install TkRev cross-platform Tcl/Tk client for CVS, RCS, SVN, and Git from package
APP_NAME=TkRev
APP_GUI_NAME="Cross-platform Tcl/Tk client for CVS, RCS, SVN, and Git."
APP_VERSION=9.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
sudo apt-get install -y tcl8.6 tk8.6 tclx8.4 tcllib tklib tkdnd expect tcl-tls  # Install required packages
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/tkcvs/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo wish ./doinstall.tcl /usr/local
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/lib/${APP_NAME,,}/bitmaps/ticklefish48.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Git;SVN;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Headset cross-platform Electron-based Youtube/Reddit desktop music player from Debian package
# https://www.linuxlinks.com/headset-youtube-reddit-desktop-music-player/
APP_NAME=Headset
APP_GUI_NAME="Cross-platform Electron-based Youtube/Reddit desktop music player."
APP_VERSION=4.2.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
sudo apt-get install -y libgconf2-4
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/headsetapp/headset-electron/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install orng Java Markdown-based journal editor from package
APP_NAME=orng
APP_GUI_NAME="Java Markdown-based journal editor."
APP_VERSION=1.1.16
APP_EXT=zip
FILE_NAME=${APP_NAME,,}j_${APP_VERSION}_gnu_linux_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}

# Install Kitchen Garden Aid Java-based garden/small farm planning/layout tool from package
APP_NAME="Kitchen Garden Aid"
APP_GUI_NAME="Java-based garden/small farm planning/layout tool."
APP_VERSION=3.0.4
APP_EXT=tgz
FILE_NAME=${APP_NAME// /}-Linux-${APP_VERSION}
sudo apt-get install -y openjdk-11-jre openjfx
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/kitchengarden2/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME// /}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME// /}
sudo chmod -R 755 /opt/${APP_NAME// /}
sudo ln -s -f /opt/${APP_NAME// /}/kitchenGardenAid.sh /usr/local/bin/${APP_NAME// /}
cat > /tmp/${APP_NAME// /}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME// /}
Exec=/opt/${APP_NAME// /}/kitchenGardenAid.sh
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Graphics;Other;
Keywords=Garden;
EOF
sudo mv /tmp/${APP_NAME// /}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME// /}*

# Install Nuclear cross-platform Electron-based desktop music player focused on streaming from free sources from Debian package
APP_NAME=Nuclear
APP_GUI_NAME="Cross-platform Electron-based desktop music player focused on streaming from free sources."
APP_VERSION=fd06a3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/nukeop/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install SQLeo Java-based visual SQL query builder tool from package
APP_NAME=SQLeoVQB
APP_GUI_NAME="Java-based visual SQL query builder tool."
APP_VERSION=2017.09.rc1
APP_EXT=zip
FILE_NAME=${APP_NAME}.${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/sqleo/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME}*/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -Dfile.encoding=UTF-8 -jar ${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -Dfile.encoding=UTF-8 -jar ${APP_NAME}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Database;SQL;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install cfiles ncurses file manager with Vim keybindings from source
APP_NAME=cfiles
APP_GUI_NAME="Ncurses file manager with Vim keybindings."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=N/A
sudo apt-get install -y libncurses5-dev cmake
cd /tmp
git clone https://github.com/mananapr/${APP_NAME,,}
cd /tmp/${APP_NAME,,}
mkdir build && cd build
cmake .. && make
sudo mv ${APP_NAME,,} /usr/local/bin
sudo rm -rf /tmp/${APP_NAME,,}*

# Install BitchX console IRC client from source
APP_NAME=BitchX
APP_VERSION=N/A
APP_EXT=N/A
git clone https://git.code.sf.net/p/${APP_NAME,,}/git /tmp/${APP_NAME,,}
cd /tmp/${APP_NAME,,}
./configure && make && sudo make install
sudo ln -s /usr/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install OmniDB Django/Python-based web database administration tool from Debian package
APP_NAME=OmniDB
APP_GUI_NAME="Django/Python-based web database administration tool."
APP_VERSION=2.17.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-app_${APP_VERSION}-debian-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://omnidb.org/dist/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Arena UCI and Winboard-compatible chess GUI from package
APP_NAME=Arena
APP_GUI_NAME="UCI and Winboard-compatible chess GUI."
APP_VERSION=1.1
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=64bit
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=32bit
fi
FILE_NAME=${APP_NAME,,}linux_${ARCH_TYPE}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://www.playwitharena.de/downloads/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/Arena_x86_64_linux
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/Arena_x86_64_linux
Icon=/opt/${APP_NAME,,}/${APP_NAME}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Chess;UCI;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Configure Mono Project build environment for C#/.NET
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(bi|co)$ ]]; then
	VERSION_NUMBER=18.04
	VERSION_NAME=bionic
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(xe|ya|ze|ar)$ ]]; then
	VERSION_NUMBER=16.04
	VERSION_NAME=xenial
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(tr|ut|vi|wi)$ ]]; then
	VERSION_NUMBER=14.04
	VERSION_NAME=trusty
fi
# Add appropriate repository
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
sudo apt-get install -y apt-transport-https
echo "deb https://download.mono-project.com/repo/ubuntu stable-"${VERSION_NAME}" main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
sudo apt-get update
sudo apt-get install -y mono-devel monodevelop
# Build example file to test installation
# https://www.mono-project.com/docs/getting-started/mono-basics/
cd /tmp
cat > /tmp/hello_mono.cs << EOF
using System;

public class HelloWorld
{
    static public void Main ()
    {
        Console.WriteLine ("Hello, Mono World!");
    }
}
EOF
csc /tmp/hello_mono.cs
mono hello_mono.exe
cat > /tmp/hello_mono_winforms.cs << EOF
using System;
using System.Windows.Forms;

public class HelloWorld : Form
{
    static public void Main ()
    {
        Application.Run (new HelloWorld ());
    }

    public HelloWorld ()
    {
        Text = "Hello, Mono World";
    }
}
EOF
csc /tmp/hello_mono_winforms.cs -r:System.Windows.Forms.dll
mono hello_mono_winforms.exe

# Install Spez Epiphany custom web browser from Debian package
APP_NAME=Spez
APP_GUI_NAME=""
APP_VERSION=10.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}epip-${APP_VERSION}-${KERNEL_TYPE}
curl -o /tmp/libgranite5-common.deb -J -L https://code.launchpad.net/~philip.scott/+archive/ubuntu/spice-up-daily/+files/libgranite-common_5.2.4+r201908291816-1430+pkg109~ubuntu5.0.1_all.deb
curl -o /tmp/libgranite5.deb -J -L https://code.launchpad.net/~philip.scott/+archive/ubuntu/spice-up-daily/+files/libgranite5_5.2.4+r201908291816-1430+pkg109~ubuntu5.0.1_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/libgranite5-common.deb
sudo gdebi -n /tmp/libgranite5.deb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/spez-browser-mirrors/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install JIBS (Java Image Browser Sorter) image viewer focused on image sorting from package
APP_NAME=JIBS
APP_GUI_NAME="Image viewer focused on image sorting."
APP_VERSION=3.4.0
APP_EXT=jar
FILE_NAME=${APP_NAME}-legacy-Java8-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/img-browse-sort/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Graphics;
Keywords=Image;Viewer;Java;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install zBoy classic Gameboy emulator from source
APP_NAME=zBoy
APP_GUI_NAME="Classic Gameboy emulator."
APP_VERSION=0.70
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libsdl2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
cp Makefile.linux Makefile
make
sudo mv ${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install phpBlueDragon PassWeb web-based password manager
APP_NAME=PassWeb
APP_VERSION=1.0.0
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=phpBlueDragon_${APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/phpbluedragon-passweb/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/*${APP_NAME}*/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/install.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/favicon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;
Keywords=Password;Security;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/

# Install TestLink web-based (PHP/MySQL) test and requirements management tool
APP_NAME=TestLink
APP_GUI_NAME="Web-based (PHP/MySQL) test and requirements management tool"
APP_VERSION=1.9.19
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo mkdir -p /var/${APP_NAME,,}/logs/
sudo mkdir -p /var/${APP_NAME,,}/upload_area/
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data /var/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/install/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/gui/themes/default/images/tl-logo-transparent.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Testing;Requirements;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/

# Install fnm (Fast Node Manager) Node.js package version manager from package
APP_NAME=fnm
APP_GUI_NAME="Node.js package version manager."
APP_VERSION=1.33.1
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Schniz/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
echo 'eval `fnm env`' >> $HOME/.bashrc
sudo rm -rf /tmp/${APP_NAME,,}*

# Install RedisView GUI management tool for Redis databases from package
APP_NAME=RedisView
APP_GUI_NAME="GUI management tool for Redis databases."
APP_VERSION=1.7.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}_linux64bit
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/default.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Redis;Database;Cache;NoSQL;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install QFutureBuilder Qt-based desktop goal tracker from Debian package
APP_NAME=QFutureBuilder
APP_GUI_NAME="Qt-based desktop goal tracker"
APP_VERSION=N/A
APP_EXT=tar.gz
FILE_NAME=linux_deb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/futurbuilder/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}.deb

# Install Notable Markdown-based note-taking tool from Debian package
APP_NAME=Notable
APP_GUI_NAME="Markdown-based note-taking tool."
APP_VERSION=1.8.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}.deb

# Install Klavaro GTK3-based Touch Typing Tutor from source
APP_NAME=Klavaro
APP_GUI_NAME="GTK3-based Touch Typing Tutor."
APP_VERSION=3.14
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y intltool libgtk-3-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install NitsLoch Java-based classic RPG from package
APP_NAME=NitsLoch
APP_GUI_NAME="Java-based classic RPG."
APP_VERSION=2.2.1
APP_EXT=zip
FILE_NAME=${APP_NAME}${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;Games;
Keywords=RPG;Retro;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Web Contact Manager (WCM) web-based (PHP/MySQL) contact management tool
APP_NAME=WCM
APP_GUI_NAME="Web-based (PHP/MySQL) contact management tool."
APP_VERSION=1.4.1
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}.${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/webcontactmanag/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cp /tmp/${FILE_NAME}/${APP_NAME,,}/inc/Config.Sample.inc.php /tmp/${FILE_NAME}/${APP_NAME,,}/inc/Config.inc.php
sed -i 's@wcmpass@wcm@g' /tmp/${FILE_NAME}/${APP_NAME,,}/inc/Config.inc.php
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}/Uploads
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}/Images
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data /var/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/SiteLogo.jpg
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Contacts;Address;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install A Text Editor inspired by Sam and Acme text editors for the Plan 9 operating system from package
APP_NAME=A
APP_GUI_NAME="Text Editor inspired by Sam and Acme text editors for the Plan 9 operating system."
APP_VERSION=0.7.3
APP_EXT=zip
FILE_NAME=a-linux-amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/as/a/files/2135664/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
chmod a+x /tmp/${FILE_NAME}/a
sudo mv /tmp/${FILE_NAME}/* /usr/local/bin
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/a
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Text;Editor;Acme;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/

# Install FRequest Qt-based desktop HTTP(S) request tool from AppImage
APP_NAME=FRequest
APP_GUI_NAME="Qt-based desktop HTTP(S) request tool."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="HTTP;REST;API;"
APP_VERSION=1.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}${APP_VERSION//./}_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/fabiobento512/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/fabiobento512/${APP_NAME}/master/Resources/${APP_NAME,,}_icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install PHP My Family web-based (PHP/MySQL) genealogy tool with GEDCOM support
APP_NAME=PHPMyFamily
APP_GUI_NAME="Web-based (PHP/MySQL) genealogy tool with GEDCOM support."
APP_VERSION=v2.1.0-alpha-2
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=pmf${APP_VERSION//./-}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cp /tmp/${FILE_NAME}/inc/database.inc /tmp/${FILE_NAME}/inc/database.inc.php
sed -i 's@""@"'${APP_NAME,,}'"@g' /tmp/${FILE_NAME}/inc/database.inc.php
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/admin/install.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/images/favicon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Education;
Keywords=Genealogy;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Universal Password Manager (UPM) Java-based password manager from package
APP_NAME=UPM
APP_GUI_NAME="Java-based password manager."
APP_VERSION=1.15.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Internet;
Keywords=Password;Security;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Ghost Desktop Electron-based blog management tool from Debian package
APP_NAME=Ghost-Desktop
APP_GUI_NAME="Electron-based blog management tool."
APP_VERSION=1.7.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-debian
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/tryghost/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Gede Qt-based GUI front-end to GDB from source
APP_NAME=Gede
APP_GUI_NAME="Qt-based GUI front-end to GDB."
APP_VERSION=2.12.3
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y qt5-default exuberant-ctags
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://gede.acidron.com/uploads/source/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;
Keywords=GDB;Debugger;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install GEDKeeper cross-platform personal genealogical database tool from Debian package
APP_NAME=GEDKeeper
APP_GUI_NAME="Cross-platform personal genealogical database tool."
APP_VERSION=2.20.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Kevora cross-platform Qt-based database management/query tool with support for MySQL, Oracle, PostgreSQL, and SQLite from source
APP_NAME=Kevora
APP_GUI_NAME="Cross-platform Qt-based database management/query tool with support for MySQL, Oracle, PostgreSQL, and SQLite."
APP_VERSION=nightly-qt5.12
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-src-${APP_VERSION}
sudo apt-get install -y qt5-default qt5-qmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
mkdir -p build && cd build && qtchooser -run-tool=qmake -qt=5 .. && make
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/build/${APP_NAME,,} /usr/local/bin  # No 'install' target for make
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/ui/svg/${APP_NAME,,}.svg /usr/local/share/pixmaps/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/pixmaps/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;System;
Keywords=Database;SQL;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install YouTube-DL-PyTK simple Python/Tkinter GUI for downloading videos from YouTube from package
APP_NAME=YouTube-DL-PyTK
APP_GUI_NAME="Simple Python/Tkinter GUI for downloading videos from YouTube."
APP_VERSION=25.04.09
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}_${APP_VERSION}
sudo apt-get install -y python3-tk menu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/youtube-dl-gtk/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME}
sudo /tmp/${FILE_NAME}/${APP_NAME}/install.sh
cd $HOME
sudo -rm -rf /tmp/${APP_NAME}*

# Install Muse Qt-based digital audio workstation (DAW) and MIDI/sudio sequencer with recording and editing capabilities from source
APP_NAME=Muse
APP_GUI_NAME="Qt-based digital audio workstation (DAW) and MIDI/sudio sequencer with recording and editing capabilities."
APP_VERSION=4.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential cmake libsndfile1-dev libsamplerate0-dev libjack-jackd2-dev ladspa-sdk qt5-default qttools5-dev qttools5-dev-tools liblo-dev dssi-dev lv2-dev libsamplerate0-dev libsndfile1-dev git libfluidsynth-dev libgtkmm-2.4-dev librtaudio-dev libqt5svg5-dev libinstpatch-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/l${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p build && cd build
cmake -DCMAKE_BUILD_TYPE=release .. && make clean all && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Hypercube Qt-based graph visualization tool from Debian package
APP_NAME=Hypercube
APP_VERSION=1.7.0
APP_EXT=deb
source /etc/lsb-release
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/tumic:/${APP_NAME}/xUbuntu_${DISTRIB_RELEASE}/${KERNEL_TYPE}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Colon Electron-based flexible text editor and hybrid IDE from AppImage
APP_NAME=Colon
APP_GUI_NAME="Electron-based flexible text editor and hybrid IDE."
APP_VERSION=1.4.4
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Chhekur/colon-ide/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -f -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=IDE;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install ff Rust-based, cross-platform CLI file finder from package
APP_NAME=ff
APP_GUI_NAME="Rust-based, cross-platform CLI file finder."
APP_VERSION=0.1.8
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-${ARCH_TYPE}-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/vishaltelangre/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Dr. Geo cross-platform interactive geometry package from package
APP_NAME=DrGeo
APP_GUI_NAME="Cross-platform interactive geometry package."
APP_VERSION=19.03a
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	sudo dpkg --add-architecture i386  # Add libraries for 32-bit architecture
	sudo apt-get update -y
	sudo apt-get dist-upgrade -y
	sudo apt-get install -y libcairo2:i386 libgl1-mesa-glx:i386
else    # Otherwise use version for 32-bit kernel
	sudo apt-get install -y libcairo2 libgl1-mesa-glx
fi
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-${ARCH_TYPE}-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/vishaltelangre/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install REDasm interactive, multiarchitecture, Qt-based disassembler from AppImage
# https://redasm.io/
APP_NAME=REDasm
APP_GUI_NAME="Interactive, multiarchitecture, Qt-based disassembler."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Disassembly;"
APP_VERSION=3.0_BETA5
APP_EXT=AppImage
FILE_NAME=${APP_NAME}_${APP_VERSION}_Linux_AMD64
sudo apt-get install -y qt5-default libqt5webengine5 libqt5webenginewidgets5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/REDasmOrg/${APP_NAME}/releases/download/v3.0.0-beta5/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/REDasmOrg/${APP_NAME}/master/res/logo.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo -rm -rf /tmp/${APP_NAME}*

# Install Raven Reader Electron-based RSS news reader from AppImage
APP_NAME=Raven-Reader
APP_GUI_NAME="Electron-based RSS news reader."
APP_VERSION=1.0.79
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hello-efficiency-inc/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://raw.githubusercontent.com/hello-efficiency-inc/raven-reader/master/build/icons/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -f -s /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME}.png /usr/local/share/icons/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;
Keywords=RSS;News;Aggregator;Reader;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install SmallPassKeeper Java-based password manager from Debian package
APP_NAME=SmallPassKeeper
APP_VERSION=0.9.8
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/smallpasskepper/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install GPT fdisk (gdisk) disk partitioning tool for GUID Partition Table (GPT) disks from Debian package
APP_NAME=gdisk
APP_VERSION=1.0.4-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/gptfdisk/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install fixparts Master Boot Record (MBR) repair tool for GUID Partition Table (GPT) disks from Debian package
APP_NAME=fixparts
APP_VERSION=1.0.4-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/gptfdisk/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Filetto cross-platform FTP client & server from package
APP_NAME=Filetto
APP_GUI_NAME="Cross-platform FTP client & server."
APP_VERSION=1.2
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME,,}-linux-${ARCH_TYPE}-${APP_VERSION}
sudo apt-get install -y libicu63
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;
Keywords=FTP;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo -rm -rf /tmp/${APP_NAME}*

# Install Lush Lisp dialect with extensions for object-oriented and array-oriented programming from source
APP_NAME=Lush
APP_GUI_NAME="Lisp dialect with extensions for object-oriented and array-oriented programming."
APP_VERSION=2.0.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y binutils-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/l${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make clean all && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install pyFileSearcher cross-platform Python/Qt GUI file search tool from package
APP_NAME=pyFileSearcher
APP_GUI_NAME="Cross-platform Python/Qt GUI file search tool."
APP_VERSION=1.1.1
APP_EXT=tgz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME}-${APP_VERSION}_linux_qt5_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=File;Search;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo -rm -rf /tmp/${APP_NAME}*

# Install ArgoUML Java-based UML diagram editor/modeling tool from package
APP_NAME=ArgoUML
APP_GUI_NAME="Java-based UML diagram editor/modeling tool."
APP_VERSION=0.34
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://argouml-downloads.tigris.org/nonav/${APP_NAME,,}-${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
Icon=/opt/${APP_NAME,,}/icon/${APP_NAME,,}2.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=UML;Diagramming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install NoSQLBooster cross-platform GUI manager for MongoDB from AppImage
APP_NAME=NoSQLBooster
APP_GUI_NAME="Cross-platform GUI manager for MongoDB."
APP_VERSION=5.1.5
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}4mongo-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://nosqlbooster.com/s3/download/releasesv5/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -f -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Database;NoSQL;MongoDB;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Inboxer cross-platform, Electron-based Gmail desktop client from Debian package
APP_NAME=Inboxer
APP_GUI_NAME="Cross-platform, Electron-based Gmail desktop clienti."
APP_VERSION=1.3.2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/denysdovhan/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install SQLite-New cross-platform Qt-based SQLite GUI manager from source
APP_NAME=SQLite-New
APP_GUI_NAME="Cross-platform Qt-based SQLite GUI manager."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-master
sudo apt-get install -y qt5-default libsqlite3-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/srgank/${APP_NAME,,}/archive/master.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME}-master
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 CONFIG+=release PREFIX=/usr/local .. && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Space Faring 2D single-player turn-based 4X space conquest strategy game from package
APP_NAME=Space-Faring
APP_GUI_NAME="2D single-player turn-based 4X space conquest strategy game."
APP_VERSION=0.1.0
APP_EXT=jar
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar ${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar ${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Games;Simulation;Space;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Radio Player Forte Plus cross-platform Internet radio player from package
APP_NAME=RadioPlayer
APP_GUI_NAME="Cross-platform Internet radio player."
APP_VERSION=6.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/radio-player-forte-plus/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/radio-player
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/radio-player
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Multimedia;Entertainment;
Keywords=Audio;Radio;Player;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install QElectroTech electronic diagraming tool from PPA
sudo add-apt-repository -y ppa:scorpio/ppa
sudo apt-get update -y
sudo apt-get install -y qelectrotech

# Install SQLTabs cross-platform, multi-database (MySQL, PostgreSQL, SQL Server, etc.) GUI database management/client tool from package
APP_NAME=SQLTabs
APP_GUI_NAME="Cross-platform, multi-database (MySQL, PostgreSQL, SQL Server, etc.) GUI database management/client tool."
APP_VERSION=1.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}.linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sasha-alias/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,}*/* /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Database;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Moeditor cross-platform, Electron-based Markdown editor from Debian package
APP_NAME=Moeditor
APP_GUI_NAME="Cross-platform, Electron-based Markdown editor."
APP_VERSION=0.2.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v0.2.0-beta/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Persepolis Python-based GUI for aria2 download manager from Debian package
APP_NAME=Persepolis
APP_GUI_NAME="Python-based GUI for aria2 download manager."
APP_VERSION=4.2.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}.0_all
sudo apt-get install -y aria2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/persepolisdm/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install NSBase cross-platform database alternative to MS Access built with SQLite from Debian package
APP_NAME=NSBase
APP_GUI_NAME="Cross-platform database alternative to MS Access."
APP_VERSION=1.15.0
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux32-i386
	APP_VERSION=1.9.9
fi
FILE_NAME=${APP_NAME,,}-${ARCH_TYPE}-V${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Apricot Java-based database ERD, design, and reverse-engineering tool from package
APP_NAME=ApricotDB
APP_GUI_NAME="Java-based database ERD, design, and reverse-engineering tool."
APP_VERSION=2.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/apricot-db/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/apricot/* /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/startup.sh
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/startup.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development
Keywords=Database;SQL;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install VSCodium open-source version of Visual Studio Code (VSCode) from repository
# https://www.fossmint.com/vscodium-clone-of-visual-studio-code-for-linux/
wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg | sudo apt-key add -
echo 'deb https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/repos/debs/ vscodium main' | sudo tee --append /etc/apt/sources.list.d/vscodium.list
sudo apt-get update
sudo apt-get install -y vscodium

# Install Coffee minimalist news and weather widget from Debian package
# https://www.fossmint.com/coffee-news-and-weather-app-for-linux/
APP_NAME=Coffee
APP_GUI_NAME="Minimalist news and weather widget."
APP_VERSION=1.1.0
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(ar|bi|co|di)$ ]]; then
	VERSION_NUMBER=17.10
	VERSION_NAME=artful
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(ze)$ ]]; then
	VERSION_NUMBER=17.04
	VERSION_NAME=zesty
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ ^(xe|ya)$ ]]; then
	VERSION_NUMBER=16.10
	VERSION_NAME=xenial
fi
APP_EXT=deb
FILE_NAME=com.github.nick92.${APP_NAME,,}_${APP_VERSION}~ubuntu${VERSION_NUMBER}_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/~coffee-team/+archive/ubuntu/${APP_NAME,,}/+files/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Mattermost cross-platform, Electron-based workplace messaging alternative to Slack from Debian package
APP_NAME=Mattermost
APP_GUI_NAME="Cross-platform, Electron-based workplace messaging alternative to Slack."
APP_VERSION=5.12.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-desktop-${APP_VERSION}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://releases.mattermost.com/desktop/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Doffen SSH Tunnel cross-platform SSH terminal, file transfer, and tunnelling tool from AppImage
APP_NAME=DoffenSSHTunnel
APP_GUI_NAME="Cross-platform SSH terminal, file transfer, and tunnelling tool."
APP_VERSION=0.9.41
APP_EXT=AppImage
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME}-v${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=System;
Keywords=SSH;Networking;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Yet Another Python Sudoku (YAPySudoku) puzzle game built with wxPython and Pygame from package
APP_NAME=YAPySudoku
APP_GUI_NAME="Puzzle game built with wxPython and Pygame."
APP_VERSION=4.0.4
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y python3-pygame python3-wxgtk4.0
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py
Icon=/opt/${APP_NAME,,}/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Sudoku;Puzzle;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Entity Relationship Designer Java-based database design tool from Debian package
APP_NAME=ERDesignerNG
APP_GUI_NAME="Java-based database design tool."
APP_VERSION=3.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y openjdk-11-jre
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/mogwai/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Taskboard PHP/SQLite-based Kanban-style task management tool from package
APP_NAME=TaskBoard
APP_GUI_NAME="PHP/SQLite-based Kanban-style task management tool."
APP_VERSION=N/A
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kiswa/TaskBoard/archive/master.zip
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}-master/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_general_ci;"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
cd ${WWW_HOME}/${APP_NAME,,}
./build/composer.phar install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;Programming;
Keywords=Task Management;Project Management;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install CutePy Qt-based interactive Python console with with variable explorer, command history, and syntax highlighting from package
APP_NAME=CutePy
APP_GUI_NAME="Qt-based interactive Python console with with variable explorer, command history, and syntax highlighting."
APP_VERSION=1.1
APP_EXT=zip
FILE_NAME=${APP_NAME}_v${APP_VERSION}
sudo apt-get install -y python3-pyqt5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/${APP_NAME}.pyw
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/${APP_NAME}.py
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install MDyna React- and Electron-based Markdown editor from Debian package
APP_NAME=MDyna
APP_GUI_NAME="React- and Electron-based Markdown editor."
APP_VERSION=0.5.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}-app/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install SQLite3 Page Explorer Electron-based tool for exploring internal organization of SQLite 3 databases from package
APP_NAME=SQLite3-Page-Explorer
APP_GUI_NAME="Electron-based tool for exploring internal organization of SQLite 3 databases."
APP_VERSION=1.0-linux
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/siara-cc/sqlite3_page_explorer/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Database;SQLite;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install jMathPaper Java-based notepad calculator from package
APP_NAME=jMathPaper
APP_GUI_NAME="Java-based notepad calculator."
APP_VERSION=1.3.1
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-full
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.com/RobertZenz/${APP_NAME}/uploads/3cff36ff12286098b47b08cc23018b68/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Education;
Keywords=Calculator
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install ripgrep command-line file search tool that recursively traverses directory structure from Debian package
APP_NAME=ripgrep
APP_GUI_NAME="Command-line file search tool that recursively traverses directory structure."
APP_VERSION=14.1.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/BurntSushi/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Encryptic Electron-based encryption-focused Markdown note-taking tool from package
APP_NAME=Encryptic
APP_GUI_NAME="Electron-based encryption-focused Markdown note-taking tool."
APP_VERSION=0.1.0
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=ia32
fi
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/encryptic-team/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Notepad;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install PotatoSQL Java-based database design and learning tool from package
# https://github.com/x-jrga/potatosql
APP_NAME=PotatoSQL
APP_GUI_NAME="Java-based database design and learning tool."
APP_VERSION=0.10
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION//0./}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/xjrga/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.jar
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Database;SQL;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install SOFA Statistics simple statistics, analysis, and reporting tool from Debian package
APP_NAME=SOFAStatistics
APP_GUI_NAME="Simple statistics, analysis, and reporting."
APP_VERSION=1.5.7
APP_EXT=deb
FILE_NAME=sofastats-${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Knobjex wxPython personal information manager (PIM) from package
APP_NAME=Knobjex
APP_GUI_NAME="wxPython personal information manager (PIM)."
APP_VERSION=5.01
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_manual_install_${APP_VERSION}
sudo apt-get install -y python3-wxgtk4.0
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-info-manager/${FILE_NAME}.${APP_EXT}
unzip /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/${APP_NAME,,}*source/* /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/main_startup.py
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/main_startup.py
Icon=/opt/${APP_NAME,,}/icons/kjx_logo.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Office;
Keywords=PIM;Calendar;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Gaphor simple Python UML modeling tool from AppImage
APP_NAME=Gaphor
APP_GUI_NAME="Simple Python UML modeling tool."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="UML;Modeling;"
APP_VERSION=2.6.4
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/master/logos/${APP_NAME,,}-48x48.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install LSD (LSDeluxe) Rust-based next-generation 'ls' command from package
APP_NAME=LSD
APP_GUI_NAME="Rust-based next-generation 'ls' command."
APP_VERSION=1.1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}.1 /usr/local/share/man/man1
sudo cp -a /tmp/${FILE_NAME}/autocomplete/${APP_NAME,,}.bash-completion /etc/bash_completion.d/
sudo cp -a /tmp/${FILE_NAME}/autocomplete/_${APP_NAME,,} /etc/bash_completion.d/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Hypernomicon Java-based research tracking database with built-in PDF viewer from package
APP_NAME=Hypernomicon
APP_GUI_NAME="Java-based research tracking database with built-in PDF viewer."
APP_VERSION=1.31
APP_EXT=sh
FILE_NAME=${APP_NAME}_linux_${APP_VERSION//./_}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo sh /tmp/${FILE_NAME}.${APP_EXT} -c -q -dir /opt/${APP_NAME,,} -overwrite

# Install Maxit Qt/OpenGL-based math puzzle game from source
APP_NAME=Maxit
APP_GUI_NAME="Qt/OpenGL-based math puzzle game."
APP_VERSION=1.04
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}.d
sudo apt-get install -y qt5-default qt5-qmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${FILE_NAME,,}
mkdir -p build && cd build
qtchooser -run-tool=qmake -qt=5 ../${APP_NAME,,}.pro && make
sudo cp /tmp/${FILE_NAME}/${FILE_NAME,,}/build/${APP_NAME} /usr/local/bin  # No 'install' target for make
sudo cp /tmp/${FILE_NAME}/${FILE_NAME,,}/images.d/${APP_NAME,,}.png /usr/local/share/pixmaps/${APP_NAME,,}.png
sudo ln -s -f /usr/local/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME}
Icon=/usr/local/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;Education;
Keywords=Puzzle;Game;Math;Education;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Motrix Electron-based GUI download manager (aria wrapper) from Debian package
APP_NAME=Motrix
APP_GUI_NAME="Electron-based GUI download manager (aria wrapper)."
APP_VERSION=1.8.19
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/agalwood/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Praxis Live Java hybrid visual live programming environment based on Netbeans from AppImage
APP_NAME=PraxisLIVE
APP_GUI_NAME="Java hybrid visual live programming environment based on Netbeans."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Java;NetBeans;"
APP_VERSION=5.2.0
APP_EXT=AppImage
ICON_EXT=ico
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.${ICON_EXT} -J -L https://raw.githubusercontent.com/praxis-live/praxis-live/master/resources/${APP_NAME,,}.${ICON_EXT}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.${ICON_EXT} /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.${ICON_EXT}
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install sslh protocol multiplexer that allows sharing SSL/HTTPS and SSH on same port from source
# http://rutschle.net/tech/sslh/README.html
APP_NAME=sslh
APP_GUI_NAME="Protocol multiplexer that allows sharing SSL/HTTPS and SSH on same port."
APP_VERSION=2.2.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libwrap0-dev libconfig-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/yrutschle/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
sudo cp basic.cfg /etc/sslh.cfg
sudo cp scripts/etc.init.d.sslh /etc/init.d/sslh
sudo update-rc.d sslh defaults

# Install Rats on the Boat P2P BitTorrent search engine desktop client with integrated BitTorrent client from Debian package
APP_NAME=Rats-Search
APP_GUI_NAME="P2P BitTorrent search engine desktop client with integrated BitTorrent client."
APP_VERSION=1.11.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/DEgITx/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install pstoedit PostScript/PDF converter to other vector formats from source
APP_NAME=pstoedit
APP_GUI_NAME="PostScript/PDF converter to other vector formats."
APP_VERSION=3.78
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y ghostscript
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure.sh && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install mtCellEdit lightweight Qt-based spreadsheet program from AppImage
APP_NAME=mtCellEdit
APP_GUI_NAME="Lightweight Qt-based spreadsheet program."
APP_VERSION=3.8
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-qt4-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/matyler/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=Spreadsheet;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Arronax Python/GTK GUI for creating/editing starter (.desktop) files from Debian package
APP_NAME=Arronax
APP_GUI_NAME="Python/GTK GUI for creating/editing starter (.desktop) files."
APP_VERSION=0.7.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.florian-diesch.de/software/${APP_NAME,,}/dist/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install mtag command-line media tagging utility from source
APP_NAME=mtag
APP_GUI_NAME="Command-line media tagging utility."
APP_VERSION=2.2.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libtag1-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/psemiletov/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install

# Install Dnote cross-platform lightweight encrypted console notebook for developers from package
APP_NAME=Dnote
APP_GUI_NAME="Cross-platform lightweight encrypted console notebook for developers."
APP_VERSION=0.15.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/cli-v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Gis Weather desktop weather widget from Debian package
APP_NAME=Gis-Weather
APP_GUI_NAME="Desktop weather widget."
APP_VERSION=0.8.4.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Fractal Zoomer Java-based fractal generator and explorer tool from package
APP_NAME=FractalZoomer
APP_GUI_NAME="Java-based fractal generator and explorer tool."
APP_VERSION=1.0.9.4
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/Fractal%20Zoomer.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R a+w /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Science;
Keywords=Graphics;Fractal;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Iso2Usb utility to create bootable USB drive from ISO image from Debian package
APP_NAME=Iso2Usb
APP_GUI_NAME="Utility to create bootable USB drive from ISO image."
APP_VERSION=0.1.5.0
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/KaustubhPatange/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}

# Install Tute Java-based Spanish playing card game from package
APP_NAME=Tute
APP_GUI_NAME="Java-based Spanish playing card game."
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME}-cardgame/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Cards;Games;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Topgrade cross-platform/cross-distribution upgrade manager from package
# https://www.ostechnix.com/how-to-upgrade-everything-using-a-single-command-in-linux/
APP_NAME=Topgrade
APP_GUI_NAME="Cross-platform/cross-distribution upgrade manager."
APP_VERSION=16.0.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/topgrade-rs/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Race Into Space SDL-based remake of classic Interplay game from source
APP_NAME=RaceIntoSpace
APP_GUI_NAME="SDL-based remake of classic Interplay game."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=N/A
sudo apt-get install -y cmake libsdl-dev libboost-dev libpng-dev libjsoncpp-dev libogg-dev libvorbis-dev libtheora-dev libprotobuf-dev protobuf-compiler
cd /tmp
git clone git://github.com/${APP_NAME,,}/${APP_NAME,,}.git
mkdir ${APP_NAME,,}-build
cd ${APP_NAME,,}-build
cmake ../${APP_NAME,,} && make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/${APP_NAME,,}/images/aprog.0.6.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;Education;
Keywords=Space;Simulation;Retro;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install IP Calculator Java-based IP subnet calculator from package
APP_NAME=IP-Calculator
APP_GUI_NAME="Java-based IP subnet calculator."
APP_VERSION=28-06-2019
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Network;System;Accessories;
Keywords=Networking;Calculator;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install GitApp cross-platform Electron-based desktop GitHub client from AppImage
APP_NAME=GitApp
APP_GUI_NAME="Cross-platform Electron-based desktop GitHub client."
APP_VERSION=3.3.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-linux-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dan-online/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Git;GitHub;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Scratux Linux binaries for Scatch Desktop visual programming tool from Debian package
APP_NAME=Scratux
APP_GUI_NAME="Linux binaries for Scatch Desktop visual programming tool."
APP_VERSION=1.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v1.1/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install minuteProject Java-based reverse-engineering tool from package
APP_NAME=minuteProject
APP_GUI_NAME="Java-based reverse-engineering tool."
APP_VERSION=0.9.12
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/bin/start-console.sh
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib:\$PATH; export PATH
/opt/${APP_NAME,,}/bin/start-console.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib
Exec=/opt/${APP_NAME,,}/bin/start-console.sh
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Hacking;Reversing;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install phpIPAM open-source PHP/MySQL-based IP address management tool (manual installation)
APP_NAME=phpIPAM
APP_VERSION=1.5
APP_EXT=tar
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}admin
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libwbxml2-utils tnef
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}/* ${WWW_HOME}/${APP_NAME,,}
sudo cp ${WWW_HOME}/${APP_NAME,,}/config.dist.php ${WWW_HOME}/${APP_NAME,,}/config.php
sudo sed -i.bak "s@define('BASE', \"/\");@define('BASE', \"/phpipam\");@g" ${WWW_HOME}/${APP_NAME,,}/config.php
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
mysql -u root -proot phpipam < ${WWW_HOME}/${APP_NAME,,}/db/SCHEMA.sql
xdg-open http://localhost/${APP_NAME,,}/ &
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install k3rmit VTE-based minimal terminal emulator from source
APP_NAME=k3rmit
APP_GUI_NAME="VTE-based minimal terminal emulator."
APP_VERSION=1.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libvte-2.91-dev libgtk-3-dev cmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://codeload.github.com/keylo99/${APP_NAME,,}/${APP_EXT}/${APP_VERSION}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p build && cd build
cmake ../ -DCMAKE_INSTALL_PREFIX=/usr/local && make && sudo make install && sudo ldconfig
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Terminal;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Cloaker cross-platform GUI password-based file encryption tool from package
APP_NAME=Cloaker
APP_GUI_NAME="Cross-platform GUI password-based file encryption tool."
APP_VERSION=2.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/spieglt/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME}.run /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Encryption;Security;Privacy;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Kiwix offline Wikipedia downloader/reader desktop client from AppImage
APP_NAME=Kiwix
APP_GUI_NAME="Offline Wikipedia downloader/reader desktop client."
APP_VERSION=2.3.1
APP_EXT=appimage
FILE_NAME=${APP_NAME,,}-desktop_x86_64_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT,,}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Office;
Keywords=Wikipedia;Reader;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ProtoGraphQL Electron-based cross-platform GraphQL schema prototyping tool from Debian package
APP_NAME=ProtoGraphQL
APP_GUI_NAME="Electron-based cross-platform GraphQL schema prototyping tool."
APP_VERSION=1.0.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/oslabs-beta/${APP_NAME,,}/releases/download/v1.0.0-beta/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Tartube PyGTK GUI frontend for youtube-dl for video download from package
APP_NAME=Tartube
APP_GUI_NAME="PyGTK GUI frontend for youtube-dl for video download."
APP_VERSION=2.5.100
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* /opt
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/icons/win/system_icon_32.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Multimedia;
Keywords=YouTube;Video;Audio;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Easy Cloud Shell Java-based web file manager with built-in text editor, terminal, image viewer and video player from package
APP_NAME=Easy-Cloud-Shell
APP_GUI_NAME="Java-based web file manager with built-in text editor, terminal, image viewer and video player."
APP_VERSION=0.6
APP_EXT=tar.gz
FILE_NAME=cloud-shell-bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/subhra74/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/start-cloud-shell.sh /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/start-cloud-shell.sh && xdg-open https://localhost:8055/
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;
Keywords=File;Manager;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Cicada bash-like shell implemented in Rust from package
APP_NAME=Cicada
APP_GUI_NAME="bash-like shell implemented in Rust."
APP_VERSION=0.9.8
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-${APP_VERSION}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/mitnk/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -R /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}

# Install Foliate simple Javascript-based modern GTK ebook reader from Debian package
APP_NAME=Foliate
APP_GUI_NAME="Simple Javascript-based modern GTK ebook reader."
APP_VERSION=3.3.0
APP_EXT=deb
FILE_NAME=com.github.johnfactotum.${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/johnfactotum/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Pista bash/zsh shell prompt implemented in Rust from package
APP_NAME=Pista
APP_GUI_NAME="bash/zsh shell prompt implemented in Rust."
APP_VERSION=0.1.2
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/NerdyPepper/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -R /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}

# Install Eva shell/command-line calculator REPL implemented in Rust from package
APP_NAME=Eva
APP_GUI_NAME="Shell/command-line calculator REPL implemented in Rust."
APP_VERSION=0.3.1
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/NerdyPepper/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -R /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}

# Install Small Yet Powerful PHP Shell (SYPPS) from package
APP_NAME=SYPPS
APP_GUI_NAME="Small Yet Powerful PHP Shell (SYPPS)."
APP_VERSION=N/a
APP_EXT=php
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} ${WWW_HOME}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${FILE_NAME}.${APP_EXT}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=PHP;Shell;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
xdg-open http://localhost/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Gophwr GUI gopher client built with Racket from package
APP_NAME=Gophwr
APP_GUI_NAME="GUI gopher client built with Racket."
APP_VERSION=0.5.6
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-bin-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/erkin/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}/* /usr/local
sudo ldconfig
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;
Keywords=Gopher;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Phlipple 3D SDL-based puzzle game from source
APP_NAME=Phlipple
APP_GUI_NAME="3D SDL-based puzzle game."
APP_VERSION=0.8.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y pkg-config libsdl1.2-dev libvorbis-dev libglew-dev libsdl-image1.2-dev libsdl-mixer1.2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Hypnos Java-based minimalist music player from AppImage
APP_NAME=Hypnos
APP_GUI_NAME="Java-based minimalist music player."
APP_VERSION=beta6_2019-07-14_b1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-nix-64bit-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://hypnosplayer.org/download/beta6/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=AudioVideo;Multimedia;
Keywords=MP3;Music;Player;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install xsnow desktop decoration from source
APP_NAME=xsnow
APP_GUI_NAME=""
APP_VERSION=3.8.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_${KERNEL_TYPE}
sudo apt install -y build-essential libgtk-3-dev libxt-dev libgsl-dev libxpm-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
sudo apt remove -y build-essential libgtk-3-dev libxt-dev libgsl-dev libxpm-dev && sudo apt autoremove -f -y
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Zola standalone command-line CMS and blogging tool built with Rust from package
APP_NAME=Zola
APP_GUI_NAME="Standalone command-line CMS and blogging tool built with Rust."
APP_VERSION=0.17.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/getzola/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install WebChangeMonitor GUI web page change tracking/monitoriing tool from package
APP_NAME=WebChangeMonitor
APP_GUI_NAME="GUI web page change tracking/monitoriing tool."
APP_VERSION=23.06
APP_EXT=zip
FILE_NAME=${APP_NAME}_${APP_VERSION//./_}
sudo apt-get install -y libwxgtk3.0-0v5 libwxbase3.0-0v5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/webchangemon/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME}
sudo ln -s -f /usr/local/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;
Keywords=Monitoring;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install muCommander Java-based dual-pane file manager from Debian package
APP_NAME=muCommander
APP_GUI_NAME="Java-based dual-pane file manager"
APP_VERSION=1.3.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION//-3/}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install VCT (Video Converter & Transcoder) .NET-based cross-platform GUI front-end for ffmpeg from package
# Must install Mono binaries (see above) before installing VCT.
APP_NAME=VCT
APP_GUI_NAME=".NET-based cross-platform GUI front-end for ffmpeg."
APP_VERSION=1.9.7
APP_EXT=zip
FILE_NAME=${APP_NAME}_Linux_mono_binary
sudo apt-get install -y mono-complete ffmpeg
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/videoconvertertranscoder/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/VCT_mono/* /opt/${APP_NAME,,}
sudo chmod 775 -R /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}/VCT_mono/*.ttf /usr/local/share/fonts
sudo fc-cache -f -v
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
mono /opt/${APP_NAME,,}/${APP_NAME}.exe "$@"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Multimedia;Audio;Video;
Keywords=FFMpeg;Converter;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Bookworm ebook reader with support for EPUB, PDF, and MOBI formats from PPA
APP_NAME=Bookworm
sudo apt-add-repository -y ppa:bookworm-team/${APP_NAME,,}
sudo apt-get update
sudo apt-get install -y ${APP_NAME,,}

# Install EPR Python-based command-line EPUB reader from package
APP_NAME=EPR
APP_GUI_NAME="Python-based command-line EPUB reader."
APP_VERSION=2.4.15
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/wustho/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 ./setup.py install
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install ClipIt GTK+ 2/3 minimalist clipboard manager from source
APP_NAME=ClipIt
APP_GUI_NAME="GTK+ 2/3 minimalist clipboard manager."
APP_VERSION=1.4.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgtk2.0-dev xdotool autotool intltool
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/CristianHenzel/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME}-${APP_VERSION}
./autogen.sh && ./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install shc (Shell Script Compiler) tool that compiles shell scripts to C code from source
APP_NAME=shc
APP_GUI_NAME="Tool that compiles shell scripts to C code."
APP_VERSION=4.0.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgtk2.0-dev xdotool autotool intltool
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/neurobin/${APP_NAME}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p m4
./autogen.sh && ./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Tektronix 4010, 4013, 4014 and 4015 Storage Tube Terminal Emulator from source
APP_NAME=Tek4010
APP_GUI_NAME="Tektronix 4010, 4013, 4014 and 4015 Storage Tube Terminal Emulator."
APP_VERSION=1.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y libgtk-3-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rricharz/${APP_NAME}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo rm -rf ${APP_NAME,,}
make
cd /tmp
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Terminology terminal emulator built on Enlightenment framework from source
APP_NAME=Terminology
APP_GUI_NAME="Terminal emulator built on Enlightenment framework."
APP_VERSION=1.13.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libefl-all-dev meson
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/borisfaure/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./autogen.sh && cd build && ninja && sudo ninja install
cd /tmp
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install FileCtor Javascript-based file inspector with interactive console from Debian package
APP_NAME=FileCtor
APP_GUI_NAME="Javascript-based file inspector with interactive console."
APP_VERSION=1.4.2
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_EXT}-x64
curl -o /tmp/${FILE_NAME}.zip -J -L https://github.com/tomaschyly/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.zip
cd /tmp
dtrx -n /tmp/${FILE_NAME}.zip
sudo gdebi -n /tmp/${FILE_NAME}/tch-${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install DevedeNG Python-based video DVD and CD (VCD, sVCD or CVD) creator from Debian package
APP_NAME=DevedeNG
APP_GUI_NAME="Python-based video DVD and CD (VCD, sVCD or CVD) creator."
APP_VERSION=4.15.0
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (di|co)$ ]]; then  # 19.04, 18.10
	DISTRIB_CODENAME=cosmic
else
	DISTRIB_CODENAME=bionic
fi
FILE_NAME=python3-${APP_NAME,,}-${DISTRIB_CODENAME}_${APP_VERSION}-ubuntu1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://rastersoft.com/descargas/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Terminus GTK3 terminal with support for tiled sub-terminals from Debian package
APP_NAME=Terminus
APP_GUI_NAME="GTK3 terminal with support for tiled sub-terminals."
APP_VERSION=1.5.0
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (di|co)$ ]]; then  # 19.04, 18.10
	DISTRIB_CODENAME=disco
else
	DISTRIB_CODENAME=bionic
fi
FILE_NAME=${APP_NAME,,}-${DISTRIB_CODENAME}_${APP_VERSION}-ubuntu1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://rastersoft.com/descargas/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install gImageReader GUI front-end for Tesseract OCR tool from Debian package
APP_NAME=gImageReader
APP_GUI_NAME="GUI front-end for Tesseract OCR tool."
APP_VERSION=3.3.1-1
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (di|co)$ ]]; then  # 19.04, 18.10
	DISTRIB_CODENAME=disco
else
	DISTRIB_CODENAME=bionic
fi
FILE_NAME=${APP_NAME,,}-gtk_${APP_VERSION}~${DISTRIB_CODENAME}ppa1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/~sandromani/+archive/ubuntu/${APP_NAME,,}/+files/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}-common_${APP_VERSION}~${DISTRIB_CODENAME}ppa1_all.${APP_EXT} -J -L https://launchpad.net/~sandromani/+archive/ubuntu/${APP_NAME,,}/+files/${APP_NAME,,}-common_${APP_VERSION}~${DISTRIB_CODENAME}ppa1_all.${APP_EXT}
sudo dpkg -i /tmp/${FILE_NAME}.${APP_EXT} /tmp/${APP_NAME,,}-common_${APP_VERSION}~${DISTRIB_CODENAME}ppa1_all.${APP_EXT}
sudo apt-get --fix-broken install -y
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Guymager forensic disk imaging tool from Debian package
APP_NAME=Guymager
APP_GUI_NAME="Forensic disk imaging tool."
APP_VERSION=0.8.11-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-beta_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/libguytools2_2.1.0-1_${KERNEL_TYPE}.${APP_EXT} -J -L https://downloads.sourceforge.net/libguytools/libguytools2_2.1.0-1_${KERNEL_TYPE}.${APP_EXT}
sudo dpkg -i /tmp/${FILE_NAME}.${APP_EXT} /tmp/libguytools2_2.1.0-1_${KERNEL_TYPE}.${APP_EXT}
sudo apt-get --fix-broken install -y
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install LCXterm ncurses-based terminal emulator from Debian package
APP_NAME=LCXterm
APP_GUI_NAME="ncurses-based terminal emulator."
APP_VERSION=0.9-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Milkman cross-platform JavaFX-based REST API client from package
APP_NAME=Milkman
APP_GUI_NAME="Cross-platform JavaFX-based REST API client."
APP_VERSION=5.7.1
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-dist-linux64-bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/warmuuh/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,}.sh /usr/local/bin/${APP_NAME,,}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME,,}/milk-bottle.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Test;Web Services;API;REST;
EOF
sudo mv /tmp/${FILE_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${FILE_NAME}*

# Install tre improved version of 'tree' command built with Rust from package
APP_NAME=tre
APP_GUI_NAME="Improved version of 'tree' command built with Rust."
APP_VERSION=0.4.0
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-${ARCH_TYPE}-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dduan/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Chess Tournaments cross-platform Java-based chess tournament organization tool from package
APP_NAME="Chess Tournaments"
APP_GUI_NAME="Cross-platform Java-based chess tournament organization tool."
APP_VERSION=2.0
APP_EXT=jar
FILE_NAME=${APP_NAME// /%20}%20${APP_VERSION}
DIR_NAME=${APP_NAME// /}
DIR_NAME=${DIR_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${DIR_NAME}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${DIR_NAME}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${DIR_NAME}
cat > /tmp/${DIR_NAME} << EOF
#! /bin/sh
cd /opt/${DIR_NAME}
PATH=/opt/${DIR_NAME}:\$PATH; export PATH
java -jar /opt/${DIR_NAME}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${DIR_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${DIR_NAME}
cat > /tmp/${FILE_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${DIR_NAME}
Exec=java -jar /opt/${DIR_NAME}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Entertainment;Games;
Keywords=Chess;Tournament;
EOF
sudo mv /tmp/${DIR_NAME}.desktop /usr/share/applications/
cd $HOME

# Install StarCalendar international calendar from Debian package
APP_NAME=StarCal
APP_GUI_NAME="International calendar."
APP_VERSION=3.2.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}3_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ilius/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install JE Editor minimalist Java text editor from package
APP_NAME="JE Editor"
APP_GUI_NAME="Minimalist Java text editor."
APP_VERSION=6.0
APP_EXT=jar
FILE_NAME=je
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/je-java/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${FILE_NAME}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${FILE_NAME}
cat > /tmp/${FILE_NAME} << EOF
#! /bin/sh
cd /opt/${FILE_NAME}
PATH=/opt/${FILE_NAME}:\$PATH; export PATH
java -jar /opt/${FILE_NAME}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}
cat > /tmp/${FILE_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${FILE_NAME}
Exec=java -jar /opt/${FILE_NAME}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Text;Editor;
EOF
sudo mv /tmp/${FILE_NAME}.desktop /usr/share/applications/
cd $HOME

# Install ogl pretty Git log printer command-line tool from package
APP_NAME=ogl
APP_GUI_NAME="Pretty Git log printer command-line tool from package."
APP_VERSION=0.0.2
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/onilton/${APP_NAME,,}/releases/download/v${APP_VERSION}/ogl
sudo cp -R /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install rmw (ReMove to Waste) command-line tool for sending files to trash can from Debian package
APP_NAME=rmw
APP_GUI_NAME="command-line tool for sending files to trash can."
APP_VERSION=0.7.04-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Debreate Debian package builder tool from Debian package
APP_NAME=Debreate
APP_GUI_NAME="Debian package builder tool."
APP_VERSION=0.7.next16-2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Graviton Electron-based minimalist code editor from AppImage
APP_NAME=Graviton
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Electron-based time-tracking tool with task management."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=2.3.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-Editor_Installer_${APP_VERSION}_linux_x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}-Code-Editor/${APP_NAME}-App/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME}-Code-Editor/${APP_NAME}-App/main/desktop/src-tauri/icons/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install mkcert Golang tool for creating SSL certificates for localhost from package
APP_NAME=mkcert
APP_GUI_NAME="Golang tool for creating SSL certificates for localhost."
APP_VERSION=1.4.2
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/FiloSottile/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo mv /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install lr file listing tool which includes the best features of ls(1), find(1), stat(1) and du(1) from source
APP_NAME=lr
APP_GUI_NAME="File listing tool which includes the best features of ls(1), find(1), stat(1) and du(1)."
APP_VERSION=1.4.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://codeload.github.com/leahneukirchen/${APP_NAME,,}/${APP_EXT}/v${APP_VERSION}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make all && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME}* /tmp/*${APP_NAME,,}*

# Install Java Multiprecision Calculator cross-platform calculator based on Java BigDecimal class from package
APP_NAME="MultiPrecision Calculator"
APP_GUI_NAME="Cross-platform calculator based on Java BigDecimal class."
APP_VERSION=2024-08-16
APP_EXT=7z
FILE_NAME=${APP_VERSION//-/}.${APP_NAME// /}.v1.2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/javamultiprecis/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/multicalcu
sudo cp -R /tmp/${FILE_NAME}/* /opt/multicalcu
sudo chmod -R 777 /opt/multicalcu
cat > /tmp/multicalcu << EOF
#! /bin/sh
cd /opt/multicalcu/_binary
PATH=/opt/multicalcu/_binary:\$PATH; export PATH
java -jar /opt/multicalcu/_binary/multicalcu-gui-v1.2-SNAPSHOT-all.jar
cd $HOME
EOF
sudo mv /tmp/multicalcu /usr/local/bin
sudo chmod a+x /usr/local/bin/multicalcu
cat > /tmp/multicalcu.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${FILE_NAME}
Path=/opt/multicalcu/_binary
Exec=java -jar /opt/multicalcu/_binary/multicalcu-gui-v1.2-SNAPSHOT-all.jar
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Math;
Keywords=Calculator;
EOF
sudo mv /tmp/multicalcu.desktop /usr/share/applications/
cd $HOME

# Install SQL Dynamite cross-platform Mono/.NET-based GUI database client from package
APP_NAME=SQL-Dynamite
APP_GUI_NAME="Cross-platform Mono/.NET-based GUI database client."
APP_VERSION=2.5.1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME//-/_}_Linux_${APP_VERSION}
sudo apt-get install -y mono-4.0-gac gtk-sharp2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/sql-dynamite/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/SQL*/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
mono /opt/${APP_NAME,,}/SqlDynamiteX.exe
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=mono /opt/${APP_NAME,,}/SqlDynamiteX.exe
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=SQL;Database;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install OverCASE Java-based integrate CASE tool from package
APP_NAME=OverCASE
APP_GUI_NAME="Java-based integrate CASE tool."
APP_VERSION=latest
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}-bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/org.aka.overcase.core.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${FILE_NAME}
Exec=java -jar /opt/${APP_NAME,,}/org.aka.overcase.core.jar
Icon=/opt/${APP_NAME,,}/OverCase.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=CASE;Modeling;Project Management;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install Gramps cross-platform desktop genealogy program with GEDCOM support from Debian package
APP_NAME=Gramps
APP_GUI_NAME="Cross-platform desktop genealogy program with GEDCOM support."
APP_VERSION=5.1.5
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install BinEd cross-platform Java-based binary/hexadecimal viewer/editor from Debian package
APP_NAME=BinEd
APP_GUI_NAME="Cross-platform Java-based binary/hexadecimal viewer/editor."
APP_VERSION=0.2.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Ubuntu Launchpad keyboard-centric launcher for Ubuntu from Debian package
APP_NAME=Launchpad
APP_GUI_NAME="Keyboard-centric launcher for Ubuntu."
APP_VERSION=1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/ubuntu-${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install JDBCSQL Java-based command-line SQL query tool from package
APP_NAME=JDBCSQL
APP_GUI_NAME="Java-based command-line SQL query tool."
APP_VERSION=1.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}/${FILE_NAME}.jar
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.jar "$1"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME

# Install Scribus cross-platform desktop publishing tool from AppImage
APP_NAME=Scribus
APP_GUI_NAME="Cross-platform desktop publishing tool."
APP_VERSION=1.6.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=Publishing;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install WTF cross-platform terminal-based dashboard utility from package
APP_NAME=WTF
APP_GUI_NAME="Cross-platform terminal-based dashboard utility."
APP_VERSION=0.43.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/wtfutil/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/wtfutil /usr/local/bin/${APP_NAME,,}
# Download sample configuration file
mkdir -p ${HOME}/.config/wtf
curl -o ${HOME}/.config/wtf/config.yml https://raw.githubusercontent.com/wtfutil/wtf/master/_sample_configs/sample_config.yml
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Pastel command-line color analysis and management tool from Debian package
APP_NAME=Pastel
APP_GUI_NAME="Command-line color analysis and management tool."
APP_VERSION=0.8.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sharkdp/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Gnome Feeds RSS feed reader from Flatpak
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub org.gabmus.gnome-feeds

# Install Starship minimal, customizable shell prompt from package
APP_NAME=Starship
APP_GUI_NAME="Minimal, customizable shell prompt."
APP_VERSION=1.23.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/x86_64-unknown-linux-gnu/${APP_NAME,,} /usr/local/bin
echo 'eval "$(starship init bash)"' >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Swifty lightweight, cross-platform, Electron-based password manager from Debian package
APP_NAME=Swifty
APP_GUI_NAME="Lightweight, cross-platform, Electron-based password manager."
APP_VERSION=0.6.7
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/swiftyapp/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install FeedReader GTK RSS feed reader for web-based RSS services from Flatpak
# https://github.com/jangernert/FeedReader
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub org.gnome.FeedReader

# Install Nift cross-platform web site generation and management framework from source
# https://www.nift.cc/
APP_NAME=NSM
APP_GUI_NAME="Cross-platform web site generation and management framework."
APP_VERSION=2.4.12
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/nifty-site-manager/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install-linux
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install Treebolic Java-based hierarchical data viewer using hyperbolic rendering from Debian package
APP_NAME=Treebolic
APP_GUI_NAME="Java-based hierarchical data viewer using hyperbolic rendering."
APP_VERSION=3.8.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-install-deb-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}*.deb
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install openTimetool web-based (PHP/MySQL) project time-tracking tool from package
APP_NAME=openTimetool
APP_GUI_NAME="Web-based (PHP/MySQL) project time-tracking tool."
APP_VERSION=2.7.2
APP_EXT=tar.bz2
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
sudo apt-get install -y html2pdf
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${FILE_NAME//_/-}/* ${WWW_HOME}/${APP_NAME,,}
sudo cp ${WWW_HOME}/${APP_NAME,,}/config-local.php.dist ${WWW_HOME}/${APP_NAME,,}/config-local.php
sudo sed -i 's@<account>@'${DB_USER}'@g' ${WWW_HOME}/${APP_NAME,,}/config-local.php
sudo sed -i 's@<password>@'${DB_PASSWORD}'@g' ${WWW_HOME}/${APP_NAME,,}/config-local.php
sudo sed -i 's@localhost/'${APP_NAME}'@localhost/'${DB_NAME}'@g' ${WWW_HOME}/${APP_NAME,,}/config-local.php
sudo sed -i 's@AllowOverride None@AllowOverride All@g' /etc/apache2/apache2.conf
sudo systemctl restart apache2.service
# Create symbolic link for each language
sudo ln -s -f ${WWW_HOME}/${APP_NAME,,}/htdocs ${WWW_HOME}/${APP_NAME,,}/htdocs/en
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}/htdocs/tmp
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+x ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+r ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
# Populate DB from script
mysql --host=localhost --user=${DB_USER} --password=${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/mysql.sql
xdg-open http://localhost/${APP_NAME,,}/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/media/image/tt_logo.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=Time;Management;Tracking;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/

# Install BashDB bash shell debugger from source
APP_NAME=BashDB
APP_GUI_NAME="bash shell debugger."
APP_VERSION=5.0-1.1.2
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Jag console text editor with syntax highlighting for C++, Python, and Tamgu from package
# https://github.com/naver/tamgu/wiki/jag:-a-simple-terminal-editor-with-syntax-highlighting
APP_NAME=Jag
APP_GUI_NAME="Console text editor with syntax highlighting for C++, Python, and Tamgu."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/naver/tamgu/releases/download/tamgu.jag/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,}/ubuntu/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install Notekit GTK3 hierarchical Markdown notetaking tool from package
# https://github.com/blackhole89/notekit
APP_NAME=Notekit
APP_GUI_NAME="GTK3 hierarchical Markdown notetaking tool."
APP_VERSION=20190907
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgtkmm-3.0-1v5 libgtksourceviewmm-3.0-0v5 libjsoncpp1 zlib1g
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://twilightro.kafuka.org/%7Eblackhole89/files/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;Accessories;
Keywords=Markdown;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install Ulauncher GTK+ Linux application launcher from Debian package
APP_NAME=Ulauncher
APP_GUI_NAME="GTK+ Linux application launcher."
APP_VERSION=5.15.7
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/${APP_VERSION//.b/-b}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install Crypter cross-platform, Electron-based password-less encryption tool from AppImage
APP_NAME=Crypter
APP_GUI_NAME="Cross-platform, Electron-based password-less encryption tool."
APP_VERSION=4.0.0
APP_EXT=AppImage
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=-i386
fi
FILE_NAME=${APP_NAME}-${APP_VERSION}${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/HR/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Accessories;
Keywords=Security;Encryption;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install BIC minimalist C interpreter and REPL from source
APP_NAME=BIC
APP_GUI_NAME="Minimalist C interpreter and REPL."
APP_VERSION=1.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}
sudo apt-get install -y build-essential libreadline-dev autoconf-archive libgmp-dev expect flex bison automake m4 libtool pkg-config
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hexagonal-sun/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
autoreconf -i && ./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install bin2header utility to convert binary files to character array to include in C/C++ source file from source
APP_NAME=bin2header
APP_GUI_NAME="Utility to convert binary files to character array to include in C/C++ source file."
APP_VERSION=0.2.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential cmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p build && cd build
cmake ../ && make && sudo make install   # Build with CMake due to problems with 'configure'
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install FSelect console file search tool with SQL syntax from package
APP_NAME=FSelect
APP_GUI_NAME="Console file search tool with SQL syntax."
APP_VERSION=0.8.4
APP_EXT=gz
FILE_NAME=${APP_NAME,,}-x86_64-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jhspetersson/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cp ${FILE_NAME} ${APP_NAME,,}
chmod a+x ${APP_NAME,,}
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install SQL Servant Java/JDBC-based console pre-configured query runner from package
APP_NAME=SQL-Servant
APP_GUI_NAME="Java/JDBC-based console pre-configured query runner."
APP_VERSION=2.1.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-noarch-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/sqlsrvnt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/sqlsrvnt
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install GORSS console-based RSS/Atom feed reader with theming capability from package
APP_NAME=GORSS
APP_GUI_NAME="Console-based RSS/Atom feed reader with theming capability."
APP_VERSION=0.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Lallassu/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/${APP_NAME,,}_linux /usr/local/bin/${APP_NAME,,}_linux
mkdir -p $HOME/.config/${APP_NAME,,}
cp /tmp/${FILE_NAME}/${APP_NAME,,}/${APP_NAME,,}.conf $HOME/.config/${APP_NAME,,}
cp /tmp/${FILE_NAME}/${APP_NAME,,}/themes/*.theme $HOME/.config/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd \$HOME/.config/${APP_NAME,,}
PATH=/usr/local/bin:\$PATH; export PATH
/usr/local/bin/${APP_NAME,,}_linux -config \$HOME/.config/${APP_NAME,,}/gorss.conf -theme \$HOME/.config/${APP_NAME,,}/default.theme
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install TaskUnifier cross-platform, Electron-based GTD task manager from package
APP_NAME=TaskUnifier
APP_GUI_NAME="Cross-platform, Electron-based GTD task manager."
APP_VERSION=1.2.12
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-app-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,}-app /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}-app
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Task;Management;GTD;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install HTTPToolkit Electron-based cross-platform HTTP(S) debugging proxy, analyzer and client from package
APP_NAME=HttpToolkit
APP_GUI_NAME="Electron-based cross-platform HTTP(S) debugging proxy, analyzer and client."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="HTTP;Testing;Web Services;"
APP_VERSION=1.14.5
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-x64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}-desktop/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/httptoolkit/httptoolkit-desktop/master/src/icons/icon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
"/opt/${APP_NAME,,}/${APP_NAME,,}" &
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Gitamine Electron-based cross-platform Git GUI client from Debian package
APP_NAME=Gitamine
APP_GUI_NAME="Electron-based cross-platform Git GUI client."
APP_VERSION=0.0.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/pvigier/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install expreduce Mathematica-compatible, Golang-based computer algebra tool from package
APP_NAME=expreduce
APP_GUI_NAME="Mathematica-compatible, Golang-based computer algebra tool."
APP_VERSION=0.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/corywalker/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install impromp2 simple Perl script to modify Bash shell prompt (PS1) from package
APP_NAME=impromp2
APP_GUI_NAME="Simple Perl script to modify Bash shell prompt (PS1)."
APP_VERSION=N/A
APP_EXT=sh
FILE_NAME=${APP_NAME,,}
sudo apt-get install -y perl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${FILE_NAME}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install miniserve Rust-based CLI tool to serve files and directories over HTTP from package
APP_NAME=miniserve
APP_GUI_NAME="Rust-based CLI tool to serve files and directories over HTTP."
APP_VERSION=0.18.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-x86_64
curl -o /tmp/${FILE_NAME} -J -L https://github.com/svenstaro/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Ag cross-platform, GTK-based GUI and command-line anagram generator from package
APP_NAME=Ag
APP_GUI_NAME="Cross-platform, GTK-based GUI and command-line anagram generator."
APP_VERSION=1.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-gtk
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}1/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/Lexicons:\$PATH; export PATH
/opt/${APP_NAME,,}/agc "$@"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/Lexicons
Exec=/opt/${APP_NAME,,}/ag
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;Games;
Keywords=Anagrams;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install jtc cross-platform command-line tool to extract, manipulate, and transform JSON data from package
APP_NAME=jtc
APP_GUI_NAME="Cross-platform command-line tool to extract, manipulate, and transform JSON data."
APP_VERSION=1.74
APP_EXT=N/A
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=32
fi
FILE_NAME=${APP_NAME,,}-linux-${ARCH_TYPE}.v${APP_VERSION}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/ldn-softdev/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Rolisteam cross-platform Qt-based role-playing game (RPG) management tool from AppImage
APP_NAME=Rolisteam
APP_GUI_NAME="Cross-platform Qt-based role-playing game (RPG) management tool."
APP_VERSION=1.9.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME}_v${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=RPG;Games;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Simplenote cross-platform Electron-based React online note-taking tool from Debian package
APP_NAME=Simplenote
APP_GUI_NAME="Cross-platform Electron-based React online note-taking tool."
APP_VERSION=2.23.0
APP_EXT=deb
FILE_NAME=${APP_NAME}-linux-${APP_VERSION}-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Automattic/${APP_NAME,,}-electron/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install godu simple cross-platform Golang utility to find large files/directories from package
APP_NAME=godu
APP_GUI_NAME="Simple cross-platform Golang utility to find large files/directories."
APP_VERSION=1.4.1
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-linux-${KERNEL_TYPE}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/viktomas/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/* /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install WaveSurfer audio visualizer and editor from package
APP_NAME=WaveSurfer
APP_GUI_NAME="Cross-platform audio visualizer and editor."
APP_VERSION=1.8.8p5
APP_EXT=tgz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Multimedia;Audio;Video;
Keywords=Audio;Video;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install HackMD Electron-based cross-platform Markdown editor from Debian package
APP_NAME=HackMD
APP_GUI_NAME="Electron-based cross-platform Markdown editor."
APP_VERSION=0.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-desktop_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hackmdio/${APP_NAME,,}-desktop/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install Liquid pure Clojure text/MarkDown editor with Emacs and Vim features from package
APP_NAME=Liquid
APP_GUI_NAME="Pure Clojure text/MarkDown editor with Emacs and Vim features."
APP_VERSION=1.1.3
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-standalone
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mogenslund/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${FILE_NAME}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=true
Categories=Programming;Development;
Keywords=Editor;Markdown;Clojure;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install LazView cross-platform minimalist image viewer from package
APP_NAME=LazView
APP_GUI_NAME="Cross-platform minimalist image viewer."
APP_VERSION=Beta
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}_x86_64_GTK2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* /opt
sudo ln -s -f /opt/${APP_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${FILE_NAME}
Exec=/opt/${APP_NAME}/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Graphics;Accessories;
Keywords=Graphics;Image;Viewer;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install pst shell-based process viewer and manager in Golang from package
APP_NAME=pst
APP_GUI_NAME="Shell-based process viewer and manager in Golang."
APP_VERSION=1.0.0
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/skanehira/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Muon (formerly Snowflake) cross-platform, Java-based GUI SSH/SFTP client with many built-in tools from Debian package
APP_NAME=Snowflake
APP_GUI_NAME="Cross-platform, Java-based GUI SSH/SFTP client with many built-in tools."
APP_VERSION=1.0.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-setup-amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/subhra74/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install WoTerm cross-platform Qt-based SSH client/terminal with session manager from package
APP_NAME=WoTerm
APP_GUI_NAME="Cross-platform Qt-based SSH client/terminal with session manager."
APP_VERSION=9.30.4-202403031942
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-x86_64-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/runapp.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${FILE_NAME}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;System;
Keywords=SSH;Terminal;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME

# Install mhsetroot command-line tool to set wallpaper from any image with support for tiling from package
APP_NAME=mhsetroot
APP_GUI_NAME="Command-line tool to set wallpaper from any image with support for tiling."
APP_VERSION=2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libimlib2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-linux /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install FastoRedis cross-platform Redis DB GUI management tool from Debian package
APP_NAME=FastoRedis
APP_GUI_NAME="Cross-platform Redis DB GUI management tool."
APP_VERSION=2.4.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_pro-${APP_VERSION}-x86_64
# Install Redis DB, if not installed
# https://tecadmin.net/install-redis-ubuntu/
if ! [ -x "$(command -v redis-cli)" ]; then
	echo 'Redis DB not installed. Installing...' >&2
	sudo apt-get install -y redis-server
	sudo systemctl enable redis-server.service
	echo 'Edit "/etc/redis/redis.conf" as root to change Redis DB configuration.' >&2
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install ORSimpleVideoConverter cross-platform, Java-based GUI front-end for FFmpeg from Debian package
APP_NAME=Orsvc
APP_GUI_NAME="Cross-platform, Java-based GUI front-end for FFmpeg."
APP_VERSION=3.5
APP_EXT=deb
FILE_NAME=${APP_NAME}-installer
# Install Java runtime, if not installed
if ! [ -x "$(command -v java)" ]; then
	echo 'Java runtime not installed. Installing...' >&2
	sudo apt-get install -y openjdk-11-jre
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install onefetch Rust command-line tool to provide summary of Git repository from package
APP_NAME=onefetch
APP_GUI_NAME="Rust command-line tool to provide summary of Git repository."
APP_VERSION=2.24.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/o2sh/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Rabarbar Qt-based command-line website screenshot tool from source
APP_NAME=Rabarbar
APP_GUI_NAME="Qt-based command-line website screenshot tool."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-master
sudo apt-get install -y qtwebengine5-dev libqt5webkit5-dev xfvb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://codeload.github.com/cepa/${APP_NAME,,}/${APP_EXT}/master
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p build && cd build
qtchooser -run-tool=qmake -qt=5 .. && make && sudo make install
sudo ln -s -f /opt/${APP_NAME,,}/bin/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Merkaartor Open Street Map (OSM) map editor/viewer from Debian package
# http://merkaartor.be/
APP_NAME=Merkaartor
APP_GUI_NAME="Open Street Map (OSM) map editor/viewer."
APP_VERSION=0.18.4+ds-5+b2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://ftp.debian.org/debian/pool/main/m/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install 3tdb web-based MySQL/MariaDB database client from package
APP_NAME=3tdb
APP_GUI_NAME="Web-based MySQL/MariaDB database client."
APP_VERSION=6.1-1
APP_EXT=tar.xz
DB_NAME=author	# See ../examples/doc/README.TXT for details.
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=3t-${APP_VERSION}
sudo apt-get install -y libapache2-mod-python
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/db3t/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+x ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+r ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
# Populate DB from script
mysql --host=localhost --user=${DB_USER} --password=${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/doc/examples/requiredTables/_kooky.sql
mysql --host=localhost --user=${DB_USER} --password=${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/doc/examples/requiredTables/_config.sql
mysql --host=localhost --user=${DB_USER} --password=${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/doc/examples/requiredTables/_category.sql
mysql --host=localhost --user=${DB_USER} --password=${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/doc/examples/requiredTables/_locale.sql
mysql --host=localhost --user=${DB_USER} --password=${DB_PASSWORD} ${DB_NAME} < ${WWW_HOME}/${APP_NAME,,}/doc/examples/requiredTables/_doc_en_US.sql
xdg-open http://localhost/${APP_NAME,,} &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,} &
Icon=${WWW_HOME}/${APP_NAME,,}/images/default.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Python;Webdesign;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/

# Install jdTextEdit Python text editor based on Qt and Scintilla from package
APP_NAME=jdTextEdit
APP_GUI_NAME="Python text editor based on Qt and Scintilla."
APP_VERSION=11.2
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}-Python
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cd /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
python3 -m venv /opt/${APP_NAME,,}/.venv
pip3 install -r /opt/${APP_NAME,,}/requirements.txt
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME}.py /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=/opt/${APP_NAME,,}/${APP_NAME}.py
Icon=/opt/${APP_NAME,,}/icons/edit-copy.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Python;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Taskell Haskell-based Command-line Kanban board/task manager with support for Github projects from Debian package
# https://taskell.app/
APP_NAME=Taskell
APP_GUI_NAME="Haskell-based Command-line Kanban board/task manager with support for Github projects."
APP_VERSION=1.11.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}_x86-64-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/smallhadroncollider/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install Guitar Qt-based GUI Git client from AppImage
APP_NAME=Guitar
APP_GUI_NAME="Qt-based GUI Git client."
APP_VERSION=1.2.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-1001631-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/soramimi/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Git;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Next keyboard-centric web browser with Vim keybindings from Debian package
APP_NAME=Next
APP_GUI_NAME="Keyboard-centric web browser with Vim keybindings."
APP_VERSION=1.4.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://next.atlas.engineer/static/release/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install Delta language-enabled syntax-highlighting diff for Git from package
APP_NAME=Delta
APP_GUI_NAME="Language-enabled syntax-highlighting diff for Git."
APP_VERSION=0.17.0
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dandavison/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
git config --global core.pager "delta --dark"
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install WordGrinder a simple, non-WYSIWIG, Unicode-aware word processor for the console from source
APP_NAME=WordGrinder
APP_GUI_NAME="A simple, non-WYSIWIG, Unicode-aware word processor for the console."
APP_VERSION=0.8
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y ninja-build libncursesw5-dev liblua5.2-dev zlib1g-dev libxft-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/davidgiven/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install PREFIX=/usr/local
sudo cp ./bin/${APP_NAME,,}-builtin-curses-release-stripped /usr/local/bin/${APP_NAME,,}
sudo cp ./bin/x${APP_NAME,,}-builtin-x11-release-stripped /usr/local/bin/x${APP_NAME,,}
sudo cp ./extras/icon.png /usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/x${APP_NAME,,}
Icon=/usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=Editor;Word Processor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Gotop Golang-based graphical activity monitor for shell from package
APP_NAME=Gotop
APP_GUI_NAME="Golang-based graphical activity monitor for shell."
APP_VERSION=3.0.0
APP_EXT=tgz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/cjbassi/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install Diagram Faster Java-based keyboard-focused diagramming tool from package
APP_NAME=Diagram-Faster
APP_GUI_NAME="Java-based keyboard-focused diagramming tool."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=Diagram
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/Diagram.jar /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/Diagram.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/Diagram.jar
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;Office;
Keywords=Diagram;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Calibre ebook reader, manager, and converter from package
APP_NAME=Calibre
APP_GUI_NAME="Ebook reader, manager, and converter."
APP_VERSION=8.4.0
APP_EXT=txz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-ebook-manager.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/ebook-viewer /usr/local/bin/ebook-viewer
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/resources/images/library.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Books;Ebooks;Reader;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Ctalk C-like object-oriented programming language with GUI, networking and systems programming features from source
APP_NAME=Ctalk
APP_GUI_NAME="C-like object-oriented programming language with GUI, networking and systems programming features."
APP_VERSION=0.0.65
APP_DATE=2019-11-12
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${APP_DATE}
sudo apt-get install -y build-essential texinfo
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}
./configure && make && sudo make install PREFIX=/usr/local
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install repotools Rust-based command-line shortcuts for common Git commands from package
APP_NAME=repotools
APP_GUI_NAME="Rust-based command-line shortcuts for common Git commands."
APP_VERSION=0.7.1
APP_EXT=txz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-ubuntu-bionic-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ctsrc/${APP_NAME,,}/releases/download/${APP_NAME,,}-v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/bin/* /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install RC File Manager graphical file manager built with React and Electron from Debian package
APP_NAME=RC-File-Manager
APP_GUI_NAME="Graphical file manager built with React and Electron."
APP_VERSION=1.0.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install eDEX-UI Electron-based, fullscreen, cross-platform terminal emulator and system monitor from AppImage
APP_NAME=eDEX-UI
APP_GUI_NAME="Electron-based, fullscreen, cross-platform terminal emulator and system monitor."
APP_VERSION=2.2.8
APP_EXT=AppImage
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME}.Linux.${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/GitSquared/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Terminal;Monitor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Simple Java Image Tool (SJIT) Java command-line tool to analyze, manipulate and convert image files from package
APP_NAME=SJIT
APP_GUI_NAME="Java command-line tool to analyze, manipulate and convert image files."
APP_VERSION=1.5.2
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "$@"
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install Tranquil Java IDE text-based Java IDE patterned after Turbo C++ from Debian package
APP_NAME=TJIDE
APP_GUI_NAME="Text-based Java IDE patterned after Turbo C++."
APP_VERSION=1.0alpha-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/bin/tj
#Icon=
Type=Application
StartupNotify=true
Terminal=true
Categories=Development;Programming;
Keywords=Java;IDE;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Refbase Zotero-compatible, web-based (PHP/MySQL) bibliographic manager for research groups from package
APP_NAME=Refbase
APP_GUI_NAME="Zotero-compatible, web-based (PHP/MySQL) bibliographic manager for research groups."
APP_VERSION=0.9.6
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
# Set parameters in database configuration file
sudo sed -i 's@$databaseName = "literature"@$databaseName = "'${DB_NAME}'"@g' ${WWW_HOME}/${APP_NAME,,}/initialize/db.inc.php
sudo sed -i 's@$username = "litwww"@$username = "'${DB_USER}'"@g' ${WWW_HOME}/${APP_NAME,,}/initialize/db.inc.php
sudo sed -i 's@$password = "%l1t3ratur3?"@$password = "'${DB_PASSWORD}'"@g' ${WWW_HOME}/${APP_NAME,,}/initialize/db.inc.php
echo "Login with following administrative user after installation to create your own administrative user account:"
echo "   Email Address: user@refbase.net"
echo "        Password: start"
xdg-open http://localhost/${APP_NAME,,}/install.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/img/logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;Accessories;
Keywords=Reference;Bibliography;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Perl Audio Converter Linux command line audio converter from package
APP_NAME=PACPL
APP_GUI_NAME="Linux command line audio converter."
APP_VERSION=6.1.2
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sed -i 's@sudo apt-get install@sudo apt-get install -y@g' /tmp/${FILE_NAME}/extra/mod-install-debian.sh  # Update script to run updates without prompting.
sudo /tmp/${FILE_NAME}/extra/mod-install-debian.sh
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install Gopass minimalist Golang-based GnuPG collaborative password manager from Debian package
APP_NAME=Gopass
APP_GUI_NAME="Minimalist Golang-based GnuPG collaborative password manager."
APP_VERSION=1.15.15
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/gopasspw/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Interval RPN Calculator console RPN calculator with interval output from package
APP_NAME=irpn
APP_GUI_NAME="Console RPN calculator with interval output."
APP_VERSION=13aug24
APP_EXT=7z
FILE_NAME=${APP_NAME,,}${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/intervalrpncalculator/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/intRpn/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,}_gnu /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Thorium Reader (Readium) cross-platform EPUB reader from Debian package
APP_NAME="Thorium Reader"
APP_GUI_NAME="Cross-platform EPUB reader."
APP_VERSION=3.1.1
APP_EXT=deb
FILE_NAME=EDRLab.${APP_NAME// /}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/edrlab/${APP_NAME// /-}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Mindustry Java-based desktop sandbox tower defense game from package
APP_NAME=Mindustry
APP_GUI_NAME="Java-based desktop sandbox tower defense game."
APP_VERSION=146
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Anuken/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "$@"
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Simultation;Multiplayer;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install McFly replacement for <Ctrl>+R search of command-line history from package
APP_NAME=McFly
APP_GUI_NAME="Replacement for <Ctrl>+R search of command-line history."
APP_VERSION=0.8.1
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-${ARCH_TYPE}-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/cantino/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cp /tmp/${FILE_NAME}/${APP_NAME,,}.bash $HOME/.config
echo 'if [[ -r '$HOME/${APP_NAME,,}'.bash ]]; then' >> $HOME/.bashrc
echo '  source '$HOME/${APP_NAME,,}'.bash' >> $HOME/.bashrc
echo 'fi' >> $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install remindME cross-platform sticky note tool from package
APP_NAME=remindME
APP_GUI_NAME="Cross-platform sticky note tool."
APP_VERSION=beta1
APP_EXT=N/A
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/remind-me/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${FILE_NAME}
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=/opt/${APP_NAME,,}/${FILE_NAME}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Notepad;Sticky;Notes;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install SimPy Big Two Taiwan Big Two Python/Pygame card game from package
APP_NAME=SimPyBigTwo
APP_GUI_NAME="Taiwan Big Two Python/Pygame card game."
APP_VERSION=0.3.6
APP_EXT=tar.gz
FILE_NAME=linux_${APP_NAME,,}_${APP_VERSION//./}
sudo apt-get install -y python3-pygame
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/main.py
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/Image/simpybigtwo_default.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Poker;Cards;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install SciCalc programmable scientific desktop calculator from Debian package
APP_NAME=SciCalc
APP_GUI_NAME="Programmable scientific desktop calculator."
APP_VERSION=1.2.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-amd64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.scicalc.io/download/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Glow Golang-based command-line markdown renderer from Debian package
APP_NAME=Glow
APP_GUI_NAME="Golang-based command-line markdown renderer."
APP_VERSION=1.4.1
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/charmbracelet/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install bandwhich Rust-based terminal tool to check what is taking up your bandwidth from package
APP_NAME=bandwhich
APP_GUI_NAME="Rust-based terminal tool to check what is taking up your bandwidth."
APP_VERSION=0.21.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/imsnif/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Pynguin Python/Qt-based turtle graphics application from Debian package
APP_NAME=Pynguin
APP_GUI_NAME="Python/Qt-based turtle graphics application."
APP_VERSION=0.18-1
APP_EXT=deb
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(xe|ya|ze|ar|bi|co|di|eo)$ ]]; then
	APP_VERSION=0.18-1
else
	APP_VERSION=0.16-1
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/~missive/+archive/ubuntu/ppa/+files/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Laverna Electron-based notepad with built-in Markdown and client-side encryption support from package
APP_NAME=Laverna
APP_GUI_NAME="Electron-based notepad with built-in Markdown and client-side encryption support."
APP_VERSION=0.7.51
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=ia32
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;
Keywords=Notepad;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install PmWiki PHP-based wiki tool from package
APP_NAME=PmWiki
APP_GUI_NAME="PHP-based wiki tool."
APP_VERSION=2.4.5
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
if ![ -x "$(command -v php)" ]; then
  echo 'Error: php is not installed.' >&2
  return
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.pmwiki.org/pub/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
cat > /tmp/index.php << EOF
<?php include_once('pmwiki.php');
EOF
sudo cp /tmp/index.php ${WWW_HOME}/${APP_NAME,,}
sudo mkdir ${WWW_HOME}/${APP_NAME,,}/wiki.d
sudo chmod 777 ${WWW_HOME}/${APP_NAME,,}/wiki.d
xdg-open http://localhost/${APP_NAME,,}/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php
Icon=${WWW_HOME}/${APP_NAME,,}/pub/skins/pmwiki/pmwiki-32.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;
Keywords=Wiki;Documentation;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install EZPwd Golang-based minimalist console password manager with GnuPGP/OpenPGP compatibility from package
APP_NAME=EZPwd
APP_GUI_NAME="Golang-based minimalist console password manager with GnuPGP/OpenPGP compatibility."
APP_VERSION=2.2.2
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_tui_linux
curl -o /tmp/${FILE_NAME} -J -L https://github.com/jdevelop/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
mkdir -p ${HOME}/private
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Broot Rust-based command-line directory tree navigation tool with fuzzy-search capability from package
# https://dystroy.org/broot/
APP_NAME=Broot
APP_GUI_NAME="Rust-based command-line directory tree navigation tool with fuzzy-search capability."
APP_VERSION=1.46.5
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Canop/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/build/x86_64-linux/${APP_NAME,,} /usr/local/bin/
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
/usr/local/bin/${APP_NAME,,} --install
# Reload Bash configuration
source $HOME/.bashrc
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install massCode Electron-based, cross-platform codes snippet manager/editor from Snap package
# https://github.com/massCodeIO/massCode
APP_NAME=massCode
APP_GUI_NAME="Electron-based, cross-platform codes snippet manager/editor."
APP_VERSION=3.12.0
APP_EXT=snap
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
sudo apt-get install -y snapd snapd-xdg-open
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo snap install --dangerous /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install AnetTest integrated Ethernet packet generator and sniffer from source
APP_NAME=AnetTest
APP_GUI_NAME="Integrated Ethernet packet generator and sniffer."
APP_VERSION=1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}${APP_VERSION}_sources
sudo apt-get install libncurses5-dev libpcap0.8-dev -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,} /tmp/${APP_NAME}

# Install sfbf (Search For Big Files) command-line tool to find largest files on file system from Debian package
APP_NAME=sfbf
APP_GUI_NAME="Command-line tool to find largest files on file system."
APP_VERSION=1.31.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/spypunk/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install sfbf-ui UI for sfbf (Search For Big Files) command-line tool to find largest files on file system from Debian package
APP_NAME=sfbf-ui
APP_GUI_NAME="UI for sfbf (Search For Big Files) command-line tool to find largest files on file system."
APP_VERSION=1.4.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/spypunk/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install SFTPGo Golang-based highly-configurable SFTP server from package
APP_NAME=SFTPGo
APP_GUI_NAME="Golang-based highly-configurable SFTP server."
APP_VERSION=2.6.6
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_linux_x86_64
sudo apt-get install sqlite3 openssh-server -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/drakkan/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mkdir -p /var/log/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo mkdir -p /opt/${APP_NAME,,}/config
sudo mkdir -p /opt/${APP_NAME,,}/config/logs
sudo cp /opt/${APP_NAME,,}/sql/sqlite/* /opt/${APP_NAME,,}/config
sudo cp /opt/${APP_NAME,,}/${APP_NAME,,}.json /opt/${APP_NAME,,}/config
sudo chmod -R 777 /opt/${APP_NAME,,}/config
sudo addgroup ${APP_NAME,,}
sudo adduser --no-create-home --disabled-password --gecos "SFTPGo User Account",,,, --ingroup ${APP_NAME,,} ${APP_NAME,,}
sudo usermod -a -G ${APP_NAME,,} ${USER}
sudo chown -R ${APP_NAME,,}:${APP_NAME,,} /var/log/${APP_NAME,,}
sudo chmod -R 777 /var/log/${APP_NAME,,}
echo '/opt/'${APP_NAME,,}/${APP_NAME,,}' serve --config-dir /opt/'${APP_NAME,,}'/config --log-file-path /var/log/'${APP_NAME,,} >> ${HOME}/.bashrc
source $HOME/.bashrc	# Reload Bash configuration
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Murex Golang-based alternate command shell with focus on scripting from package
APP_NAME=Murex
APP_GUI_NAME="Golang-based alternate command shell with focus on scripting."
APP_VERSION=6.4.2063
APP_EXT=gz
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://murex.rocks/bin/latest/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install RufasSok cross-platform OpenGL Sokoban game from package
APP_NAME=RufasSok
APP_GUI_NAME="Cross-platform OpenGL Sokoban game."
APP_VERSION=29mar25
APP_EXT=7z
FILE_NAME=sok${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/asok/* /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/rufasok_gnu
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/rufasok_gnu
#Icon=/opt/${APP_NAME,,}/rufasok.app/Contents/Resources/rufasok.icns
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Sokoban;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ps_mem Python accurate core memory reporting tool from package
APP_NAME=ps_mem
APP_GUI_NAME="Python accurate core memory reporting tool."
APP_VERSION=3.13
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/pixelb/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 /tmp/${FILE_NAME}/setup.py install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Zira Editor Qt-based minimalist PHP editor from package
APP_NAME=ZiraEditor
APP_GUI_NAME="Qt-based minimalist PHP editor."
APP_VERSION=1.6.4
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86-64-Qt.5.12.6-cs-phpman
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ziracms/editor/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/Zira/* /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/zira.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=PHP;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Anoa Notepad minimalist notepad and code editor from package
APP_NAME=Anoa-Notepad
APP_GUI_NAME="Minimalist notepad and code editor."
APP_VERSION=1.7-R.1
APP_EXT=zip
FILE_NAME=${APP_NAME}-v.${APP_VERSION}-Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;Development;
Keywords=Editor;Notepad;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Dino XMPP/Jabber GTK+/Vala chat client from Debian package
# https://github.com/dino/dino
APP_NAME=Dino
APP_GUI_NAME="XMPP/Jabber GTK+/Vala chat client"
APP_VERSION=0.2.0~git0.20201112.2a775bc
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
source /etc/lsb-release
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/network:/messaging:/xmpp:/${APP_NAME,,}/xUbuntu_${DISTRIB_RELEASE}/${KERNEL_TYPE}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ytop Rust-based real-time GUI command-line system monitor from package
APP_NAME=ytop
APP_GUI_NAME="Rust-based real-time GUI command-line system monitor."
APP_VERSION=0.4.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/cjbassi/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install GitBucket Scala-based Git platform with web-based frontend from package
APP_NAME=GitBucket
APP_GUI_NAME="Scala-based Git platform with web-based frontend."
APP_VERSION=4.33.0
APP_EXT=war
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
xdg-open http://localhost:8080/
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} && xdg-open http://localhost:8080/
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Development;Programming;
Keywords=Git;Version Control;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install PASTE self-hosted, web-based (PHP/MySQL) pastebin tool from package
APP_NAME=PASTE
APP_GUI_NAME="Self-hosted, web-based (PHP/MySQL) pastebin tool."
APP_VERSION=2.2
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/phpaste/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/install &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/theme/default/img/logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=Pastebin;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Repeat Java-based record/replay automation utility from package
APP_NAME=Repeat
APP_GUI_NAME="Java-based record/replay automation utility."
APP_VERSION=5.7.1
APP_EXT=jar
FILE_NAME=${APP_NAME}_${APP_VERSION//./_}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/repeat1/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install MyPaint Python-based, cross-platform drawing and painting program from AppImage
APP_NAME=MyPaint
APP_GUI_NAME="Python-based, cross-platform drawing and painting program."
APP_VERSION=2.0.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Graphics;Accessories;
Keywords=Paint;Drawing;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Syncbox Python-based personal cloud storage tool using rsync from package
APP_NAME=Syncbox
APP_GUI_NAME="Python-based personal cloud storage tool using rsync."
APP_VERSION=0.92
APP_EXT=zip
FILE_NAME=${APP_NAME,,}.${APP_VERSION}
sudo apt-get install -y python3-mako python3-cherrypy3 rsync
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/box.py &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ls-lint Golang-based linter for enforcing naming-format standards via YAML configuration files from package
APP_NAME=ls-lint
APP_GUI_NAME="Golang-based linter for enforcing naming-format standards via YAML configuration files."
APP_VERSION=1.1.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME} -J -L https://github.com/loeffel-io/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Elephant Java-based desktop notepad/PIM from package
APP_NAME=Elephant
APP_GUI_NAME="Java-based desktop notepad/PIM."
APP_VERSION=61
APP_EXT=zip
FILE_NAME=${APP_NAME,,}${APP_VERSION}_jar
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jusu/${APP_NAME,,}/releases/download/V${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}/${APP_NAME,,}app.jar /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}app.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${APP_NAME,,}app.jar &
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Accessories;
Keywords=Notepad;PIM;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install jSQL Injection Java-based SQL injection and database security testing tool from package
APP_NAME=jSQL-Injection
APP_GUI_NAME="Java-based SQL injection and database security testing tool."
APP_VERSION=0.84
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ron190/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=java -jar /opt/${APP_NAME,,}/${FILE_NAME//-/}.${APP_EXT} &
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Networking;
Keywords=SQL;Security;Database;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install kurly cross-platform, Golang-based alternative to cURL HTTP utility from package
APP_NAME=kurly
APP_GUI_NAME="Cross-platform, Golang-based alternative to cURL HTTP utility."
APP_VERSION=1.2.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.com/davidjpeacock/${APP_NAME,,}/-/jobs/artifacts/master/raw/artifacts/linux-amd64/${FILE_NAME}.${APP_EXT}?job=compile
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
APP_MAN_PATH=$(manpath)
if [ "$APP_MAN_PATH" != "" ]
then
	sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}.man ${APP_MAN_PATH}/man1
else
	sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}.man /usr/share/man/man1
fi
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Cancion Music Player Python/Qt5 minimalist audio player from package
APP_NAME="Cancion Music Player"
APP_GUI_NAME="Python/Qt5 minimalist audio player."
APP_VERSION=2.0
APP_EXT=rar
FILE_NAME=${APP_NAME// /%20}%20v${APP_VERSION}
sudo apt-get install python3-pyqt5 python3-pyqt5.qtmultimedia python3-pyqt5.qtwebengine -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/cancion-music-player/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
rm -rf /tmp/${FILE_NAME}/Cancion*/*.exe
sudo mkdir -p /opt/cancion-music-player
sudo cp -R /tmp/${FILE_NAME}/Cancion*/* /opt/cancion-music-player
cat > /tmp/cancion-music-player << EOF
#! /bin/sh
cd /opt/cancion-music-player
PATH=/opt/cancion-music-player:\$PATH; export PATH
python3 /opt/cancion-music-player/cancion.py &
cd \$HOME
EOF
sudo mv /tmp/cancion-music-player /usr/local/bin
sudo chmod a+x /usr/local/bin/cancion-music-player
cat > /tmp/cancion-music-player.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/cancion-music-player/cancion.py &
Icon=/opt/cancion-music-player/icon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Multimedia;Audio;
Keywords=MP3;Audio;
EOF
sudo mv /tmp/cancion-music-player.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install PHP Shell PHP-based front-end to run shell utilities/scripts on server remotely from package
APP_NAME="PHP Shell"
APP_NAME_STRIPPED=${APP_NAME// /}
APP_NAME_STRIPPED=${APP_NAME_STRIPPED,,}
APP_GUI_NAME="PHP-based front-end to run shell utilities/scripts on server remotely."
APP_VERSION=2.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME_STRIPPED}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME_STRIPPED}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME_STRIPPED}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME_STRIPPED}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME_STRIPPED}
sudo chmod -R 644 ${WWW_HOME}/${APP_NAME_STRIPPED}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME_STRIPPED} << EOF
#! /bin/sh
cd ${WWW_HOME}/${APP_NAME_STRIPPED}
PATH=${WWW_HOME}/${APP_NAME_STRIPPED}:\$PATH; export PATH
xdg-open http://localhost/${APP_NAME_STRIPPED}/${APP_NAME_STRIPPED}.php &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME_STRIPPED} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME_STRIPPED}
cat > /tmp/${APP_NAME_STRIPPED}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME_STRIPPED}/${APP_NAME_STRIPPED}.php &
Icon=${WWW_HOME}/${APP_NAME_STRIPPED}/${APP_NAME_STRIPPED}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;System;
Keywords=Shell;PHP;
EOF
sudo mv /tmp/${APP_NAME_STRIPPED}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}* /tmp/${APP_NAME_STRIPPED}*

# Install OpenOrienteering Mapper cross-platform orienteering map editor/viewer from Debian package
APP_NAME=OpenOrienteering-Mapper
APP_VERSION=0.9.5-0+33.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
source /etc/lsb-release
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/dg0yt/Ubuntu_${DISTRIB_RELEASE}/${KERNEL_TYPE}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install PySpread cross-platform Qt-based desktop spreadsheet that uses Python expessions from source
# https://pyspread.gitlab.io/
APP_NAME=PySpread
APP_GUI_NAME="Cross-platform Qt-based desktop spreadsheet that uses Python expessions."
APP_VERSION=2.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y python3-enchant python3-pyqt5 python3-numpy python3-pyqt5.qtsvg
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.com/${APP_NAME,,}/downloads/-/raw/master/releases/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cd /opt/${APP_NAME,,}
sudo pip3 install -r ./requirements.txt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
export PYTHONPATH=$PYTHONPATH:.
python3 /opt/${APP_NAME,,}/${APP_NAME,,} $@ &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Math;Spreadsheet;
Keywords=Spreadsheet;CSV;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install downTube Qt-based GUI front-end for youtube-dl multimedia download tool from Debian package
APP_NAME=downTube
APP_GUI_NAME="Qt-based GUI front-end for youtube-dl multimedia download tool."
APP_VERSION=1.0-2rc
APP_EXT=deb
FILE_NAME=${APP_NAME,,}${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/GearFox98/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install OvoPlayer cross-platform, Lazarus/FreePascal-based minimalist audio player from Debian package
# https://github.com/varianus/ovoplayer
APP_NAME=OvoPlayer
APP_GUI_NAME="Cross-platform, Lazarus/FreePascal-based minimalist audio player."
APP_VERSION=1.3.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-gtk2-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Kitty cross-platform GPU-based terminal from package
# https://sw.kovidgoyal.net/kitty/
APP_NAME=Kitten
APP_GUI_NAME="Cross-platform GPU-based terminal."
APP_VERSION=0.42.1
APP_EXT=txz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt-get install -y python3-enchant python3-pyqt5 python3-numpy python3-pyqt5.qtsvg
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo tar -C / -xvf ${FILE_NAME}.${APP_EXT}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/bin/${APP_NAME,,}
Exec=/bin/${APP_NAME,,}
Icon=/share/icons/hicolor/256x256/apps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=System;Accessories;
Keywords=Terminal;Shell;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install PHP-Fusion lightweight PHP/MySQL content management system (CMS) from package
APP_NAME=PHP-Fusion
APP_GUI_NAME="Lightweight PHP/MySQL content management system (CMS)."
APP_VERSION=9.03.90
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_NAME=${DB_NAME//-/}
DB_USER=${DB_NAME}
DB_PASSWORD=${DB_NAME}
FILE_NAME=${APP_NAME}%20${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/files/* ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 777 ${WWW_HOME}/${APP_NAME,,}/administration/db_backups ${WWW_HOME}/${APP_NAME,,}/images ${WWW_HOME}/${APP_NAME,,}/robots.txt ${WWW_HOME}/${APP_NAME,,}/infusions
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/install &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/images/img/php-fusion-icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;Internet;
Keywords=CMS;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install term_wifi interactive console utility for WiFi configuration via iwconfig from package
APP_NAME=term_wifi
APP_GUI_NAME="1nteractive console utility for WiFi configuration via iwconfig."
APP_VERSION=1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://codeload.github.com/ColumPaget/${APP_NAME,,}/${APP_EXT}/v${APP_VERSION}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo cp ${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install VNQ cross-platform Java-based encrypted console messenger/chat utility from package
APP_NAME=VNQ
APP_GUI_NAME="Cross-platform Java-based encrypted console messenger/chat utility."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME,,}11
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
CLASSPATH=.:${CLASSPATH}; export CLASSPATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;Accessories;
Keywords=Messenger;Chat;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Marathon Java Swing/JavaFX GUI test automation framework from package
APP_NAME=Marathon
APP_GUI_NAME="Java Swing/JavaFX GUI test automation framework."
APP_VERSION=5.3.0.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}man/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
CLASSPATH=.:${CLASSPATH}; export CLASSPATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;Accessories;
Keywords=Messenger;Chat;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install SpicyPass cross-platform GTK-based password manager based on libsodium from source
APP_NAME=SpicyPass
APP_GUI_NAME="Cross-platform GTK-based password manager based on libsodium."
APP_VERSION=master
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y libgtk-3-dev cmake pkg-config
# Install libsodium from source
LIBSODIUM_VERSION=1.0.18
curl -o /tmp/libsodium-${LIBSODIUM_VERSION}.tar.gz -J -L https://download.libsodium.org/libsodium/releases/libsodium-${LIBSODIUM_VERSION}.tar.gz
cd /tmp
dtrx -n /tmp/libsodium-${LIBSODIUM_VERSION}.tar.gz
cd /tmp/libsodium-${LIBSODIUM_VERSION}
./configure && make && make check && sudo make install
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://codeload.github.com/JFreegman/${APP_NAME}/${APP_EXT}/master
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
cmake .. && cmake --build . && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,} --gui
Icon=/usr/local/share/${APP_NAME,,}/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Password;Crypto;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install CoolFormat cross-platform command-line source code formatter and highlighting generator from package
APP_NAME=CoolFormat
APP_GUI_NAME="Cross-platform command-line source code formatter and highlighting generator."
APP_VERSION=1.0
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=Linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=Linux32
fi
FILE_NAME=${APP_NAME}Exec${APP_VERSION}%28${ARCH_TYPE}%29
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME}Exec /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install dte small and easy to use console text editor from package
APP_NAME=dte
APP_GUI_NAME="Small and easy to use console text editor."
APP_VERSION=1.9.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libtinfo6 libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://craigbarnes.gitlab.io/dist/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make -j8 && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Robocode Java-based tank battle programming game from package
APP_NAME=Robocode
APP_GUI_NAME="Java-based tank battle programming game."
APP_VERSION=1.10.1
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-setup
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo java -jar /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}.sh &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Games;
Keywords=Tanks;Games;Programming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make -j8 && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*
# Install Intermodal cross-platform, Rust-based command-line BitTorrent metainfo utility from package
# https://rodarmor.com/blog/intermodal
APP_NAME=Intermodal
APP_GUI_NAME="Cross-platform, Rust-based command-line BitTorrent metainfo utility."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=imdl
cd /tmp
curl --proto '=https' --tlsv1.2 -sSf https://imdl.io/install.sh | bash
chmod ${HOME}/bin/${FILE_NAME}
sudo ln -s -f ${HOME}/bin/${FILE_NAME} /usr/local/bin/${FILE_NAME}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Whalebird cross-platform Electron-based Mastodon desktop client from Debian package
APP_NAME=Whalebird
APP_GUI_NAME="Cross-platform Electron-based Mastodon desktop client."
APP_VERSION=6.2.1
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/h3poteto/${APP_NAME,,}-desktop/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install KeeWeb cross-platform Electron-based password manager compatible with Keepass from Debian package
APP_NAME=KeeWeb
APP_GUI_NAME="Electron-based password manager compatible with Keepass."
APP_VERSION=1.18.6
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}.linux.x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install gh official Github command-line utility from Debian package
APP_NAME=gh
APP_GUI_NAME="Official Github command-line utility."
APP_VERSION=1.10.2
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_linux_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/cli/cli/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install VASSAL Java-based game development engine/platform from package
APP_NAME=VASSAL
APP_GUI_NAME="Java-based game development engine/platform."
APP_VERSION=3.2.17
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}engine/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}-${APP_VERSION}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}.sh &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/doc/images/Splash.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;Programming;
Keywords=Games;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Alaya WebDAV-enabled web/HTTP server focused on sharing directories with WebDAV from source
APP_NAME=Alaya
APP_GUI_NAME="WebDAV-enabled web/HTTP server focused on sharing directories with WebDAV."
APP_VERSION=4.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ColumPaget/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install lookat Ncurses-based shell file viewer from source
APP_NAME=lookat
APP_GUI_NAME="Ncurses-based shell file viewer."
APP_VERSION=2.0.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_bekijk-${APP_VERSION}
sudo apt-get install build-essential libncurses-dev -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.savannah.nongnu.org/releases/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install wxMaxima cross-platform computer algebra system (CAS) from AppImage
APP_NAME=wxMaxima
APP_GUI_NAME="Cross-platform computer algebra system (CAS)."
APP_VERSION=22.09.0-5
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}-developers/docker-${APP_NAME,,}/releases/download/${APP_NAME}-${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Math;Education;
Keywords=Math;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install MeowSQL cross-platform, Qt-based HeidiSQL clone with support for MySQL, PostgreSQL, and SQLite from AppImage
APP_NAME=MeowSQL
APP_GUI_NAME="Cross-platform, Qt-based HeidiSQL clone with support for MySQL, PostgreSQL, and SQLite."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Database;SQL;"
APP_VERSION=0.4.17
APP_EXT=AppImage
FILE_NAME=Linux_${APP_NAME}_${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ragnar-lodbrok/meow-sql/releases/download/v${APP_VERSION}-alpha/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME}.svg -J -L https://github.com/ragnar-lodbrok/meow-sql/raw/master/resources/icons/logo.svg
sudo mv /tmp/${APP_NAME}.svg /usr/share/pixmaps/${APP_NAME}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=/usr/share/pixmaps/${APP_NAME}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install IPE cross-platform diagram editor that generates PS/PDF from Debian package
# http://ipe.otfried.org/
APP_NAME=IPE
APP_GUI_NAME="Cross-platform diagram editor that generates PS/PDF."
APP_GUI_CATEGORIES="Graphics;Office;"
APP_GUI_KEYWORDS="Diagram;Diagramming;PDF;PS;"
APP_VERSION=7.2.14-1
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (eo|fo)$ ]]; then  # 19.10, 20.04
	DISTRIB_VERSION=xUbuntu_19.10
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (di)$ ]]; then  # 19.04
	DISTRIB_VERSION=xUbuntu_19.04
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co)$ ]]; then  # 18.04, 18.10
	DISTRIB_VERSION=xUbuntu_18.04
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe|ya|ze|ar)$ ]]; then  # 16.04 - 17.10
	DISTRIB_VERSION=xUbuntu_16.04
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/otfried13/${DISTRIB_VERSION}/${KERNEL_TYPE}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/lib${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/otfried13/${DISTRIB_VERSION}/${KERNEL_TYPE}/lib${FILE_NAME}.${APP_EXT}
https://download.opensuse.org/repositories/home:/otfried13/xUbuntu_19.10/amd64/ipe_7.2.15-1_amd64.deb
https://download.opensuse.org/repositories/home:/otfried13/xUbuntu_19.10/amd64/ipe_7.2.15-1_amd64.deb
sudo gdebi -n /tmp/lib${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/bin
Exec=/usr/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Private Chat Java-based desktop messenger with 2048-bit RSA encryption from package
APP_NAME=Private-Chat
APP_GUI_NAME="Java-based desktop messenger with 2048-bit RSA encryption."
APP_VERSION=1.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-setup
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo java -jar /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}.sh &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Games;
Keywords=Tanks;Games;Programming;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make -j8 && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Noteastic cross-platform minimalist notepad from package
APP_NAME=Noteastic
APP_GUI_NAME="Cross-platform minimalist notepad."
APP_VERSION=2.8.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-x64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://market.ape-apps.com/linux_installers/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Math;Education;
Keywords=Math;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Armagetron Advanced cross-platform SDL-based 3D Tron lightcycle game from source
APP_NAME=ArmagetronAd
APP_GUI_NAME="Cross-platform SDL-based 3D Tron lightcycle game."
APP_VERSION=0.2.9.1.0
APP_EXT=tbz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install build-essential libxml2-dev libsdl1.2-dev libsdl2-dev libsdl-image1.2-dev libjpeg8-dev -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
sudo ln -s -f /usr/local/share/games/${APP_NAME,,}/desktop/large/${APP_NAME,,}.png /usr/share/applications/${APP_NAME,,}.png
sudo ln -s -f /usr/local/share/games/${APP_NAME,,}/desktop/*${APP_NAME,,}.desktop /usr/share/applications/${APP_NAME,,}.desktop
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Nitrogen GTK+-based background/wallpaper browser and setter from source
# Can be used to set wallpaper images downloaded from various sources, such as Bing, via command line.
APP_NAME=Nitrogen
APP_GUI_NAME="GTK+-based background/wallpaper browser and setter."
APP_VERSION=1.6.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install build-essential libgtk2.0-dev libgtkmm-2.4-dev -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/l3ib/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
autoreconf -fi && ./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Tiny Tiny RSS (tt-rss) PHP/MySQL-based self-hosted RSS news aggregator from package
# https://www.hiroom2.com/2019/06/17/ubuntu-1904-tt-rss-en/
APP_NAME=TT-RSS
APP_GUI_NAME="PHP/MySQL-based self-hosted RSS news aggregator."
APP_VERSION=master
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_NAME=${DB_NAME//-/}
DB_USER=${DB_NAME}
DB_PASSWORD=${DB_NAME}
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
[ -z "${TT_RSS_FQDN}" ] && TT_RSS_FQDN=$(hostname -f)
TT_RSS_URL=http://${TT_RSS_FQDN}/${APP_NAME,,}
sudo apt-get install -y php${PHP7_VERSION}-intl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://git.tt-rss.org/fox/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}/* ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 777 ${WWW_HOME}/${APP_NAME,,}/cache ${WWW_HOME}/${APP_NAME,,}/feed-icons ${WWW_HOME}/${APP_NAME,,}/lock
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME};"
mysql -u root -proot -Bse "GRANT ALL ON ${DB_USER}.* TO ${DB_NAME}@'%' IDENTIFIED BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open ${TT_RSS_URL}/install/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open ${TT_RSS_URL}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/images/logo_small.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Internet;Networking;Office;
Keywords=News;RSS;Aggregator;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
# Configure cron job to refresh feeds every 30 minutes
(crontab -l 2>/dev/null; echo "*/30 * * * * /usr/bin/php "${WWW_HOME}/${APP_NAME,,}"/update.php --feeds --quiet") | crontab -
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Bashtop shell-script-based command-line system monitor from PPA
# https://github.com/aristocratos/bashtop
APP_NAME=Bashtop
APP_GUI_NAME="Shell-script-based command-line system monitor."
APP_VERSION=0.8.23
APP_EXT=deb
sudo add-apt-repository -y ppa:${APP_NAME,,}-monitor/${APP_NAME,,}
sudo apt-get update
sudo apt-get install -y ${APP_NAME,,}

# Install PDFtk Java-based command-line PDF editor from package
# This build contains native x86_64 package and does not require Java JRE.
APP_NAME=PDFtk
APP_GUI_NAME="Java-based command-line PDF editor."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME} -J -L https://gitlab.com/${APP_NAME,,}-java/${APP_NAME,,}/-/jobs/534709327/artifacts/raw/build/native-image/${APP_NAME,,}?inline=false
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Viter Python-based terminal emulator with Vim keybindings from package
APP_NAME=Viter
APP_GUI_NAME="Python-based terminal emulator with Vim keybindings."
APP_VERSION=master
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y python-gobject libvte-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Kharacternyk/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=Terminal;Console;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Clementine cross-platform music player/organizer from Debian package
APP_NAME=Clementine
APP_GUI_NAME="Cross-platform music player/organizer."
APP_VERSION=1.4.0rc1-348-gcac606186
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (fo)$ ]]; then  # 20.04
	DISTRIB_VERSION=focal
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (eo)$ ]]; then  # 19.10
	DISTRIB_VERSION=eoan
else
	DISTRIB_VERSION=bionic
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}.${DISTRIB_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install nobleNote Qt-based cross-platform notepad with two-pane layout from source
APP_NAME=nobleNote
APP_GUI_NAME="Qt-based cross-platform notepad with two-pane layout."
APP_VERSION=1.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install qt5-qmake qt5-default -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hakaishi/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
qtchooser -run-tool=qmake -qt=5 && make && sudo make install distclean
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install GitUI cross-platform console GUI for Git version control from package
APP_NAME=GitUI
APP_GUI_NAME="Cross-platform console GUI for Git version control."
APP_VERSION=0.27.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/extrawurst/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Zegarek minimalist desktop clock with millisecond resolution from AppImage
APP_NAME=Zegarek
APP_GUI_NAME="Minimalist desktop clock with millisecond resolution."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Clock;"
APP_VERSION=0.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/konradmb/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME}.svg -J -L https://raw.githubusercontent.com/konradmb/zegarek/master/res/zegarek-icon.svg
sudo mv /tmp/${APP_NAME}.svg /usr/share/pixmaps/${APP_NAME}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=/usr/share/pixmaps/${APP_NAME}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install GitQlient Qt-based GUI Git client from AppImage
APP_NAME=GitQlient
APP_GUI_NAME="Qt-based GUI Git client."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Git;Version Control;"
APP_VERSION=1.6.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/francescmm/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME}.png -J -L https://github.com/francescmm/${APP_NAME}/raw/master/AppImage/${APP_NAME}/usr/share/icons/hicolor/128x128/apps/${APP_NAME}.png
sudo mv /tmp/${APP_NAME}.png /usr/share/pixmaps/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=/usr/share/pixmaps/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install LibrePCB cross-platform EDA/PCB design tool from package
APP_NAME=LibrePCB
APP_GUI_NAME="Cross-platform EDA/PCB design tool."
APP_VERSION=1.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.${APP_NAME,,}.org/releases/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/bin/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/share/icons/hicolor/scalable/apps/org.${APP_NAME,,}.${APP_NAME}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=Science;Electronics;
Keywords=Electronics;PCB;EDA;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install FidoCadJ Java-based minimalist EDA/PCB design tool from package
APP_NAME=FidoCadJ
APP_GUI_NAME="Java-based minimalist EDA/PCB design tool."
APP_VERSION=0.24.8_eta
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/DarwinNE/${APP_NAME}/releases/download/v${APP_VERSION//_/}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME}.png -J -L https://github.com/DarwinNE/${APP_NAME}/raw/master/icons/icona_${APP_NAME,,}_512x512.png
sudo mv /tmp/${APP_NAME}.png /usr/share/pixmaps/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/pixmaps/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;
Keywords=Database;SQL;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Circuit Simulator 2019 GUI circuit simulation tool from package
APP_NAME="Circuit Simulator 2019"
APP_GUI_NAME="GUI circuit simulation tool."
APP_VERSION=2.46.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME// /}_v${APP_VERSION}
sudo apt-get install -y ngspice okular
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://andreaverdi.altervista.org/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME// /}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME// /}
sudo ln -s -f /opt/${APP_NAME// /}/${APP_NAME// /} /usr/local/bin/${APP_NAME// /}
cat > /tmp/${APP_NAME// /}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME// /}
Exec=/usr/local/bin/${APP_NAME// /}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Electronics;Education;
Keywords=Electronics;
EOF
sudo mv /tmp/${APP_NAME// /}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Tanglet Qt-based cross-platform Boggle-style puzzle word game from source
APP_NAME=Tanglet
APP_GUI_NAME="Qt-based cross-platform Boggle-style puzzle word game."
APP_VERSION=1.5.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install qt5-qmake qt5-default qttools5-dev-tools -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/gottcode/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
qtchooser -run-tool=qmake -qt=5 && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Lite cross-platform SDL-based GUI text editor written in Lua from package
APP_NAME=Lite
APP_GUI_NAME="Cross-platform SDL-based GUI text editor written in Lua."
APP_VERSION=1.11
APP_EXT=zip
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rxi/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME}.ico -J -L https://github.com/rxi/lite/raw/master/icon.ico
sudo mv /tmp/${APP_NAME}.ico /usr/share/pixmaps/${APP_NAME}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/pixmaps/${APP_NAME}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Accessories;
Keywords=Text;Editor;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Pyp Python shell-based REPL from package
APP_NAME=Pyp
APP_GUI_NAME="Python shell-based REPL."
APP_VERSION=0.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hauntsaninja/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 /tmp/${FILE_NAME}/setup.py install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Xi Electron cross-platform GUI for Xi Editor from Debian package
APP_NAME=Xi-Electron
APP_GUI_NAME="Cross-platform GUI for Xi Editor."
APP_VERSION=0.1.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/acheronfail/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Todo-List cross-platform Electron/VueJS-based to do manager from AppImage
APP_NAME=Todo-list
APP_GUI_NAME="Cross-platform Electron/VueJS-based to do manager."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="To Do;Productivity;"
APP_VERSION=0.9.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME//-/}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/blaadje/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME}.png -J -L https://github.com/blaadje/Todo-list/raw/master/icons/256x256.png
sudo mv /tmp/${APP_NAME}.png /usr/share/pixmaps/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=/usr/share/pixmaps/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Notes-CLI Golang-based shell notepad with Markdown support from package
APP_NAME=Notes-CLI
APP_GUI_NAME="Golang-based shell notepad with Markdown support."
APP_VERSION=2020.04.29
APP_EXT=tar.gz
FILE_NAME=notes-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/prdpx7/${APP_NAME,,}/releases/download/v0.1/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/* /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install The-Way Rust-based code snippet manager for terminal from package
APP_NAME=The-Way
APP_GUI_NAME="Rust-based code snippet manager for terminal."
APP_VERSION=0.6.0
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-${ARCH_TYPE}-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/out-of-cheese-error/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install SAD (Super Accelerated Diff) modern multifile sed replacement from package
APP_NAME=SAD
APP_GUI_NAME="Modern multifile sed replacement."
APP_VERSION=0.1.6
APP_EXT=zip
FILE_NAME=release
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ms-jpq/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/x86_64-unknown-linux-gnu /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Birdfont cross-platform font editor from AppImage
APP_NAME=Birdfont
APP_GUI_NAME="Cross-platform font editor."
APP_GUI_CATEGORIES="Accessories;Office;System;"
APP_GUI_KEYWORDS="To Do;Productivity;"
APP_VERSION=2.30.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-8eeace3-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/johanmattssonm/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME}.png -J -L https://github.com/johanmattssonm/birdfont/raw/master/resources/linux/128x128/birdfont.png
sudo mv /tmp/${APP_NAME}.png /usr/share/pixmaps/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=/usr/share/pixmaps/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Stratego Java-based implementation of classic boardgame from package
APP_NAME=Stratego
APP_GUI_NAME="Java-based implementation of classic boardgame."
APP_VERSION=0.81
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/java-${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}*/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/bin:/opt/${APP_NAME,,}/ai:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/bin/${FILE_NAME}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Stratego;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install KJV Pure Bible Search cross-platfrom GUI Bible search tool from package
APP_NAME=KVJPureBibleSearch
APP_GUI_NAME="Cross-platfrom GUI Bible search tool."
APP_VERSION=3.0.0-2
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i486
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y alien lsb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/purebiblesearch/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo /tmp/${FILE_NAME}/${FILE_NAME}.${ARCH_TYPE}.sh
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Lionwiki-t2t minimalist CMS based on Lionwiki and txt2tags syntax from package
APP_NAME=Lionwiki-t2t
APP_GUI_NAME="Minimalist CMS based on Lionwiki and txt2tags syntax."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
xdg-open http://localhost/${APP_NAME,,}/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/lionwiki-t2t_logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Office;Internet;
Keywords=Wiki;CMS;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Touchpad Indicator utility to quickly disable touchpad when typing and/or when mouse is plugged in from PPA
# https://itsfoss.com/disable-touchpad-when-mouse-used/
sudo add-apt-repository -y ppa:atareao/atareao
sudo apt-get update -y
sudo apt-get install -y touchpad-indicator

# Install GeoDa cross-platform GIS utility from Debian package
APP_NAME=GeoDa
APP_GUI_NAME="Cross-platform GIS utility."
APP_VERSION=1.14.0.2
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (di|eo|fo)$ ]]; then  # 19.04, 19.10, 20.04
	DISTRIB_VERSION=disco
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co)$ ]]; then  # 18.04, 18.10
	DISTRIB_VERSION=bionic
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe|ya|ze|ar)$ ]]; then  # 16.04 - 17.10
	DISTRIB_VERSION=xenial
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1${DISTRIB_VERSION}1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/GeoDaCenter/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Wine Windows emulator from repository
# https://wiki.winehq.org/Ubuntu
# https://linuxhint.com/wine_ubuntu_install_configure/
sudo dpkg --add-architecture i386
wget -O - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (fo)$ ]]; then  # 20.04
	DISTRIB_VERSION=focal
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (eo)$ ]]; then  # 19.10
	DISTRIB_VERSION=eoan
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co|di)$ ]]; then  # 18.04, 18.10, 19.04
	DISTRIB_VERSION=bionic
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe|ya|ze|ar)$ ]]; then  # 16.04 - 17.10
	DISTRIB_VERSION=xenial
fi
sudo add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ '${DISTRIB_VERSION}' main'
sudo apt-get update -y
sudo apt-get install -y --install-recommends winehq-stable winetricks q4wine

# Install MyDailyWallpaper daily Bing wallpaper downloader from package
APP_NAME=MyDailyWallpaper
APP_GUI_NAME="Daily Bing wallpaper downloader."
APP_VERSION=1.2
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME}-v${APP_VERSION}-${ARCH_TYPE}-linux
sudo apt-get install -y alien lsb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:/opt/${APP_NAME,,}/lib:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}App &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install MySQL Workbench GUI editor and client for MySQL from Debian package
APP_NAME=MySQL-Workbench
APP_GUI_NAME="GUI editor and client for MySQL."
APP_VERSION=8.0.20-1
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (fo)$ ]]; then  # 20.04
	DISTRIB_VERSION=20.04
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co|di|eo)$ ]]; then  # 18.04, 18.10, 19.04, 19.10
	DISTRIB_VERSION=18.04
fi
FILE_NAME=${APP_NAME,,}-community_${APP_VERSION}ubuntu${DISTRIB_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://dev.mysql.com/get/Downloads/MySQLGUITools/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install MySQL Shell command-line tool for MySQL from Debian package
APP_NAME=MySQL-Shell
APP_GUI_NAME="Command-line tool for MySQL."
APP_VERSION=8.0.20-1
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (fo)$ ]]; then  # 20.04
	DISTRIB_VERSION=20.04
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co|di|eo)$ ]]; then  # 18.04, 18.10, 19.04, 19.10
	DISTRIB_VERSION=18.04
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}ubuntu${DISTRIB_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://dev.mysql.com/get/Downloads/${APP_NAME}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install s3fs file system extension to mount AWS S3 bucket from source
# https://sysadminxpert.com/how-to-mount-s3-bucket-on-linux-instance/
APP_NAME=s3fs-fuse
APP_GUI_NAME="File system extension to mount AWS S3 bucket."
APP_VERSION=1.93
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
sudo apt-get install -y build-essential libcurl4-openssl-dev libxml2-dev mime-support libfuse-dev libssl-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}
./autogen.sh && ./configure && make && sudo make install
sudo echo <access-key-id>:<secret-access-key> > /etc/passwd-s3fs
sudo chmod 600 /etc/passwd-s3fs
sudo mkdir /mnt/<bucket-name>
sudo echo s3fs#<bucket-name> /mnt/<bucket-name> fuse _netdev,rw,nosuid,nodev,allow_other,nonempty 0 0 >> /etc/fstab
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Lumina Desktop Qt-based Linux desktop environment from source
APP_NAME=Lumina
APP_VERSION=1.6.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential qt5-default qttools5-dev-tools libxrandr-dev libqt5gui5 qtmultimedia5-dev libqt5multimediawidgets5  libqt5network5 libqt5svg5-dev libqt5x11extras5-dev libxcb-icccm4-dev libxcb-ewmh-dev libxcb-composite0-dev libxcb-damage0-dev libxcb-util0-dev libphonon4qt5-dev libxcomposite-dev libxdamage-dev libxrender-dev libxcb-image0-dev libxcb-screensaver0-dev qtdeclarative5-dev fluxbox kde-style-oxygen-qt5 xscreensaver xbacklight alsa-utils acpi numlockx pavucontrol xterm sysstat libxcursor-dev libqt5concurrent5 libqt5core5a lightdm qtbase5-private-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/lumina-desktop/lumina/archive/v1.6.0.tar.gz
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 ../lumina.pro && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Clipboard History cross-platform manager built with Electron from Debian package
APP_NAME=ClipboardHistory
APP_GUI_NAME="Cross-platform manager built with Electron."
APP_VERSION=1.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/savannahar68/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Verco simple Rust-based Git/Hg TUI client focused on keyboard shortcuts from package
APP_NAME=Verco
APP_GUI_NAME="Simple Rust-based Git/Hg TUI client focused on keyboard shortcuts."
APP_VERSION=5.4.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-x86_64
curl -o /tmp/${FILE_NAME} -J -L https://github.com/matheuslessarodrigues/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo mv /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install git-fuzzy interactive Git commmand-line tool powered by 'fzf' from package
APP_NAME=git-fuzzy
APP_GUI_NAME="Interactive Git commmand-line tool powered by 'fzf'."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=N/A
sudo apt-get install -y fzf
cd /opt
sudo git clone https://github.com/bigH/git-fuzzy.git
sudo chmod a+x /opt/${APP_NAME,,}/bin/${APP_NAME,,}
echo "export PATH=/opt/"${APP_NAME,,}"/bin:\$PATH" >> ${HOME}/.bashrc
source ${HOME}/.bashrc
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install GtkRadio simple Internet radio player from Debian package
APP_NAME=Online-Radio-Player
APP_GUI_NAME="Simple Internet radio player."
APP_VERSION=1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/gtk-radio/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install MuWire cross-platform Java-based P2P client with anonymization features from package
APP_NAME=MuWire
APP_GUI_NAME="Cross-platform Java-based P2P client with anonymization features."
APP_VERSION=0.8.13
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://muwire.com/downloads/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Shutter Encoder cross-platform audio/video encoder/converter from AppImage
APP_NAME="Shutter Encoder"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform audio/video encoder/converter."
APP_GUI_CATEGORIES="Audio;Video;Multimedia;"
APP_GUI_KEYWORDS="Converter;Encoder;Decoder;"
APP_VERSION=18.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /%20}%20${APP_VERSION}%20Linux%2064bits
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/p/${_APP_NAME}/icon?1678339027
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/$${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Qt JSON diff GUI JSON viewer/comparer from source
APP_NAME=QTjsonDiff
APP_VERSION=0.62b
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}_refs-heads-master
sudo apt-get install -y build-essential qt5-default qttools5-dev-tools
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/coozoo/${APP_NAME,,}/archive/refs/tags/${APP_VERSION}_refs/heads/master.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
qtchooser -run-tool=qmake -qt=5 ${APP_NAME}.pro && make && sudo make install
sudo ln -s -f /usr/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME// /%20}*

# Install Beekeeper Studio cross-platform SQL editor and database manager (MySQL/PostgreSQL/SQLite/MS SQL Server) from Debian package
APP_NAME=Beekeeper-Studio
APP_GUI_NAME="Cross-platform SQL editor and database manager (MySQL/PostgreSQL/SQLite/MS SQL Server)."
APP_VERSION=5.2.12
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install FontEdit cross-platform Qt-based font editor/converter for building fonts for embedded system applications from Debian package
APP_NAME=FontEdit
APP_GUI_NAME="Cross-platform Qt-based font editor/converter for building fonts for embedded system applications."
APP_VERSION=1.1.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ayoy/${APP_NAME,,}/releases/download/v${APP_VERSION//-1/}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Secret minimalist command-line password manager from package
APP_NAME=Secret
APP_GUI_NAME="Minimalist command-line password manager."
APP_VERSION=0.12
APP_EXT=bin
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/angt/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install HSKinter Python GUI Mandarin Chinese flashcard tool from package
APP_NAME=HSKinter
APP_GUI_NAME="Python GUI Mandarin Chinese flashcard tool."
APP_VERSION=0.5.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
sudo pip3 install gTTS playsound
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Education;
Keywords=Chinese;Language;Flashcards;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install GRIEF cross-platform console text editor from source
APP_NAME=GRIEF
APP_VERSION=3.2.3-build28
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential flex bison
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/adamyg/${APP_NAME,,}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure_new && make release build && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Responsively cross-platform web browser for responsive web app testing from AppImage
APP_NAME=Responsively
APP_GUI_NAME="Cross-platform web browser for responsive web app testing."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Web Design;Testing;"
APP_VERSION=0.18.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}App-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/manojVivek/${APP_NAME,,}-app/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME}.png -J -L https://github.com/manojVivek/responsively-app/raw/master/desktop-app/resources/icon.png
sudo mv /tmp/${APP_NAME}.png /usr/share/pixmaps/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=/usr/share/pixmaps/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ijq interactive 'jq' JSON query tool from package
# https://gpanders.com/blog/introducing-ijq/
APP_NAME=ijq
APP_VERSION=0.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-x86_64-linux-gnu
npm install -g jq
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://git.sr.ht/~gpanders/${APP_NAME,,}/refs/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Ungoogled Chromium Chrome web browser with Google integration removed from Debian package
APP_NAME=Ungoogled-Chromium
APP_GUI_NAME="Chrome web browser with Google integration removed."
APP_VERSION=81.0.4044.138-1
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (fo)$ ]]; then  # 20.04
	DISTRIB_VERSION=Ubuntu_Focal
	DISTRIB_CODENAME=focal
else
	DISTRIB_VERSION=Ubuntu_Bionic
	DISTRIB_CODENAME=bionic
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}.${DISTRIB_CODENAME}1_${KERNEL_TYPE}
FILE_NAME_COMMON=${APP_NAME,,}-common_${APP_VERSION}.${DISTRIB_CODENAME}1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME_COMMON}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/ungoogled_chromium/${DISTRIB_VERSION}/${KERNEL_TYPE}/${FILE_NAME_COMMON}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME_COMMON}.${APP_EXT}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/ungoogled_chromium/${DISTRIB_VERSION}/${KERNEL_TYPE}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install xsv cross-platform, Rust-based CSV command-line toolkit from package
# https://gpanders.com/blog/introducing-ijq/
APP_NAME=xsv
APP_VERSION=0.13.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/BurntSushi/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Virtualbox virtualization platform from Debian package
APP_NAME=Virtualbox
APP_GUI_NAME="Virtualization platform."
APP_VERSION=6.1_6.1.10-138449
MAJOR_VERSION=${APP_VERSION#*_}
MAJOR_VERSION=${MAJOR_VERSION%-*}
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (eo|fo)$ ]]; then  # 19.10, 20.04
	DISTRIB_CODENAME=eoan
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co|di)$ ]]; then  # 18.04, 18.10, 19.04
	DISTRIB_CODENAME=bionic
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe|ya|ze|ar)$ ]]; then  # 16.04 - 17.10
	DISTRIB_CODENAME=xenial
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (tr|ut|vi|wi)$ ]]; then  # 14.04 - 15.10
	DISTRIB_CODENAME=trusty
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}~Ubuntu~${DISTRIB_CODENAME}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.virtualbox.org/virtualbox/${MAJOR_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Cryo visual file manager from Debian package
APP_NAME=Cryo
APP_GUI_NAME="Visual file manager."
APP_VERSION=0.5.22
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://cryonet.io/downloads/linux/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ugrep ultra fast grep with interactive query UI from source
APP_NAME=ugrep
APP_VERSION=7.4.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libbz2-dev libz-dev liblzma-dev libpcre2-dev libboost-regex-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Genivia/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./build.sh --enable-pager && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Obsidian cross-platform knowledge-base tool using Markdown files from AppImage
APP_NAME=Obsidian
APP_GUI_NAME="Cross-platform knowledge-base tool using Markdown files."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Markdown;Editor;"
APP_VERSION=1.5.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/obsidianmd/${APP_NAME,,}-releases/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=/usr/share/pixmaps/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install dutree cross-platform, Rust-based colorized file system utilization analyzer from package
APP_NAME=dutree
APP_VERSION=0.2.15
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/nachoparker/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Belofte cross-platform Xboard-compatible chess engine from package
APP_NAME=Belofte
APP_VERSION=2.1.8
APP_EXT=N/A
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=32
fi
FILE_NAME=${APP_NAME,,}${ARCH_TYPE}-${APP_VERSION}
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install DatabaseViewer lightweight PHP-based MySQL database viewer/editor from package
APP_NAME=DatabaseViewer
APP_GUI_NAME="Lightweight PHP-based MySQL database viewer/editor."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Database;MySQL;"
APP_VERSION=0.1
APP_EXT=zip
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/philipredstone/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=${WWW_HOME}/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php
Icon=${WWW_HOME}/${APP_NAME,,}/favicon/favicon-32x32.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install bemenu dynamic menu library and client program from source
APP_NAME=bemenu
APP_VERSION=0.4.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libncursesw5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Cloudef/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install && sudo ldconfig
echo 'export BEMENU_BACKEND=curses' >> $HOME/.bashrc
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install pacapt Archlinux Pacman-like package manager wrapper utility from package
APP_NAME=pacapt
APP_VERSION=3.0.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/icy/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod 755 /usr/local/bin/${APP_NAME,,}
sudo ln -f -sv /usr/local/bin/${APP_NAME,,} /usr/local/bin/pacman || true
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install xlunch minimalist GUI application launcher for X11 from source
APP_NAME=xlunch
APP_GUI_NAME="Minimalist GUI application launcher for X11."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Launcher;"
APP_VERSION=4.5.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libimlib2-dev libx11-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Tomas-M/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
sudo cp /tmp/${FILE_NAME}/docs/favicon.ico /usr/local/share/icons/hicolor/scalable/apps/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/bin
Exec=xlunch
Icon=/usr/local/share/icons/hicolor/scalable/apps/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/

# Install Penguin's Eggs command-line utility to create live CD ISO from current Debian/Ubuntu system from Debian package
APP_NAME=Eggs
APP_GUI_NAME="Command-line utility to create live CD ISO from current Debian/Ubuntu system."
APP_VERSION=10.1.1-5
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/penguins-eggs/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Krill command-line Ubuntu installer based on Calamares from Debian package
APP_NAME=Krill
APP_GUI_NAME="Command-line Ubuntu installer based on Calamares."
APP_VERSION=0.0.12
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/penguins-eggs/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install SOPS (Secrets OPerationS) cross-platform, command-line utility to manage secrets from Debian package
APP_NAME=SOPS
APP_GUI_NAME="Cross-platform, command-line utility to manage secrets."
APP_VERSION=3.9.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mozilla/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install DomTerm combined terminal emulator and REPL console using web technlogies from source
APP_NAME=DomTerm
APP_VERSION=2.9.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y automake libjson-c-dev pkg-config asciidoctor libmagic-dev zlib1g-dev qt5-qmake qt5-default libqt5webengine5 libqt5webchannel5-dev qtwebengine5-dev libwebsockets-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/PerBothner/${APP_NAME}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
autoreconf -i && ./configure --with-libwebsockets --with-qtwebengine && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install btfs BitTorrent file system to allow mounting .torrent or .magnet file as directory from source
APP_NAME=btfs
APP_GUI_NAME="BitTorrent file system to allow mounting .torrent or .magnet file as directory."
APP_VERSION=2.21
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y autoconf automake libfuse-dev libtorrent-rasterbar-dev libcurl4-openssl-dev g++
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/johang/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
autoreconf -i && ./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ProcDump command-line process management and debugging tool from Debian package
APP_NAME=ProcDump
APP_GUI_NAME="Command-line process management and debugging tool."
APP_VERSION=1.1.1
BUILD_NBR=220
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-${BUILD_NBR}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/microsoft/"ProcDump-for-Linux"/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install DailyDesktopWallpaperPlus utility to set Bing or Windows Spotlight daily photo as wallpaper from package
APP_NAME=DailyDesktopWallpaperPlus
APP_GUI_NAME="Utility to set Bing or Windows Spotlight daily photo as wallpaper."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Wallpaper;"
APP_VERSION=4.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-v${APP_VERSION}-x86_64-linux-build
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}*/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME}.sh /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install qcd cross-platform to quickly navigate directories in console with bookmarks from package
APP_NAME=qcd
APP_GUI_NAME="Cross-platform to quickly navigate directories in console with bookmarks."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Productivity;Shell;"
APP_VERSION=1.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_linux_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/eykrehbein/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/linux_amd64
sudo cp /tmp/${FILE_NAME}/linux_amd64/bin/qcdscript /usr/local/bin
sudo cp /tmp/${FILE_NAME}/linux_amd64/bin/qcdhelper /usr/local/bin
sudo chmod a+x /usr/local/bin/qcdscript
echo "alias qcd='source /usr/local/bin/qcdscript'" >> $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Xcoral minimalist GUI text editor from source
APP_NAME=Xcoral
APP_GUI_NAME="Minimalist GUI text editor."
APP_GUI_CATEGORIES="Development;Programming;Accessories;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=4.02.8
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libx11-dev libxft-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://xcoral.free.fr/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/xcoral
#Icon=/usr/local/share/icons/hicolor/scalable/apps/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install CIDE lightweight, fast IDE for C/C++ from AppImage
APP_NAME=CIDE
APP_GUI_NAME="Lightweight, fast IDE for C/C++."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="IDE;Editor;"
APP_VERSION=2020-02-01
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/puzzlepaint/${APP_NAME,,}/releases/download/release-${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://github.com/puzzlepaint/cide/raw/master/resources_packed/cide.svg
sudo mv /tmp/${APP_NAME,,}.svg /usr/share/pixmaps/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=/usr/share/pixmaps/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Caliope (formerly MariaDB Explorer) cross-platform Qt-based GUI MariaDB/MySQL database manager from package
APP_NAME=Caliope
APP_GUI_NAME="Cross-platform Qt-based GUI MariaDB/MySQL database manager."
APP_GUI_CATEGORIES="Development;Programming;Accessories;"
APP_GUI_KEYWORDS="Database;SQL;MySQL"
APP_VERSION=444
APP_EXT=sh
FILE_NAME=${APP_NAME}-LinuxInstaller-r${APP_VERSION}
sudo apt-get install -y build-essential libx11-dev libxft-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://sourceforge.net/p/caliope/code/HEAD/tree/trunk/Cal%C3%ADope-InstallerBase-Linux/config/Cal%C3%ADope-1.png?format=raw
chmod +x /tmp/${FILE_NAME}.${APP_EXT}
sudo /tmp/${FILE_NAME}.${APP_EXT}
sudo ln -s /opt/${APP_NAME,,}/Calíope.sh /usr/local/bin/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/Calíope.sh
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Wisdom REST Client Java-based GUI tool for REST API testing from package
APP_NAME=REST-Client
APP_GUI_NAME="Java-based GUI tool for REST API testing."
APP_VERSION=1.2
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
FILE_NAME=${FILE_NAME//-/}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;
Keywords=REST;API;Testing;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install git-get command-line tool to clone, organize and manage multiple Git repositories from Debian package
APP_NAME=git-get
APP_GUI_NAME="Command-line tool to clone, organize and manage multiple Git repositories."
APP_VERSION=0.0.7
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${KERNEL_TYPE//i/}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/grdl/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Meditor Java-based symbolic computing library and math editor from package
APP_NAME=Meditor
APP_GUI_NAME="Java-based symbolic computing library and math editor."
APP_GUI_CATEGORIES="Development;Programming;Education;Science;Math;"
APP_GUI_KEYWORDS="Math;Visualization;"
APP_VERSION=5.4.4
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/jscl-${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
sh /opt/${APP_NAME,,}/bin/linoleum &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
Categories=Programming;Development;
Keywords=REST;API;Testing;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install jtab cross-platform, Rust-based command-line utility to display JSON in tabular format from package
APP_NAME=jtab
APP_GUI_NAME="Cross-platform, Rust-based command-line utility to display JSON in tabular format."
APP_VERSION=0.3.0
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-${ARCH_TYPE}-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/wlezzar/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Great Little Radio Player Internet radio station streamer from Debian package
APP_NAME="Great Little Radio Player"
APP_GUI_NAME="Internet radio station streamer."
APP_VERSION=1.5.0
APP_EXT=deb
FILE_NAME=${APP_NAME// /}
FILE_NAME=${FILE_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/glrp/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Buckwheat CSV minimalist GUI viewer for large CSV files from package
APP_NAME=BuckwheatCsv
APP_GUI_NAME="Minimalist GUI viewer for large CSV files."
APP_GUI_CATEGORIES="Office;"
APP_GUI_KEYWORDS="CSV;Spreadsheet;"
APP_VERSION=2.0.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}_${APP_VERSION}_Debian_11_bullseye_x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME} /usr/local/bin
sudo ln -s -f /usr/local/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Diskonaut command-line disk usage utility from package
# https://www.tecmint.com/diskonaut-linux-disk-space-navigator/
APP_NAME=Diskonaut
APP_GUI_NAME="Command-line disk usage utility."
APP_VERSION=0.11.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/imsnif/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Glances cross-platform console system monitoring tool from package
APP_NAME=Glances
APP_GUI_NAME="Cross-platform console system monitoring tool."
APP_VERSION=4.3.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/nicolargo/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 /tmp/${FILE_NAME}/setup.py install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Alacritty cross-platform, GPU-accelerated terminal emulator from PPA
https://github.com/alacritty/alacritty
sudo add-apt-repository -yy ppa:aslatter/ppa
sudo apt-get update
sudo apt-get install -yy alacritty

# Install httpflow command-line tool to capture and dump HTTP stream from source
APP_NAME=httpflow
APP_GUI_NAME="Command-line tool to capture and dump HTTP stream."
APP_VERSION=0.0.9
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libpcap-dev zlib1g-dev libpcre3 libpcre3-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/six-ddc/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}

# Install Font Manager simple GUI font manager for Linux from PPA
# https://github.com/FontManager/font-manager
sudo add-apt-repository -y ppa:font-manager/staging
sudo apt-get update -y
sudo apt-get install -y font-manager

# Install ProcMon command-line process syscall tracing tool from Debian package
APP_NAME=ProcMon
APP_GUI_NAME="Command-line process management and debugging tool."
APP_VERSION=1.0.0
BUILD_NBR=291
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-${BUILD_NBR}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/microsoft/"ProcMon-for-Linux"/releases/download/1.0/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install rc re-implementation of Plan 9 shell from source
# https://cosine.blue/2019-06-26-rc-shell-setup.html
APP_NAME=rc
APP_GUI_NAME="Re-implementation of Plan 9 shell."
APP_VERSION=1.7.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libreadline-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rakitzis/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
autoreconf --force --install && ./configure --with-edit=readline
make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}

# Install PyCheck minimalist GUI for checksum calculation/comparison from package
APP_NAME=PyCheck
APP_GUI_NAME="Minimalist GUI for checksum calculation/comparison."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Checksum;"
APP_VERSION=20.7.18
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/checkmd5/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -Rf /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py &
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}_icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Poodle cross-platform command-line tool to build API requests from package
APP_NAME=Poodle
APP_GUI_NAME="Cross-platform console system monitoring tool."
APP_VERSION=2.2.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Clivern/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -Rf /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install AxiScope cross-platform, Java-based digital/analog oscilloscope frontend from package
APP_NAME=AxiScope
APP_GUI_NAME="Cross-platform, Java-based digital/analog oscilloscope frontend."
APP_GUI_CATEGORIES="Electronics;Development;"
APP_GUI_KEYWORDS="Oscilloscope;"
APP_VERSION=2020.07.24-19.45
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/j${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -Rf /tmp/${FILE_NAME}/${APP_NAME,,}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}.sh &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Zenith Rust-based terminal system monitoring tool with graphic display from package
APP_NAME=Zenith
APP_GUI_NAME="Rust-based terminal system monitoring tool with graphic display."
APP_VERSION=0.12.0
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}.x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bvaisvil/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -Rf /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install PHP Shell pure PHP remote shell in the browser from package
APP_NAME=PHPShell
APP_GUI_NAME="Pure PHP remote shell in the browser."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Shell;"
APP_VERSION=2.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -Rf /tmp/${FILE_NAME}/* ${WWW_HOME}/${APP_NAME,,}
xdg-open http://localhost/${APP_NAME,,}/${APP_NAME,,}.php
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=${WWW_HOME}/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}/${APP_NAME,,}.php
Icon=${WWW_HOME}/${APP_NAME,,}/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install GJots Python-based hierarchical notepad from package
APP_NAME=GJots
APP_GUI_NAME="Python-based hierarchical notepad."
APP_VERSION=3.1.9
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}2-${APP_VERSION}
sudo apt-get install -y libgtksourceview-3.0-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -Rf /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Zim Python-based desktop wiki from Debian package
APP_NAME=Zim
APP_GUI_NAME="Python-based desktop wiki."
APP_VERSION=0.75.2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://zim-wiki.org/downloads/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install QRadioLink multimode SDR transceiver for GNU radio from AppImage
APP_NAME=QRadioLink
APP_GUI_NAME="Multimode SDR transceiver for GNU radio."
APP_GUI_CATEGORIES="Multimedia;"
APP_GUI_KEYWORDS="Audio;Radio;"
APP_VERSION=0.9.0-1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/qradiolink/qradiolink/next/src/res/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${FILE_NAME}.${APP_EXT}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install QuickRedis GUI management tool for Redis from AppImage
APP_NAME=QuickRedis
APP_GUI_NAME="GUI management tool for Redis."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Redis;Database;"
APP_VERSION=2.7.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-x86_64
sudo apt-get install -y redis-server
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install KmCaster Java-based on-screen display (OSD) for keyboard and mouse events for screencasting from package
APP_NAME=KmCaster
APP_GUI_NAME="Java-based on-screen display (OSD) for keyboard and mouse events for screencasting."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Mouse;Keyboard;Screen;"
APP_VERSION=1.1.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/DaveJarvis/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/DaveJarvis/kmcaster/master/src/main/resources/images/mouse/0.svg
sudo mv /tmp/${APP_NAME,,}.svg /usr/share/pixmaps/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=/usr/share/pixmaps/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install AxiTerm cross-platform, Java-based serial terminal from package
APP_NAME=AxiTerm
APP_GUI_NAME="Cross-platform, Java-based serial terminal."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Terminal;"
APP_VERSION=2020.07.24-13.52
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/j${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -Rf /tmp/${FILE_NAME}/${APP_NAME,,}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}.sh &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd ${HOME}
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Espanso Cross-platform Text Expander written in Rust from AppImage
APP_NAME=Espanso
APP_GUI_NAME="Cross-platform Text Expander written in Rust."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Text;Expander;"
APP_VERSION=2.2.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-X11
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/federico-terzi/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/federico-terzi/espanso/blob/master/${APP_NAME,,}/src/res/logo_no_background.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Gitoxide Rust-based implementation of Git version control tool from package
APP_NAME=Gix
APP_GUI_NAME="Rust-based implementation of Git version control tool."
APP_VERSION=0.3.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-max-termion-v${APP_VERSION}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Byron/gitoxide/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -Rf /tmp/${FILE_NAME}/${APP_NAME,,}* /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install httpref command line, offline, access to HTTP references from package
APP_NAME=httpref
APP_GUI_NAME="Command line, offline, access to HTTP references."
APP_VERSION=1.5.1
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dnnrly/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -Rf /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install gotop terminal-based, graphical performance monitoring utility built with Golang from package
APP_NAME=gotop
APP_GUI_NAME="Terminal-based, graphical performance monitoring utility built with Golang."
APP_VERSION=4.2.0
APP_EXT=tgz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/xxxserxxx/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -Rf /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Sharik cross-platform Wifi file-sharing utility from Debian package
APP_NAME=Sharik
APP_VERSION=3.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Gila CMS lightweight PHP/MySQL content management platform from package
# https://gilacms.com/
APP_NAME=Gila-CMS
APP_GUI_NAME="Lightweight PHP/MySQL content management platform."
APP_VERSION=2.0.2
APP_EXT=tar.gz
DB_NAME=${APP_NAME,,}
DB_NAME=${DB_NAME//-/}
DB_USER=${DB_NAME}
DB_PASSWORD=${DB_NAME}
FILE_NAME=v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME//-/}*/* ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}'; GRANT USAGE ON *.* TO '${DB_USER}'@'%'; GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%'; FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/index.php?install &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/assets/gila-logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Programming;Development;Internet;
Keywords=CMS;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install neix RSS/Atom news reader for terminal from source
APP_NAME=neix
APP_GUI_NAME="RSS/Atom news reader for terminal."
APP_VERSION=0.1.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y cmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/qw3rtty/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
cmake . && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}

# Install redis-cui simple, visual command line interface for Redis from package
APP_NAME=redis-cui
APP_GUI_NAME="Simple, visual command line interface for Redis."
APP_VERSION=0.2.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}.linux
curl -o /tmp/${FILE_NAME} -J -L https://github.com/kyai/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
cd /tmp
sudo cp -f /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install PET cross-platform command-line snippet manager from Debian package
APP_NAME=PET
APP_VERSION=1.0.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/knqyf263/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install FFaudioConverter Qt-based GUI front-end for FFmpeg for audio conversion from source
APP_NAME=FFaudioConverter
APP_GUI_NAME="Qt-based GUI front-end for FFmpeg for audio conversion."
APP_VERSION=0.29
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}-${APP_VERSION}-src
sudo apt-get install -y qtbase5-dev qt5-qmake qt5-default qttools5-dev-tools
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Bleuzen/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
qtchooser -run-tool=qmake -qt=5 ${APP_NAME}.pro && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Cryptomator GUI-based client-side file encryption tool for cloud storage services from AppImage
# https://cryptomator.org/
APP_NAME=Cryptomator
APP_GUI_NAME="GUI-based client-side file encryption tool for cloud storage services."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Encryption;"
APP_VERSION=1.16.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install navi interactive cheatsheet tool for the command-line and application launchers from package
APP_NAME=navi
APP_GUI_NAME="Interactive cheatsheet tool for the command-line and application launchers."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Productivity;Shell;"
APP_VERSION=2.22.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/denisidoro/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
echo 'source <(echo "$(navi widget bash)")' >> $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install openkropki SDL implementation of kropki/tochki puzzle game from source
APP_NAME=openkropki
APP_GUI_NAME="SDL implementation of kropki/tochki puzzle game."
APP_GUI_CATEGORIES="Entertainment;Games;"
APP_GUI_KEYWORDS="Puzzle;Dots;"
APP_VERSION=0.4
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libsdl2-dev libsdl2-ttf-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp /tmp/${FILE_NAME}/icon.png /usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install croc cross-platform command-line secure file transfer tool from Debian package
APP_NAME=croc
APP_VERSION=10.2.2
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=64bit
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=32bit
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/schollz/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install fastget cross-platform command-line parallel file download utility from Debian package
APP_NAME=fastget
APP_VERSION=0.2.0
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/pgollangi/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PdfJumbler Java-based tool to rearrange/merge/delete pages from PDF files from package
APP_NAME=PdfJumbler
APP_GUI_NAME="Java-based tool to rearrange/merge/delete pages from PDF files."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="PDF;Editor;"
APP_VERSION=0.4.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mgropp/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/mgropp/pdfjumbler/master/src/main/resources/pdfjumbler.svg
sudo mv /tmp/${APP_NAME,,}.svg /usr/share/pixmaps/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/pixmaps/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Glimpse cross-platform image editor based on GIMP from Flatpak package
APP_NAME=Glimpse
APP_VERSION=0.2.0
APP_EXT=flatpak
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y flatpak
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-image-editor/${FILE_NAME}.${APP_EXT}
sudo flatpak install /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ActivityWatch cross-platform (Python/Qt) time-tracking tool from package
APP_NAME=ActivityWatch
APP_GUI_NAME="Cross-platform (Python/Qt) time-tracking tool."
APP_GUI_CATEGORIES="Accessories;Office;Utility"
APP_GUI_KEYWORDS="Productivity;"
APP_VERSION=0.11.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}/* /opt
sudo ln -s -f /opt/${APP_NAME,,}/aw-qt /usr/local/bin/aw-qt
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/aw-qt
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install SQLite Browser (DB4S) cross-platform SQLite management tool via PPA
# https://github.com/sqlitebrowser/sqlitebrowser
sudo apt-add-repository -y ppa:linuxgndu/sqlitebrowser
sudo apt-get update
sudo apt-get install -y sqlitebrowser

# Install PatternGenerator Java GUI algorithmic graphical pattern generator utility from package
APP_NAME=patternGenerator
APP_GUI_NAME="Java GUI algorithmic graphical pattern generator utility."
APP_GUI_CATEGORIES="Graphics;"
APP_GUI_KEYWORDS="Pattern;Generator;"
APP_VERSION=2.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION//./_}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/pattgenerator/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/images/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install NoteMaster cross-platform, Electron-based pinnable desktop notepad from Debian package
APP_NAME=NoteMaster
APP_VERSION=0.2.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/LiamRiddell/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install OpenXP console e-mail client and NNTP news reader tool from package
APP_NAME=OpenXP
APP_GUI_NAME="Console e-mail client and NNTP news reader tool."
APP_VERSION=5.0.58
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-1.x86_64-lnx
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}5/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo /tmp/${FILE_NAME}/install.sh
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Pure Java Net Tools (pj-net-tools) Java GUI networking utilities with tabbed interface from package
# https://github.com/harp077/pj-net-tools
APP_NAME=pj-net-tools
APP_GUI_NAME="Java GUI networking utilities with tabbed interface."
APP_GUI_CATEGORIES="Internet;System;Accessories;"
APP_GUI_KEYWORDS="Networking;"
APP_VERSION=1.0.110
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install REDUCE cross-platform Lisp-based computer algebra system from Debian package
APP_NAME=REDUCE
APP_VERSION=6110
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-complete_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-algebra/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install viu Rust-based terminal image viewer from package
APP_NAME=viu
APP_GUI_NAME="Rust-based terminal image viewer."
APP_VERSION=1.4.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/atanunq/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install jot Golang-based terminal notepad from package
APP_NAME=jot
APP_GUI_NAME="Golang-based terminal notepad."
APP_VERSION=0.0.2
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/int3rlop3r/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install DuckDB cross-platform SQLite-like database with PostgreSQL functionality from package
APP_NAME=DuckDB
APP_GUI_NAME="Cross-platform SQLite-like database with PostgreSQL functionality."
APP_VERSION=1.3.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_cli-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/cwida/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install GloboNote cross-platform, Java-based sticky notes, to-do list, journals & reminders utility from package
# https://globonote.info/
APP_NAME=GloboNote
APP_GUI_NAME="Cross-platform, Java-based sticky notes, to-do list, journals & reminders utility."
APP_GUI_CATEGORIES="Accessories;Office"
APP_GUI_KEYWORDS="Notepad;Sticky Notes;Productivity;"
APP_VERSION=1.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/bin/${APP_NAME,,}/doc/images/${APP_NAME,,}16.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install duf (Disk Usage/Free Utility) GUI console disk usage utility from Debian package
APP_NAME=duf
APP_VERSION=0.8.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${KERNEL_TYPE//i/}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/muesli/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install CoTerminalApps cross-platform, color terminal/console puzzle games from package
APP_NAME=CoTerminalApps
APP_GUI_NAME="Cross-platform, , color terminal/console puzzle games."
APP_VERSION=5nov22
APP_EXT=7z
FILE_NAME=co${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/coterm/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/gnu/bin/nexus &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install htmleditor.py simple Python/Qt HTML/CSS editor from package
APP_NAME=HTMLEditor
APP_GUI_NAME="Simple Python/Qt HTML/CSS editor."
APP_GUI_CATEGORIES="Development;Office"
APP_GUI_KEYWORDS="HTML;CSS;Editor;"
APP_VERSION=2.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y python3-pyqt5.qsci
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-py/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 /opt/${APP_NAME,,}/${APP_NAME,,}.py &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/bin/${APP_NAME,,}/${APP_NAME,,}/resources/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install WezTerm cross-platform, Rust-based, GPU-accelerated terminal tool from Debian package
APP_NAME=WezTerm
APP_VERSION=20240203-110809-5046fc22
APP_EXT=deb
source /etc/lsb-release
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.Ubuntu${DISTRIB_RELEASE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/wez/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Bochs x86 PC emulator tool from RPM package
APP_NAME=Bochs
APP_VERSION=2.7
APP_EXT=rpm
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-1.x86_64
sudo apt-get install -y alien libsoxr-lsr0
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo alien --to-deb --verbose /tmp/${FILE_NAME}.${APP_EXT}  # Convert RPM package to Debian package
sudo gdebi -n ${APP_NAME,,}_${APP_VERSION}*.deb
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Pure Java FTP Server cross-platform, portable Java-based FTP server tool from package
APP_NAME=pj-ftp-server
APP_GUI_NAME="Cross-platform, portable Java-based FTP server tool."
APP_GUI_CATEGORIES="Networking;Internet"
APP_GUI_KEYWORDS="FTP;"
APP_VERSION=1.0.101
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-v.${APP_VERSION}_bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Float2Binary cross-platform, portable Java-based GUI tool to display IEEE 754 representation of floating point numbers from package
APP_NAME=Float2Binary
APP_GUI_NAME="Cross-platform, portable Java-based GUI tool to display IEEE 754 representation of floating point numbers."
APP_GUI_CATEGORIES="Programming;Development"
APP_GUI_KEYWORDS="Math;"
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME}_Executable
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/Executable*/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install AnyMeal Qt/SQLite-based desktop recipe tool from source
APP_NAME=AnyMeal
APP_GUI_NAME="Qt/SQLite-based desktop recipe tool."
APP_GUI_CATEGORIES="Office;"
APP_GUI_KEYWORDS="Recipe;"
APP_VERSION=1.23
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential flex googletest librecode-dev libsqlite3-dev qt5-default qttools5-dev-tools
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
qtchooser -run-tool=qmake -qt=5 && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install zoxide Rust-based fast alternative to 'cd' for directory navigation from package
# https://github.com/ajeetdsouza/zoxide
APP_NAME=zoxide
APP_VERSION=0.9.8
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
sudo ln -s -f /usr/local/bin/${APP_NAME,,} /usr/local/bin/z
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install tab Rust-based terminal multiplexer (alternative to 'tmux' or 'screen') from package
APP_NAME=tab
APP_VERSION=0.5.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/austinjones/${APP_NAME,,}-rs/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
https://github.com/austinjones/tab-rs/releases/download/v0.3.6/tab-x86_64-unknown-linux-gnu.tar.gz
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Pitivi cross-platform, Python-based video editor from Flatpak
# http://www.pitivi.org/
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub org.pitivi.Pitivi

# Install Sommelier installer for Windows applications to run under Wine emulator in from source
APP_NAME=Sommelier
APP_GUI_NAME="Installer for Windows applications to run under Wine emulator."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Windows;"
APP_VERSION=8.32
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ColumPaget/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME}-${APP_VERSION}
./configure --enable-ssl --prefix=/usr/local && make && sudo make install_global
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install FreeFileSync cross-platform, folder comparison and synchronization software from package
APP_NAME=FreeFileSync
APP_GUI_NAME="Cross-platform, folder comparison and synchronization software."
APP_GUI_CATEGORIES="Accessories;System"
APP_GUI_KEYWORDS="Backup;File Management;"
APP_VERSION=11.15
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}_${APP_VERSION}_Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://freefilesync.org/download/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/Resources/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install VietPad cross-platform, Java-based lightweight notepad/text editor from package
APP_NAME=VietPad
APP_GUI_NAME="Cross-platform,, Java-based lightweight notepad/text editor."
APP_GUI_CATEGORIES="Programming;Development;Accessories"
APP_GUI_KEYWORDS="Notepad;Editor;"
APP_VERSION=2.5
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Keystore Explorer cross-platform, GUI replacement for Java keytool and jarsigner utilities from Debian package
APP_NAME=Keystore-Explorer
APP_VERSION=5.5.2
APP_EXT=deb
FILE_NAME=kse_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kaikramer/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/kse*

# Install JWargames simple Java-based games package from package
APP_NAME=JWargames
APP_GUI_NAME="Simple Java-based games package."
APP_GUI_CATEGORIES="Games;Entertainment"
APP_GUI_KEYWORDS="Games;"
APP_VERSION=1.0.7
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/lib /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -Xms128m -Xmx1024m -classpath JWargames.jar  com.loader.JWarGamesLoader
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/lib/images/top_flyer_0.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Codex Notes cross-platform, Markdown notepad for programmers from Debian package
APP_NAME=Codex
APP_VERSION=1.4.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.codexnotes.com/download/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Toml Bombadil Rust-based dot file manager from package
APP_NAME=Bombadil
APP_VERSION=2.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/oknozor/toml-${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Kanboard PHP/SQLite-based project management tool based on Kanban methodology from package
APP_NAME=Kanboard
APP_GUI_NAME="PHP/SQLite-based project management tool based on Kanban methodology."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Kanban;Project Management;"
APP_VERSION=1.2.23
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}%20v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}*/* ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod 777 ${WWW_HOME}/${APP_NAME,,}/data
xdg-open http://localhost/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=${WWW_HOME}/${APP_NAME,,}
Exec=xdg-open http://localhost/${APP_NAME,,}
Icon=${WWW_HOME}/${APP_NAME,,}/assets/img/favicon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Mechvibes mechanical keyboard sound utility from Debian package
APP_NAME=Mechvibes
APP_VERSION=2.1.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Dayon Java-based remote access utility from Debian package
APP_NAME=Dayon
APP_VERSION=17.0.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}active/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Rechne command-line scientific calculator from package
APP_NAME=Rechne
APP_GUI_NAME="Command-line scientific calculator."
APP_VERSION=3.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}.exe-${APP_VERSION}-linux64-en
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-exe/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,}.exe /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install 2048 terminal-based puzzle game from source
APP_NAME=2048
APP_GUI_NAME="Terminal-based puzzle game."
APP_VERSION=master
APP_EXT=zip
FILE_NAME=${APP_NAME,,}.cpp-master
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/plibither8/2048.cpp/archive/master.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/
mkdir -p build && cd build
cmake ../ && cmake --build . && sudo cmake --build . --target install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Tesseract Animator shaded hypercube visualization tool from Debian package
APP_NAME=g4d
APP_VERSION=3.0.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}%20${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/tesseract-animator/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ov cross-platform, feature-rich terminal pager ("less" or "more" replacement) from Debian package
APP_NAME=ov
APP_VERSION=0.13.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/noborus/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ScreenCloud cross-platform screen capture and sharing utility from AppImage
# https://screencloud.net/
APP_NAME=ScreenCloud
APP_GUI_NAME="Cross-platform screen capture and sharing utility."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Screen Capture;"
APP_VERSION=1.5.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-v${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Nat Rust-based 'ls' replacement with same enhanced features from package
APP_NAME=Nat
APP_VERSION=1.2.1
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}.linux.binary
curl -o /tmp/${FILE_NAME} -J -L https://github.com/willdoescode/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install YuranPad minimalist text editor from Debian package
APP_NAME=YuranPad
APP_VERSION=2.4
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Seagull Soup cross-platform SDL-based side-scroller shooting game from source
APP_NAME=SeagullSoup
APP_GUI_NAME="Cross-platform SDL-based side-scroller shooting game ."
APP_GUI_CATEGORIES="Entertainment;Games;"
APP_GUI_KEYWORDS="Games;Side-Scroller;"
APP_VERSION=2020.10.29
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-sourcecode-${APP_VERSION}
sudo apt-get install -y libsdl-ttf2.0-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
make && sudo make install-linux
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/${APP_NAME,,}.ico /usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=
Exec=/usr/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install ReadCLI cross-platform, Golang-based web content reader from package
APP_NAME=ReadCLI
APP_VERSION=0.0.1
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/trashhalo/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/{FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install FSearch fast file search utility inspired by Everything Search for Windows from PPA
# https://github.com/cboxdoerfer/fsearch
sudo add-apt-repository ppa:christian-boxdoerfer/fsearch-stable -y
sudo apt update
sudo apt install fsearch -y

# Install ECMA-55 Minimal BASIC compiler from source
APP_NAME="Minimal BASIC"
APP_GUI_NAME="ECMA-55 Minimal BASIC compiler."
APP_VERSION=2.40
APP_EXT=tar.xz
FILE_NAME=${APP_NAME// /}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/buraphakit/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
cp Makefile.gcc Makefile
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Bit Golang-based modern command-line Git client from package
APP_NAME=Bit
APP_VERSION=1.0.1
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/chriswalz/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install jumpapp run-or-raise application switcher for any X11 desktop environment from Debian package
APP_NAME=jumpapp
APP_VERSION=1.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mkropat/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install JavaMod minimalist Java-based audio player with support for modfiles from package
APP_NAME=JavaMod
APP_GUI_NAME="Minimalist Java-based audio player with support for modfiles."
APP_GUI_CATEGORIES="Multimedia;"
APP_GUI_KEYWORDS="Audio;Player;"
APP_VERSION=3.7.3
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.ico -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME}.ico
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /tmp/${APP_NAME}.ico /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Vem alternative command layout for Vim text editor for new users from package
APP_NAME=Vem
APP_VERSION=1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/pacha/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install UNetbootin cross-platform bootable live USB creator for Linux distribrutions from package
APP_NAME=UNetbootin
APP_GUI_NAME="Cross-platform bootable live USB creator for Linux distribrutions."
APP_GUI_CATEGORIES="Utilities;System;"
APP_GUI_KEYWORDS="USB;Linux;"
APP_VERSION=700
APP_EXT=bin
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux
fi
FILE_NAME=${APP_NAME,,}-${ARCH_TYPE}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}_128.png -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/raw/master/src/${APP_NAME,,}/${APP_NAME,,}_128.png
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /tmp/${APP_NAME,,}_128.png /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=sudo /usr/local/bin/${APP_NAME,,}
Icon=/tmp/${APP_NAME,,}_128.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Logisim Java-based digital logic designer and simulator from package
APP_NAME=Logisim
APP_GUI_NAME="Java-based digital logic designer and simulator."
APP_GUI_CATEGORIES="Development;Electronics;"
APP_GUI_KEYWORDS="Logic;Simulator;Electronics;"
APP_VERSION=2.7.14
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-ps/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/logisim-ps/icon?1671573264
cd /tmp
unzip -C /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}; sudo chmod 666 /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}-${APP_VERSION}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Zonote cross-platform markdown sticky note utility with tabs from package
APP_NAME=Zonote
APP_GUI_NAME="Cross-platform markdown sticky note utility with tabs."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;Sticky Note;Markdown;"
APP_VERSION=0.1.2
APP_EXT=zip
FILE_NAME=zonoto-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/zonetti/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}*/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
curl -o /tmp/icon.png -J -L https://github.com/zonetti/zonote/raw/master/build/icon.png
sudo cp /tmp/icon.png /opt/${APP_NAME,,}/icon.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Dotter Rust-based dotfile management and templating utility from package
APP_NAME=Dotter
APP_VERSION=0.9.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/SuperCuber/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PatchGirl cross-platform minimalist HTTP/REST client (similar to Postman) from package
APP_NAME=PatchGirl
APP_GUI_NAME="Cross-platform minimalist HTTP/REST client (similar to Postman)."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="HTTP;REST;Testing;"
APP_VERSION=3.0.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-runner-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -R /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/raw/master/public/images/logo.png
sudo cp /tmp/${APP_NAME,,}.png /usr/share/pixmaps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Sysbox Golang-based sysadmin/scripting utilities distributed as a single binary from package
APP_NAME=Sysbox
APP_VERSION=0.12.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/skx/${APP_NAME,,}/releases/download/release-${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install XiX Music Player cross-platform audio player from package
APP_NAME="XiX Music Player"
APP_GUI_NAME="Cross-platform audio player."
APP_GUI_CATEGORIES="Mulitmedia;"
APP_GUI_KEYWORDS="Music;Audio;"
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME// /}_x64
_APP_NAME=${APP_NAME// /}
_APP_NAME=${_APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME// /}/* /opt/${_APP_NAME,,}
sudo cp /tmp/${FILE_NAME}/${APP_NAME// /}/lib/* /usr/local/lib && sudo ldconfig
sudo ln -s -f /opt/${_APP_NAME,,}/${APP_NAME// /} /usr/local/bin/${_APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Passage minimalist Rust-based password manager using 'age' encryption from Debian package
APP_NAME=Passage
APP_VERSION=0.5.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/stchris/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Shelby Golang-based fast, lightweight, minimal shell prompt from package
APP_NAME=Shelby
APP_VERSION=1.0.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/athul/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
echo 'eval "$(shelby init bash)"' >> $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install sd (s[earch] & d[isplace]) Rust-based 'sed' replacement from package
APP_NAME=sd
APP_VERSION=0.7.6
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME} -J -L https://github.com/chmln/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install gmenu Golang-based console and GUI application launcher from package
# https://gitlab.com/tslocum/gmenu
APP_NAME=gmenu
APP_GUI_NAME="Golang-based console and GUI application launcher."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Launcher;"
APP_VERSION=0.3.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://${APP_NAME,,}.rocketnine.space/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/g* /usr/local/bin
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/gtkmenu
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install yq Golang-based command-line YAML processor from package
APP_NAME=yq
APP_VERSION=4.45.4
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_linux_${KERNEL_TYPE//i/}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/mikefarah/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PiNote cross-platform minimalist text editor from package
APP_NAME=PiNote
APP_GUI_NAME="Cross-platform minimalist text editor."
APP_GUI_CATEGORIES="Development;Programming;Accessories;"
APP_GUI_KEYWORDS="Text;Editor;"
APP_VERSION=1.4
APP_EXT=zip
FILE_NAME=${APP_NAME}_${APP_VERSION//./_}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://sourceforge.net/p/${APP_NAME,,}/code/ci/master/tree/icons/logo.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.png /usr/share/pixmaps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ethr Golang-based command-line network performance measurement tool from package
APP_NAME=ethr
APP_VERSION=1.0.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/microsoft/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install MicOscope sound-card oscilloscope/function generator from package
APP_NAME=MicOscope
APP_GUI_NAME="Sound-card oscilloscope/function generator."
APP_GUI_CATEGORIES="Multimedia;Development;Programming;"
APP_GUI_KEYWORDS="Oscilloscope;"
APP_VERSION=1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-x86_64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ImHex cross-platform, multi-purpose hex editor from AppImage
APP_NAME=ImHex
APP_GUI_NAME="Cross-platform, multi-purpose hex editor."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Hex Editor;Editor"
APP_VERSION=1.37.4
APP_EXT=zip
FILE_NAME=Linux.AppImage
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/WerWolv/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/WerWolv/${APP_NAME}/master/resources/icon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}.AppImage /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}.AppImage
sudo ln -s -f /usr/local/bin/${APP_NAME,,}.AppImage /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install GuidScreener cross-platform GUID/UUID generator from package
APP_NAME=GuidScreener
APP_GUI_NAME="Cross-platform GUID/UUID generator."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="GUID;UUID;Generator"
APP_VERSION=1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}
curl -o /tmp/libpng12.deb -J -L http://security.ubuntu.com/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1.1_${KERNEL_TYPE}.deb
sudo gdebi -n /tmp/libpng12.deb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://colinjs.com/${APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod a+x /opt/${APP_NAME,,}/${APP_NAME}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Go Shred Golang-based, cross-platform command-line secure delete utility from package
APP_NAME=Go-Shred
APP_VERSION=N/A
APP_EXT=zip
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME,,}_linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PianoBooster cross-platform piano and music notation learning tool from AppImage
# https://www.pianobooster.org/
APP_NAME=PianoBooster
APP_GUI_NAME="Cross-platform piano and music notation learning tool."
APP_GUI_CATEGORIES="Education;"
APP_GUI_KEYWORDS="Piano;Music;"
APP_VERSION=1.0.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://sourceforge.net/p/pianobooster/code/HEAD/tree/trunk/PianoBooster/src/images/logo64x64.png?format=raw
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}/${APP_NAME,,}.png
sudo chmod +x /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ARITA minimalist audio player for Linux from Debian package
APP_NAME=ARITA
APP_VERSION=3.20.10
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install tig ncurses-based text-mode interface for Git from source
APP_NAME=tig
APP_GUI_NAME="ncurses-based text-mode interface for Git."
APP_VERSION=2.5.8
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jonas/tig/releases/download/${APP_NAME,,}-${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./autogen.sh && ./configure && make prefix=/usr/local && sudo make install prefix=/usr/local
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Ferdi cross-platform, Electron-based messaging application integration utility from Debian package
# https://getferdi.com/
APP_NAME=Ferdi
APP_VERSION=5.8.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Veneta Viewer image viewer and image sequence player from package
APP_NAME="Veneta Viewer"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Image viewer and image sequence player."
APP_GUI_CATEGORIES="Graphics;Multimedia;"
APP_GUI_KEYWORDS="Viewer"
APP_VERSION=1.3.1
APP_EXT=tar.xz
FILE_NAME=${APP_NAME// /}_Linux-${APP_VERSION}_X64
sudo apt-get install -y ffmpeg libglew2.1 libfreeimage3
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
/opt/${_APP_NAME}/${APP_NAME// /} &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/bitmap/app_icon.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Restish Golang-based command-line REST API client from package
# https://rest.sh
APP_NAME=Restish
APP_VERSION=0.20.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/danielgtaylor/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Boot Repair from Debian package
sudo add-apt-repository ppa:yannubuntu/boot-repair
sudo apt-get update
sudo apt-get install -y boot-repair

# Install Terminus monospace font with large character set from source
APP_NAME=Terminus-Font
APP_GUI_NAME="Monospace font with large character set."
APP_VERSION=4.49.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure --prefix=/usr/local && make -j8 && sudo make install fontdir
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Code Browser cross-platform code-folding text editor from package
APP_NAME=Code-Browser
APP_GUI_NAME="Cross-platform code-folding text editor."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Editor;Text"
APP_VERSION=8.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-x64-qt
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://tibleiz.net/download/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* /
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Boot Repair from PPA
sudo add-apt-repository -y ppa:yann1ck/onedrive
sudo apt-get update
sudo apt-get install -y onedrive

# Install Java Enigma Java-based Enigma crypto machine simulator from package
APP_NAME=Java-Enigma
APP_GUI_NAME="Java-based Enigma crypto machine simulator."
APP_GUI_CATEGORIES="Development;Entertainment;Games;"
APP_GUI_KEYWORDS="Crypto;Simulator;"
APP_VERSION=2025-04
APP_EXT=jar
FILE_NAME=enigma
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Tapper keyboard layout switcher for X Windows/Wayland from source
APP_NAME=Tapper
APP_GUI_NAME="Keyboard layout switcher for X Windows/Wayland."
APP_VERSION=0.6.0-0.vdb.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/kbd-${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
../configure --prefix=/usr/local --quiet && make -j8 && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install PropU command-line utility to display detailed information about files, directories, and links from Debian package
APP_NAME=PropU
APP_VERSION=1.2
APP_EXT=deb
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Boop-GTK cross-platform scriptable scratchpad for developers from package
APP_NAME=Boop-GTK
APP_GUI_NAME="Cross-platform scriptable scratchpad for developers."
APP_GUI_CATEGORIES="Development;Programming;Accessories;"
APP_GUI_KEYWORDS="Notepad;Editor;"
APP_VERSION=1.7.1
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}.linux.amd64
curl -o /tmp/${FILE_NAME} -J -L https://github.com/zoeyfyi/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/zoeyfyi/Boop-GTK/trunk/data/fyi.zoey.Boop-GTK.svg
sudo cp /tmp/${APP_NAME,,}.svg /usr/share/pixmaps/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/share/pixmaps/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Hurl Rust-based command-line HTTP scripting tool from package
# https://hurl.dev
APP_NAME=Hurl
APP_VERSION=6.1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Orange-OpenSource/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/bin/* /usr/local/bin
sudo cp -R /tmp/${FILE_NAME}/man/* /usr/share/man
sudo cp /tmp/${FILE_NAME}/completions/hurlfmt.bash /etc/bash_completion.d/hurlfmt
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install String Tools GUI-based text macro processing tool from package
APP_NAME=StringTools
APP_GUI_NAME="GUI-based text macro processing tool."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Text;Editor;"
APP_VERSION=2021-01-04_185245
APP_EXT=7z
FILE_NAME=${APP_NAME,,}_linux_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/qvasimodo${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/* /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Devlog Golang-based command-line notepad/journal with Markdown support from package
APP_NAME=Devlog
APP_VERSION=1.0.3
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/automoto/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install pcopy Golang-based command-line tool to copy-paste text between machines from Debian package
APP_NAME=pcopy
APP_VERSION=0.6.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/binwiederhier/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Wayback Golang-based command-line tool to archive web pages to Archive.org, Archive.Today, and IPFS from Debian package
APP_NAME=Wayback
APP_VERSION=0.18.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/wabarc/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PEDA cross-platform electronic design automation tool from PPA
# https://sourceforge.net/p/peda/wiki/Home/
sudo apt-add-repository -y ppa:ppisa/peda
sudo apt-get update
sudo apt-get install -y peda
sudo apt-get autoremove -y -f

# Add XtraDeb PPAs for some popular applications and games that aren't available
# via standard PPAs, such as Calibre, ScummVM, FileZilla, PyCharm CE, and YouTube-DL.
# https://launchpad.net/xtradeb
sudo apt-add-repository -y ppa:xtradeb/apps
sudo apt-add-repository -y ppa:xtradeb/play

# Install Sakura GTK/VTE terminal from source
APP_NAME=Sakura
APP_GUI_NAME="GTK/VTE terminal."
APP_VERSION=3.7.1
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y cmake libvte-2.91-dev libgtk-3-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/${APP_NAME,,}/trunk/${APP_VERSION}/+download/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
cmake .. && make -j8 && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install MarkMyWords minimalist Markdown editor from Debian package
# https://github.com/voldyman/MarkMyWords
APP_NAME=MarkMyWords
APP_VERSION=N/A
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (eo|fo|go)$ ]]; then  # 19.10, 20.04, 20.10
	APP_VERSION=0.1-0~170~ubuntu19.10.1
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co|di)$ ]]; then  # 18.04 - 19.10
	APP_VERSION=0.1-0~170~ubuntu18.04.1
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (xe|ya|ze|ar)$ ]]; then  # 16.04 - 17.10
	APP_VERSION=0.1-0~170~ubuntu16.04.1
fi
FILE_NAME=com.github.voldyman.${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/~voldyman/+archive/ubuntu/${APP_NAME,,}/+files/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install tIDE minimalist IDE for learning Java development from package
# https://sites.google.com/site/tidejava/home
APP_NAME=tIDE
APP_GUI_NAME="Minimalist IDE for learning Java development."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Editor;IDE;Java;"
APP_VERSION=3.01f
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Supertag tag-based file system utility built with Rust from AppImage
APP_NAME=Supertag
APP_GUI_NAME="Tag-based file system utility built with Rust."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Tag;File;Utility;"
APP_VERSION=0.1.4
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/amoffat/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo mv /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/tag
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Hearts Qt5-based traditional card game from source
APP_NAME=Hearts
APP_GUI_NAME="Qt5-based traditional card game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Cards;Hearts;"
APP_VERSION=1.9
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y build-essential qt5-default libqt5svg5-dev liballegro5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Rescator7/${APP_NAME}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 ../Hearts.pro && make -j8
sudo cp /tmp/${FILE_NAME}/build/${APP_NAME} /usr/local/bin
sudo cp /tmp/${FILE_NAME}/icons/heart.png /usr/local/share/icons
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME}
Icon=/usr/local/share/icons/heart.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install vgrep Golang-based command-line pager for grep from package
APP_NAME=vgrep
APP_VERSION=2.6.1
APP_EXT=N/A
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/vrothberg/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Sunflower dual-pane Python/GTK-based minimalist file manager from Debian package
# http://sunflower-fm.org/
APP_NAME=Sunflower
APP_VERSION=0.5.63
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-1.all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/MeanEYE/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install FreeTube Electron-based privacy-focused YouTube player from Debian package
# https://freetubeapp.io/
APP_NAME=FreeTube
APP_VERSION=0.23.5
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/FreeTubeApp/${APP_NAME,,}/releases/download/v${APP_VERSION}-beta/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Rotki Electron-based cryptocurrency portfolio tracking tool from AppImage
# https://rotki.com/
APP_NAME=Rotki
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Electron-based cryptocurrency portfolio tracking tool."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Blockchain;Cryptocurrency;Bitcoin;"
APP_VERSION=1.39.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-v${APP_VERSION}
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?1690453501
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Motsognir minimalist Gopher server from source
APP_NAME=Motsognir
APP_GUI_NAME="Minimalist Gopher server."
APP_VERSION=1.0.13
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make -j8 && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install cgo terminal Gopher client from source
APP_NAME=cgo
APP_GUI_NAME="Terminal Gopher client."
APP_VERSION=v0.6.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kieselsteini/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}*
make -j8 && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install phetch Rust-based command-line Gopher client from package
APP_NAME=phetch
APP_VERSION=1.2.0
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/xvxx/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}.1 /usr/local/man/man1
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install nodebook Golang-based multi-language web REPL built on Docker from package
APP_NAME=nodebook
APP_VERSION=0.2.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME} -J -L https://github.com/netgusto/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Kinx minimalist OOP scripting language with C-style syntax and built-in REPL from Debian package
APP_NAME=Kinx
APP_VERSION=1.1.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-0_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Kray-G/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install pev cross-platform PE (Portable Executable) binary analysis toolkit from source
APP_NAME=pev
APP_GUI_NAME="Cross-platform PE (Portable Executable) binary analysis toolkit."
APP_VERSION=0.81
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libssl-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${FILE_NAME}
make -j8 && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install wuzz Golang-based cross-platform command-line interactive HTTP inspection tool from package
APP_NAME=wuzz
APP_VERSION=0.5.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_linux_${KERNEL_TYPE//i/}
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install jShellLab MATLAB-like scientific programming environment using Java JShell from package
APP_NAME=jShellLab
APP_GUI_NAME="MATLAB-like scientific programming environment using Java JShell."
APP_GUI_CATEGORIES="Development;Programming;Education"
APP_GUI_KEYWORDS="Editor;IDE;Java;"
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME//j/J}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${FILE_NAME}*/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME}.sh /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME}*

# Install Programmer Calculator simple full-screen ncurses programmer's calculator from source
APP_NAME=Programmer-Calculator
APP_GUI_NAME="Simple full-screen ncurses programmer's calculator."
APP_VERSION=3.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/alt-romes/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
gcc main.c -Wall -o pcalc -lncurses && sudo cp pcalc /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install xpenguins desktop toy featuring Tux the Penguin from Debian package
APP_NAME=xpenguins
APP_VERSION=3.2.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install cmdcalc simple command-line calculator with support for variables and arrays from package
APP_NAME=cmdcalc
APP_GUI_NAME="Simple command-line calculator with support for variables and arrays."
APP_VERSION=2.3
APP_EXT=N/A
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=linux64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=linux32
fi
FILE_NAME=${APP_NAME,,}2-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/Benni3D/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install vizex Python-based visual disk space usage tool for Linux shell from package
APP_NAME=vizex
APP_GUI_NAME="Python-based visual disk space usage tool for Linux shell."
APP_VERSION=2.1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y python3-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bexxmodd/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 setup.py install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Screen Translator cross-platform screen capture, OCR, and translation tool from AppImage
APP_NAME=ScreenTranslator
APP_GUI_NAME="Cross-platform screen capture, OCR, and translation tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Graphics;OCR;Translation;"
APP_VERSION=3.3.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/OneMoreGres/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://raw.githubusercontent.com/OneMoreGres/ScreenTranslator/master/share/images/icon.ico
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.ico /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install smug cross-platform, Golang-based session manager for tmux from package
APP_NAME=smug
APP_GUI_NAME="Cross-platform, Golang-based session manager for tmux."
APP_VERSION=0.3.3
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ivaaaan/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install TaskBoard minimalist PyGame-based task manager from package
APP_NAME=TaskBoard
APP_GUI_NAME="Minimalist PyGame-based task manager."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Task Manager;Productivity;"
APP_VERSION=0.2.0
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION//./}-src
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/k39${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
python3 -m venv /opt/${APP_NAME,,}/.venv
source /opt/${APP_NAME,,}/.venv/bin/activate
pip3 install pygame colorama
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
. /opt/${APP_NAME,,}/.venv/bin/activate
python3 /opt/${APP_NAME,,}/__main__.py &
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Ticker cross-platform, Golang-based terminal stock ticker with live updates from package
APP_NAME=Ticker
APP_GUI_NAME="Cross-platform, Golang-based terminal stock ticker with live updates."
APP_VERSION=4.5.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-${KERNEL_TYPE//i/}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/achannarasappa/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Cryptonose cryptocurrency price monitoring/tracking tool from Debian package
APP_NAME=Cryptonose
APP_VERSION=2.22.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install xh Rust-based HTTPie clone command-line HTTP client from package
APP_NAME=xh
APP_GUI_NAME="Rust-based HTTPie clone command-line HTTP client."
APP_VERSION=0.18.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ducaale/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Quaternion cross-platform Qt5-based client for Matrix messenger platform from AppImage
APP_NAME=Quaternion
APP_GUI_NAME="Cross-platform Qt5-based client for Matrix messenger platform."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Messenger;Chat;"
APP_VERSION=0.0.95.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/quotient-im/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://raw.githubusercontent.com/quotient-im/Quaternion/master/icons/${APP_NAME,,}.ico
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.ico /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install HyperKeys keyboard shortcut utility from AppImage
# https://hyperkeys.xureilab.com/
APP_NAME=HyperKeys
APP_GUI_NAME="Keyboard shortcut utility."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Keyboard;"
APP_VERSION=1.3.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION//-rc1/}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/xurei/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://raw.githubusercontent.com/xurei/hyperkeys/master/src/main/icon.ico
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.ico /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Tablexplore cross-platform Qt-based spreadsheet-style data analysis and plotting tool from AppImage
APP_NAME=Tablexplore
APP_GUI_NAME="Cross-platform Qt-based spreadsheet-style data analysis and plotting tool."
APP_GUI_CATEGORIES="Development;Office;"
APP_GUI_KEYWORDS="Analysis;Spreadsheet;"
APP_VERSION=0.3.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dmnfarrell/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://raw.githubusercontent.com/dmnfarrell/tablexplore/master/img/logo.ico
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.ico /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Necros Cavern cross-platform, classic Rogue-like console adventure game from package
APP_NAME=NCavern
APP_GUI_NAME="Cross-platform, classic Rogue-like console adventure game."
APP_VERSION=1.1.4
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_${APP_VERSION//./_}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME}*/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install JMeld Java-based visual diff and merge tool from package
APP_NAME=JMeld
APP_GUI_NAME="Java-based visual diff and merge tool."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Diff;Merge;"
APP_VERSION=3.0
APP_EXT=jar
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/MrKuip/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/MrKuip/${APP_NAME}/raw/master/src/main/resources/images/${APP_NAME,,}.png
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install FileRally Java-based most-recently used (MRU) list tool for files from package
APP_NAME=FileRally
APP_GUI_NAME="Java-based most-recently used (MRU) list tool for files."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="File;Monitoring;"
APP_VERSION=1.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}.v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME}Icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Spiral Qt-based notepad that saves documents as plain HTML from package
APP_NAME=Spiral
APP_GUI_NAME="Qt-based notepad that saves documents as plain HTML."
APP_GUI_CATEGORIES="Office;"
APP_GUI_KEYWORDS="Notepad;"
APP_VERSION=1.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}_Release_${APP_VERSION}_Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://mitchellaugustin.com/spiral/versions/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}*/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=env QT_QPA_PLATFORMTHEME=gtk2 /opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install textnote simple Golang-based tool for creating and organizing daily notes on the command line from package
APP_NAME=textnote
APP_GUI_NAME="Simple Golang-based tool for creating and organizing daily notes on the command line."
APP_VERSION=1.2.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_linux_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/dkaslovsky/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
mkdir $HOME/.config/${APP_NAME,,}
echo 'TEXTNOTE_DIR='$HOME/.config/${APP_NAME,,} >> $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Orbiton minimalist Golang text editor from package
APP_NAME=Orbiton
APP_GUI_NAME="Minimalist Golang text editor."
APP_VERSION=2.68.9
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/xyproto/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
dtrx -n /tmp/${FILE_NAME}/${APP_NAME,,}.1.gz
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}.1 /usr/local/man/man1
sudo chmod +x /usr/local/bin/${APP_NAME,,}
mkdir $HOME/.config/${APP_NAME,,}
echo 'TEXTNOTE_DIR='$HOME/.config/${APP_NAME,,} >> $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Endless Sky 2D space exploration, trading, and combat game from AppImage
APP_NAME=Endless-Sky
APP_GUI_NAME="2D space exploration, trading, and combat game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Space;Trading;RPG;"
APP_VERSION=0.10.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${KERNEL_TYPE}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/endless-sky/endless-sky/raw/master/icons/icon_48x48.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Viper Browser Qt Webkit-based web browser from AppImage
APP_NAME=Viper-Browser
APP_GUI_NAME="Qt Webkit-based web browser."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Browser;"
APP_VERSION=continuous
APP_EXT=AppImage
FILE_NAME=${APP_NAME//-/_}-1-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/LeFroid/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/LeFroid/${APP_NAME}/raw/master/data/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ThiefMD simple Markdown editor for Linux from Debian package
APP_NAME=ThiefMD
APP_GUI_NAME="Simple Markdown editor for Linux."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Markdown;Editor;"
APP_VERSION=0.2.6
APP_EXT=deb
FILE_NAME=com.github.kmwallio.${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kmwallio/${APP_NAME}/releases/download/v${APP_VERSION}-sophistication/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install ArchiveWeb.page Electron-based desktop web recorder/archiver from AppImage
APP_NAME=ArchiveWeb.page
APP_GUI_NAME="Electron-based desktop web recorder/archiver."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Recorder;Archiver"
APP_VERSION=0.9.8
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/webrecorder/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://github.com/webrecorder/${APP_NAME,,}/raw/main/assets/wr-logo.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Kibi Rust-based command-line text editor in < 1024 lines of code from package
APP_NAME=Kibi
APP_GUI_NAME="Rust-based command-line text editor in < 1024 lines of code."
APP_VERSION=0.2.2
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-${ARCH_TYPE}-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ilai-deutel/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/share/kibi
sudo cp -R /tmp/${FILE_NAME}/syntax.d /usr/share/kibi
mkdir -p $HOME/.config/kibi
cp /tmp/${FILE_NAME}/config_example.ini $HOME/.config/kibi/config.ini
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Lagrange cross-platform desktop GUI client for browsing Geminispace from AppImage
APP_NAME=Lagrange
APP_GUI_NAME="Cross-platform desktop GUI client for browsing Geminispace."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Gemini;Browser"
APP_VERSION=1.15.9
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/skyjake/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/skyjake/${APP_NAME,,}/raw/dev/res/${APP_NAME,,}-256.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Pingnoo cross-platform combined traceroute and ping application from AppImage
APP_NAME=Pingnoo
APP_GUI_NAME="Cross-platform desktop GUI client for browsing Geminispace."
APP_GUI_CATEGORIES="System;"
APP_GUI_KEYWORDS="Networking;"
APP_VERSION=2021.02.17-develop
APP_EXT=AppImage
FILE_NAME=${APP_NAME}.${APP_VERSION}.x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/nedrysoft/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://github.com/nedrysoft/pingnoo/raw/develop/src/app/AppIcon.ico
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.ico /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Uniclip Golang-based cross-platform shared clipboard from package
APP_NAME=Uniclip
APP_GUI_NAME="Golang-based cross-platform shared clipboard."
APP_VERSION=2.2.0
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=32-bit
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/quackduck/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install NaSC GTK-based interactive calcuator similar to Soulver from source
APP_NAME=NaSC
APP_GUI_NAME="GTK-based interactive calcuator similar to Soulver."
APP_VERSION=0.8.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y gobject-introspection libgee-0.8-dev libwebkit2gtk-4.0-dev libgtksourceview-3.0-dev libcln-dev libgranite-dev libcurl4-openssl-dev libmpfr-dev intltool meson valac
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/parnold-x/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
git clone https://github.com/parnold-x/libqalculate /tmp/${FILE_NAME}/subprojects/libqalculate
cd /tmp/${FILE_NAME}
meson build --prefix=/usr/local
ninja -C build install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Propeller cross-platform SDL-based side-scroller shooting game from source
APP_NAME=Propeller
APP_GUI_NAME="Cross-platform SDL-based side-scroller shooting game ."
APP_GUI_CATEGORIES="Entertainment;Games;"
APP_GUI_KEYWORDS="Games;Side-Scroller;"
APP_VERSION=2022-07-17
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}game/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
make
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}/* /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/icon.ico /usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=
Exec=/opt/${APP_NAME,,}/${APP_NAME,,} -w -m
Icon=/usr/local/share/icons/hicolor/48x48/apps/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install cproxy simple per application proxy tool using cgroups from package
APP_NAME=cproxy
APP_GUI_NAME="Simple per application proxy tool using cgroups."
APP_VERSION=2.1.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/NOBLES5E/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install tty-solitaire full-color ncurses-based Klondike solitaire card game from source
APP_NAME=tty-solitaire
APP_GUI_NAME="Full-color ncurses-based Klondike solitaire card game."
APP_VERSION=1.3.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mpereira/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install FeatherPad Qt-based minimalist text editor from source
APP_NAME=FeatherPad
APP_GUI_NAME="Qt-based minimalist text editor."
APP_VERSION=1.2.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y libx11-dev qtbase5-dev libqt5x11extras5-dev libqt5svg5-dev libhunspell-dev qttools5-dev-tools
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/tsujan/${APP_NAME}/releases/download/V${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 .. && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install gEDA PCB printed circuit board GUI layout/design tool from source
# http://pcb.geda-project.org/
APP_NAME=PCB
APP_GUI_NAME="Printed circuit board GUI layout/design tool."
APP_VERSION=4.3.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libgd-dev libgtkglext1-dev bison flex
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Hathi Download Helper Qt-based tool to download books from Hathi Trust site from source
APP_NAME="Hathi Download Helper"
APP_GUI_NAME="Qt-based tool to download books from Hathi Trust site."
APP_GUI_CATEGORIES="Office;Internet;"
APP_GUI_KEYWORDS="Books;Download;"
APP_VERSION=1.2.1
APP_EXT=zip
FILE_NAME=${APP_NAME// /}_v${APP_VERSION}
sudo apt-get install -y libqt5webkit-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME// /}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 .. && make && sudo make install
sudo cp ${APP_NAME// /} /usr/local/bin
sudo cp /tmp/${FILE_NAME}/${APP_NAME// /}/images/elephant.png /usr/local/share/icons/hicolor/48x48/apps/${APP_NAME// /}.png
cat > /tmp/${APP_NAME// /}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=
Exec=/usr/local/bin/${APP_NAME// /}
Icon=/usr/local/share/icons/hicolor/48x48/apps/${APP_NAME// /}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME// /}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME// /}*

# Install Mapton Java-based desktop mapping tool with support for multiple map and search providers from package
APP_NAME=Mapton
APP_GUI_NAME="Java-based desktop mapping tool with support for multiple map and search providers."
APP_GUI_CATEGORIES="Education;"
APP_GUI_KEYWORDS="Maps;GIS;"
APP_VERSION=2.2.1
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/trixon/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/mapton /opt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/bin/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/bin/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Tweak high-performance hex editor from source
APP_NAME=Tweak
APP_GUI_NAME="High-performance hex editor."
APP_VERSION=3.02
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.chiark.greenend.org.uk/~sgtatham/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install FeatherNotes Qt-based hierarchical notepad tool from source
APP_NAME=FeatherNotes
APP_GUI_NAME="Qt-based hierarchical notepad tool."
APP_VERSION=0.10.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y libx11-dev qtbase5-dev libqt5x11extras5-dev libqt5svg5-dev libhunspell-dev qttools5-dev-tools
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/tsujan/${APP_NAME}/releases/download/V${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 .. && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install RedDiamond programmer's text editor with EDT keypad navigation based on CopperSpice Qt library from Debian package
APP_NAME=RedDiamond
APP_GUI_NAME="Programmer's text editor with EDT keypad navigation based on CopperSpice Qt library."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=3.6.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-U22.04-${APP_VERSION}-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Oh Golang-based Unix/Linux shell replacement from package
APP_NAME=Oh
APP_GUI_NAME="Golang-based Unix/Linux shell replacement."
APP_VERSION=0.8.0
APP_EXT=N/A
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/michaelmacinnis/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install cbonsai desktop toy to grow colorful bonsai tree in terminal from source
APP_NAME=cbonsai
APP_GUI_NAME="Desktop toy to grow colorful bonsai tree in terminal."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Toy;Fun;"
APP_VERSION=1.0.0
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}
sudo apt-get install -y libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.com/jallbrit/${APP_NAME,,}/-/archive/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Laravel Kit cross-platform Electron-based desktop tool for managing Laravel applications from AppImage
APP_NAME=Laravel-Kit
APP_GUI_NAME="Cross-platform Electron-based desktop tool for managing Laravel applications."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Laravel;"
APP_VERSION=2.0.7
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/tmdh/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/tmdh/${APP_NAME,,}/raw/master/build/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Electerm Electron-based integrated terminal/SSH/SFTP client from Debian package
APP_NAME=Electerm
APP_GUI_NAME="Electron-based integrated terminal/SSH/SFTP client."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Terminal;SSH;SFTP;"
APP_VERSION=1.91.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install lazycli Rust-based tool to turn static command-line tools into interactive TUIs from package
APP_NAME=lazycli
APP_GUI_NAME="Rust-based tool to turn static command-line tools into interactive TUIs."
APP_VERSION=0.1.14
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jesseduffield/${APP_NAME,,}/releases/download/v${APP_VERSION}/lazycli-linux-x64.tar.gz
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install neo-mc Midnight Commander fork with scripting and other enhancements from source
APP_NAME=neo-mc
APP_GUI_NAME="Midnight Commander fork with scripting and other enhancements."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="File Manager;Shell"
APP_VERSION=main
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libncurses-dev libglib2.0-dev libslang2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/archive/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./autogen.sh && ./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install picoc very small C interpreter from source
APP_NAME=picoc
APP_GUI_NAME="Very small C interpreter."
APP_GUI_CATEGORIES="Programming;Development"
APP_GUI_KEYWORDS="C;Interpreter"
APP_VERSION=master
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libreadline-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.com/zsaleeba/${APP_NAME,,}/-/archive/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make
sudo cp ${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install RiteCMS PHP and SQLite content management system (CMS) from package
APP_NAME=RiteCMS
APP_GUI_NAME="PHP and SQLite content management system (CMS)."
APP_GUI_CATEGORIES="Office;"
APP_GUI_KEYWORDS="CMS;"
APP_VERSION=3.1.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}
sudo apt-get install -y php7.4-sqlite3
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 777 ${WWW_HOME}/${APP_NAME,,}/files ${WWW_HOME}/${APP_NAME,,}/data
xdg-open http://localhost/${APP_NAME,,}/index.php
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=${WWW_HOME}/${APP_NAME,,}
Exec=xdg-open ${WWW_HOME}/${APP_NAME,,}/index.php
Icon=${WWW_HOME}/${APP_NAME,,}/templates/images/${APP_NAME,,}36.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install MathMod cross-platform interactive plotting and graphing program from package
APP_NAME=MathMod
APP_GUI_NAME="Cross-platform interactive plotting and graphing program."
APP_GUI_CATEGORIES="Education;Development"
APP_GUI_KEYWORDS="Math;Graphics;Visualization"
APP_VERSION=11.1
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux64-static
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
export QT_QPA_FONTDIR=`pwd`/fonts
/opt/${APP_NAME,,}/${APP_NAME,,}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/catenoid_mini_64x64.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Deskreen Electron-based tool to make any device with web browser a second screen from Debian package
APP_NAME=Deskreen
APP_GUI_NAME="Electron-based tool to make any device with web browser a second screen."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Utility;Screen;"
APP_VERSION=1.0.12
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/pavlobu/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install iQPuzzle Qt-based geometric puzzle game from source
APP_NAME=iQPuzzle
APP_GUI_NAME="Qt-based geometric puzzle game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Puzzle;Math;"
APP_VERSION=1.4.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y qtbase5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ElTh0r0/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 ../${APP_NAME,,}.pro && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install StackAndConquer Qt-based tower conquest board game from source
APP_NAME=StackAndConquer
APP_GUI_NAME="Qt-based tower conquest board game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Puzzle;Games;"
APP_VERSION=0.10.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y qtbase5-dev libqt5svg5-dev qtdeclarative5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ElTh0r0/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 ../${APP_NAME,,}.pro && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install flowers3 3D flower screensaver and interactive generator from Debian package
APP_NAME=flowers3
APP_GUI_NAME="3D flower screensaver and interactive generator."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Utility;Screen;"
APP_VERSION=2.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install 7-Zip cross-platform decompression utility from package
APP_NAME=7z
APP_GUI_NAME="Cross-platform decompression utility."
APP_VERSION=24.08
APP_EXT=tar.xz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME,,}${APP_VERSION//./}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/sevenzip/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/7zz /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Pineapple Pictures cross-platform lightweight image viewer from Debian package
APP_NAME=Pineapple-Pictures
APP_VERSION=1.0.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-Ubuntu-24.04-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.zip -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.zip
cd /tmp
unzip /tmp/${FILE_NAME}.zip
sudo gdebi -n /tmp/${APP_NAME,,}-${APP_VERSION}*.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Focalboard cross-platform project status board tool from package
APP_NAME=Focalboard
APP_GUI_NAME="Cross-platform project status board tool."
APP_GUI_CATEGORIES="Development;Programming"
APP_GUI_KEYWORDS="Scrum;Kanban;Project Management"
APP_VERSION=7.9.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mattermost/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}-app/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}-app
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/pack/static/favicon.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install wutag Rust-based command-line tool for organizing files by tags (xattrs) from package
APP_NAME=wutag
APP_GUI_NAME="Rust-based command-line tool for organizing files by tags (xattrs)."
APP_VERSION=0.5.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(arch)-unknown-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/vv9k/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/${APP_NAME,,}.1 /usr/local/man/man1/
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Sleek cross-platform todo.txt-format to do application from Debian package
APP_NAME=Sleek
APP_VERSION=2.0.19
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install tz Golang-based command-line tool for showing time zone information from package
APP_NAME=tz
APP_GUI_NAME="Golang-based command-line tool for showing time zone information."
APP_VERSION=0.4
APP_EXT=tar.xz
export $(dpkg-architecture)
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-${DEB_BUILD_ARCH}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/oz/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install WeeChat console IRC chat client from source
APP_NAME=WeeChat
APP_GUI_NAME="Console IRC chat client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="IRC;Chat;Messenger;"
APP_VERSION=4.6.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libaspell-dev libgcrypt20-dev zlib1g-dev asciidoctor libgnutls28-dev pkg-config libcurl4-gnutls-dev libncursesw5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
../autogen.sh && ../configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Koodo Reader cross-platform Electron-based ebook manager and reader from AppImage
APP_NAME=Koodo-Reader
APP_GUI_NAME="Cross-platform Electron-based ebook manager and reader."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Ebook;Reader;"
APP_VERSION=2.0.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/troyeguo/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/troyeguo/${APP_NAME,,}/raw/master/assets/logo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install WindTerm cross-platform SSH/Telnet/Serial/Shell/Sftp client with Vim keybindings from package
APP_NAME=WindTerm
APP_GUI_NAME="Cross-platform SSH/Telnet/Serial/Shell/Sftp client with Vim keybindings."
APP_GUI_CATEGORIES="Development;Internet;"
APP_GUI_KEYWORDS="SSH;Shell;Networking"
APP_VERSION=2.7.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}_${APP_VERSION}_Linux_Portable_x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kingToolbox/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}_${APP_VERSION}/* /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${APP_NAME}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Nextinspace command-line Python tool for seeing latest in space travel from package
APP_NAME=Nextinspace
APP_GUI_NAME="Command-line Python tool for seeing latest in space travel."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Space;Fun;"
APP_VERSION=2.0.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/The-Kid-Gid/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
python3 -m ${APP_NAME,,} "\$@"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Bash Command Builder Java-based GUI IDE for building simple Bash scripts from package
APP_NAME="Bash Command Builder"
APP_GUI_NAME="Java-based GUI IDE for building simple Bash scripts."
APP_GUI_CATEGORIES="Development;Programming"
APP_GUI_KEYWORDS="Shell;Scripting;"
APP_VERSION=1.0
APP_EXT=zip
FILE_NAME=${APP_NAME// /}.v${APP_VERSION}
SHELL_NAME=bashcb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${SHELL_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${SHELL_NAME}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${SHELL_NAME}
sudo chmod -R 755 /opt/${SHELL_NAME}
cat > /tmp/${SHELL_NAME} << EOF
#! /bin/sh
cd /opt/${SHELL_NAME}
PATH=/opt/${SHELL_NAME}:\$PATH; export PATH
java -jar /opt/${SHELL_NAME}/bcb.jar
cd $HOME
EOF
sudo mv /tmp/${SHELL_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${SHELL_NAME}
cat > /tmp/${SHELL_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${SHELL_NAME}
Exec=/usr/local/bin/${SHELL_NAME}
Icon=/opt/${SHELL_NAME}/bcb.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${SHELL_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME// /}*

# Install di advanced disk information utility from source
APP_NAME=di
APP_GUI_NAME="Advanced disk information utility."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Disk;Manager;"
APP_VERSION=6.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/diskinfo-di/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make -e PREFIX=/usr/local && sudo make -e PREFIX=/usr/local install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Debianizer Java-based GUI for building Debian packages from Debian package
APP_NAME=Debianizer
APP_VERSION=N/A
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_installer
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install vis simple, minimal Vim-like console text editor from source
APP_NAME=vis
APP_GUI_NAME="Simple, minimal Vim-like console text editor."
APP_GUI_CATEGORIES="Accessories;System;Development;Programming"
APP_GUI_KEYWORDS="Vim;Text;Editor;"
APP_VERSION=0.8
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libncursesw5-dev libtermkey-dev libtre-dev libacl1-dev liblua5.3-dev lua-lpeg-dev lua-lpeg-patterns
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/martanne/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install xplr Rust-based console TUI-style file manager from package
APP_NAME=xplr
APP_GUI_NAME="Rust-based console TUI-style file manager."
APP_VERSION=1.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sayanarijit/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/*${APP_NAME,,}* /tmp/${APP_NAME}

# Install Nushell Rust-based minimalist shell from package
APP_NAME=nu
APP_GUI_NAME="Rust-based minimalist shell."
APP_VERSION=0.104.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/nushell/nushell/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/*${APP_NAME,,}* /tmp/${APP_NAME}

# Install diff-so-fancy Perl and shell script diff enhancer from package
APP_NAME=diff-so-fancy
APP_GUI_NAME="Perl and shell script diff enhancer."
APP_VERSION=1.4.3
APP_EXT=tar.gz
FILE_NAME=v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/*${APP_NAME,,}*/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,} "$@"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/*${APP_NAME,,}* /tmp/${APP_NAME}

# Install LuxCal PHP/MySQL event calendar from package
# https://www.luxsoft.eu/
APP_NAME=LuxCal
APP_GUI_NAME="PHP/MySQL event calendar."
APP_GUI_CATEGORIES="Accessories;Office"
APP_GUI_KEYWORDS="Calendar;"
APP_VERSION=5.1.0M
APP_EXT=zip
DB_NAME=${APP_NAME,,}
DB_NAME=${DB_NAME//-/}
DB_USER=${APP_NAME,,}
DB_PASSWORD=${APP_NAME,,}
FILE_NAME=${APP_NAME,,}${APP_VERSION//./}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
dtrx -n /tmp/${FILE_NAME}/${FILE_NAME}-calendar.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}-calendar/* ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R a+w ${WWW_HOME}/${APP_NAME,,}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}'; GRANT USAGE ON *.* TO '${DB_USER}'@'%'; GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%'; FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/index.php &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=
Exec=xdg-open http://localhost/${APP_NAME,,}/index.php &
Icon=${WWW_HOME}/${APP_NAME,,}/lcal.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install kglaunch minimalist GUI application launcher for XWindows/Linux from package
APP_NAME=kglaunch
APP_GUI_NAME="Minimalist GUI application launcher for XWindows/Linux."
APP_GUI_CATEGORIES="System;Accessories"
APP_GUI_KEYWORDS="Launcher;"
APP_VERSION=1.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install KmlShpConvert utility for converting between KML (Keyhole Markup Language) and SHP (Shapefile) geometry files from package
APP_NAME=KmlShpConvert
APP_GUI_NAME="Utility for converting between KML (Keyhole Markup Language) and SHP (Shapefile) geometry files."
APP_GUI_CATEGORIES="Graphics;Other;"
APP_GUI_KEYWORDS="KML;SHP;GIS;"
APP_VERSION=2.0
APP_EXT=zip
FILE_NAME=Version%20${APP_VERSION}%20-%20linux%2064%20bits%20only
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
dtrx -n /tmp/${FILE_NAME}/${APP_NAME}.tar.gz
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
sudo chmod +rwxs /opt/${APP_NAME,,}/main
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/main /opt/${APP_NAME,,}/ui/window.ui
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Mailspring Electron-based e-mail client forked from Nylas from Debian package
APP_NAME=Mailspring
APP_VERSION=1.10.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install LTris SDL-based Tetris clone from source
APP_NAME=LTris
APP_GUI_NAME="SDL-based Tetris clone."
APP_VERSION=1.2.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libsdl1.2-dev libsdl-mixer1.2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/lgames/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make --jobs=$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install LMarbles SDL-based Atomix-like puzzle game from source
APP_NAME=LMarbles
APP_GUI_NAME="SDL-based Atomix-like puzzle game."
APP_VERSION=1.0.8
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libsdl1.2-dev libsdl-mixer1.2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/lgames/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make --jobs=$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install pyhn Python-based console HackerNews reader from source
APP_NAME=pyhn
APP_GUI_NAME="Python-based console HackerNews reader."
APP_VERSION=master
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/TimothyDJones/${APP_NAME,,}/archive/refs/heads/master.zip
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
python3 -m venv .venv && source .venv/bin/activate && python3 -m pip install -r requirements.txt && deactivate
cd /tmp && mv ${FILE_NAME} ${APP_NAME,,}
sudo mv ${APP_NAME,,} /opt
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo cp /opt/${APP_NAME,,}/scripts/${APP_NAME,,} /opt/${APP_NAME,,}/${APP_NAME,,}.sh
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
source .venv/bin/activate
./pyhn.sh &
deactivate
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install GameBundle cross-platform Java-based board game collection from package
APP_NAME=GameBundle
APP_GUI_NAME="Cross-platform Java-based board game collection."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Board Games;"
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install icons-in-terminal library to allow use of any font in terminal without patching or replacing fonts from source
APP_NAME=icons-in-terminal
APP_GUI_NAME="Library to allow use of any font in terminal without patching or replacing fonts."
APP_VERSION=master
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y fontforge
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sebastiencs/${APP_NAME,,}/archive/refs/heads/master.zip
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./install.sh
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install CDRTools via PPA
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (gr|hi)$ ]]; then  # 20.10, 21.04
    DISTRIB_VERSION=focal
fi
sudo add-apt-repository -y ppa:brandonsnider/cdrtools
sudo apt-get update -y
sudo apt-get install -y cdda2wav mkisofs cdrecord

# Install CliFM CLI-based, ultra-lightweight, lightning fast, and written in C from source
APP_NAME=CliFM
APP_GUI_NAME="CLI-based, ultra-lightweight, lightning fast, and written in C."
APP_VERSION=1.25
APP_EXT=tar.gz
FILE_NAME=v${APP_VERSION}
sudo apt-get install -y libcap-dev libacl1-dev 
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/leo-arch/${APP_NAME}/archive/refs/tags/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./install.sh
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Xrdp Remote Desktop Protocol server service with basic configuration from repository
sudo apt-get install -y xrdp
sudo adduser xrdp ssl-cert
sudo cp /etc/X11/Xsession /etc/X11/Xsession.xrdp
sudo bash -c 'echo "unset DBUS_SESSION_BUS_ADDRESS" >> /etc/X11/Xsession'
sudo bash -c 'echo "unset XDG_RUNTIME_DIR" >> /etc/X11/Xsession'
echo 'polkit.addRule(function(action, subject) {' >> /tmp/02-allow-colord.conf
echo 'if ((action.id == "org.freedesktop.color-manager.create-device" || action.id == "org.freedesktop.color-manager.create-profile" || action.id == "org.freedesktop.color-manager.delete-device" || action.id == "org.freedesktop.color-manager.delete-profile" || action.id == "org.freedesktop.color-manager.modify-device" || action.id == "org.freedesktop.color-manager.modify-profile") && subject.isInGroup("{group}"))' >> /tmp/02-allow-colord.conf
echo '{' >> /tmp/02-allow-colord.conf
echo 'return polkit.Result.YES;' >> /tmp/02-allow-colord.conf
echo '}' >> /tmp/02-allow-colord.conf
echo '});' >> /tmp/02-allow-colord.conf
sudo cp /tmp/02-allow-colord.conf /etc/polkit-1/localauthority.conf.d/
sudo systemctl restart xrdp
sudo systemctl enable xrdp

# Install WebEditorWeb HTML, CSS, and JavaScript editor in a single HTML file from package
APP_NAME=WebEditorWeb
APP_GUI_NAME="HTML, CSS, and JavaScript editor in a single HTML file."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="HTML;Editor;"
APP_VERSION=210702
APP_EXT=zip
FILE_NAME=wew_src-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p ${WWW_HOME}/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/public_html/* ${WWW_HOME}/${APP_NAME,,}
sudo chmod -R 755 ${WWW_HOME}/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
xdg-open ${WWW_HOME}/${APP_NAME,,}/index.html
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=${WWW_HOME}/${APP_NAME,,}/img/wew.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PingMe Golang-based multi-service CLI messenger from package
APP_NAME=PingMe
APP_VERSION=0.2.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_Linux_$(arch)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kha7iq/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Atomiks SDL-based clone of classic Atomix puzzle game from source
APP_NAME=Atomiks
APP_GUI_NAME="SDL-based clone of classic Atomix puzzle game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Puzzle;Atomix;"
APP_VERSION=1.0.4.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libmikmod-dev libsdl2-mixer-dev libsdl2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo cp ${APP_NAME,,} /usr/local/bin
sudo mkdir -p /usr/local/share/icons && sudo cp ${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Gaucho Electron-based one-click task automation tool from Debian package
APP_NAME=Gaucho
APP_VERSION=1.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/angrykoala/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Pencil cross-platform GUI prototyping tool from Debian package
APP_NAME=Pencil
APP_VERSION=3.1.0.ga
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L --referer https://pencil.evolus.vn/ https://pencil.evolus.vn/dl/V${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Dynamic Audio Normalizer cross-platform audio normalization tool from package
APP_NAME="Dynamic Audio Normalizer"
APP_VERSION=2017-04-14
APP_EXT=tbz2
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i686
fi
FILE_NAME=${APP_NAME// /}.${APP_VERSION}.Linux-Ubuntu-${ARCH_TYPE}
sudo apt-get install -y libsndfile1 libmpg123-0
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/lordmulder/${APP_NAME// /}/releases/download/2.10/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME// /}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME// /}
sudo chmod -R 755 /opt/${APP_NAME// /}
_APP_NAME=${APP_NAME// /}
sudo ln -s /opt/${APP_NAME// /}/${APP_NAME// /}CLI.bin /usr/local/bin/${_APP_NAME,,}
cd $HOME
rm -rf /tmp/*${APP_NAME// /}*

# Install JavAstro cross-platform Java-based astronomy tools (planetarium, astronomical events, ephemerides, planet visibility and moon calendar) from package
APP_NAME=JavAstro
APP_GUI_NAME="Cross-platform Java-based astronomy tools."
APP_GUI_CATEGORIES="Education;Science;"
APP_GUI_KEYWORDS="Astronomy;Science;"
APP_VERSION=2108
APP_EXT=jar
FILE_NAME=${APP_NAME,,}_${APP_VERSION//./}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install pacstall Arch Linux-style package manager for Ubuntu from package
APP_NAME=pacstall
APP_VERSION=N/A
APP_EXT=N/A
sudo bash -c "$(curl -fsSL https://raw.githubusercontent.com/Henryws/pacstall/master/install.sh)"
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install kn Rust-based alternative to 'cd' using abbreviations from package
APP_NAME=kn
APP_GUI_NAME="Rust-based alternative to 'cd' using abbreviations."
APP_VERSION=0.2.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/micouy/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/_${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/_${APP_NAME,,}
echo 'eval "$(_kn init bash)"' >> $HOME/.bashrc && source $HOME/.bashrc
cd $HOME
sudo rm -rf /tmp/*${APP_NAME,,}* /tmp/${APP_NAME}

# Install Sigma Studio cross-platform Java-based code editor/IDE from package
APP_NAME="Sigma Studio"
APP_GUI_NAME="Cross-platform Java-based code editor/IDE."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Editor;IDE;"
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME// /%20}
_APP_NAME=${APP_NAME// /-}
_APP_NAME=${_APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${_APP_NAME}
sudo chmod -R 755 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
java -jar /opt/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install DirSize cross-platform Java-based directory size reporting tool from package
APP_NAME=DirSize
APP_GUI_NAME="Cross-platform Java-based directory size reporting tool."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="File;System;"
APP_VERSION=2.2.18
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}r/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.jpg -J -L https://raw.githubusercontent.com/frossm/dirsize/master/graphics/PostIt-512x512.jpg
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME}.jpg /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "$@"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME}.jpg
Type=Application
StartupNotify=true
Terminal=true
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install DocFetcher cross-platform Java-based file search tool that supports searching inside files from package
APP_NAME=DocFetcher
APP_GUI_NAME="Cross-platform Java-based file search tool that supports searching inside files."
APP_GUI_CATEGORIES="System;Accessories;Office;"
APP_GUI_KEYWORDS="File;Search;"
APP_VERSION=1.1.25
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-portable
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}-${APP_VERSION}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME}-GTK3.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/img/${APP_NAME,,}128.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Snownews console RSS/Atom feed reader from source
APP_NAME=Snownews
APP_GUI_NAME="Console RSS/Atom feed reader."
APP_VERSION=1.11
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y libncurses-dev libcurl4-openssl-dev libssl-dev libxml2-dev 
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/msharov/${APP_NAME}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure --prefix=/usr/local && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install DFileManager Qt-based Mac-style cross-platform file manager from AppImage
APP_NAME=DFileManager
APP_GUI_NAME="Qt-based Mac-style cross-platform file manager."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="File;Manager;"
APP_VERSION=6117950
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/probonopd/${APP_NAME,,}/releases/download/continuous/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Dug cross-platform command-line DNS propagation checking tool from Debian package
APP_NAME=Dug
APP_VERSION=0.0.72
APP_EXT=deb
FILE_NAME=${APP_NAME,,}.${APP_VERSION}.linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/unfrl/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install diskgraph console graph of disk I/O in Linux from source
APP_NAME=diskgraph
APP_GUI_NAME="Console graph of disk I/O in Linux."
APP_VERSION=main
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/stolk/${APP_NAME,,}/archive/refs/heads/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo cp ${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install jNetMap cross-platform Java-based GUI network monitoring tool from package
APP_NAME=jNetMap
APP_GUI_NAME="Cross-platform Java-based GUI network monitoring tool."
APP_GUI_CATEGORIES="Networking;Internet;"
APP_GUI_KEYWORDS="Monitoring;Ping;"
APP_VERSION=0.5.5-703
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}.sh
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Lite XL cross-platform lightweight VS Code-style text editor from package
APP_NAME=Lite-XL
APP_GUI_NAME="Cross-platform lightweight VS Code-style text editor."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=2.1.8
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}/* /usr/local
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install JDiskCat cross-platform Java-based GUI disk cataloguing tool from package
APP_NAME=JDiskCat
APP_GUI_NAME="Cross-platform Java-based GUI disk cataloguing tool."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Disk;Usage;"
APP_VERSION=1.4.3
APP_EXT=zip
FILE_NAME=${APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}*/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/source/${APP_NAME}/bin/${APP_NAME}/img/media-floppy.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Key Mapper simple input device (mouse, keyboard, etc.) key/button remapping tool from Debian package
APP_NAME=Key-Mapper
APP_VERSION=1.0.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sezanzeb/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install FinalShell Linux application launcher from package
APP_NAME=FinalShell
APP_GUI_NAME="Linux application launcher."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Launcher;"
APP_VERSION=3.9.2
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_linux-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /usr/local
sudo chmod +x /usr/local/bin/${APP_NAME}
sudo ln -s -f /usr/local/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/lib/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install NxShell cross-platform SSH/SFTP terminal from AppImage
# https://github.com/nxshell/nxshell
APP_NAME=NxShell
APP_GUI_NAME="Cross-platform SSH/SFTP terminal."
APP_GUI_CATEGORIES="Networking;Internet;System;"
APP_GUI_KEYWORDS="Shell;SSH;SFTP;"
APP_VERSION=1.9.3
DATE_STAMP=202303220832
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-x86_64-linux-${APP_VERSION}-${DATE_STAMP}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?1669358095
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install DragIt cross-platform LAN file sharing tool from package
APP_NAME=DragIt
APP_GUI_NAME="Cross-platform LAN file sharing tool."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="File Sharing;LAN;"
APP_VERSION=0.5.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_linux_amd_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sireliah/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/sireliah/dragit/master/static/logo.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install BitCalculator Qt-based 64-bit number manipulator from source
APP_NAME=BitCalculator
APP_GUI_NAME="Qt-based 64-bit number manipulator."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Calculator;"
APP_VERSION=1.1.1.0
APP_EXT=zip
FILE_NAME=${APP_NAME}_v${APP_VERSION}_Source_Code
sudo apt-get install -y qtbase5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/v${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/src
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 ../${APP_NAME}.pro && make && sudo make install
sudo cp /tmp/${FILE_NAME}/src/qrc/ico/main.svg /opt/${APP_NAME}/${APP_NAME}.svg
sudo ln -s -f /opt/${APP_NAME}/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME}/${APP_NAME}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install ble.sh Bash line editor with syntax highlighting, auto suggestions, vim modes, etc. from package
APP_NAME=ble.sh
APP_GUI_NAME="Bash line editor with syntax highlighting, auto suggestions, vim modes, etc."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Shell;Editor;"
APP_VERSION=0.4.0-devel2
APP_EXT=tar.xz
FILE_NAME=${APP_NAME//.sh/}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/akinomyoga/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
mkdir -p $HOME/.local/share/blesh
cp -R /tmp/${FILE_NAME}/* $HOME/.local/share/blesh
cp $HOME/.bashrc $HOME/.bashrc_$(date +%Y\_%m\_%d)
# Add to beginning/top of .bashrc
echo "[[ \$- == *i* ]] && source ~/.local/share/blesh/ble.sh --attach=none" > /tmp/${APP_NAME,,}.tmp
cat $HOME/.bashrc >> /tmp/${APP_NAME,,}.tmp
# Add to end/bottom of .bashrc
echo "[[ \${BLE_VERSION-} ]] && ble-attach" >> /tmp/${APP_NAME,,}.tmp
cp /tmp/${APP_NAME,,}.tmp $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ffmpeg-coder FFMpeg command-line helper for video format conversion from Debian package
APP_NAME=ffmpeg-coder
APP_VERSION=1.9.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install cli-torrent-dl command-line Python tool to search and download files from major torrent sites from package
APP_NAME=cli-torrent-dl
APP_GUI_NAME="Command-line Python tool to search and download files from major torrent sites."
APP_GUI_CATEGORIES="Networking;Internet;"
APP_GUI_KEYWORDS="Torrent;Download;"
APP_VERSION=1.07
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/X0R0X/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
mkdir -p $HOME/.local/${APP_NAME,,}
cp -R /tmp/${FILE_NAME}/* $HOME/.local/${APP_NAME,,}
python3 -m venv $HOME/.local/${APP_NAME,,}/.venv
source $HOME/.local/${APP_NAME,,}/.venv/bin/activate
python3 -m pip install -r $HOME/.local/${APP_NAME,,}/requirements.txt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd $HOME/.local/${APP_NAME,,}
PATH=$HOME/.local/${APP_NAME,,}:\$PATH; export PATH
. $HOME/.local/${APP_NAME,,}/.venv/bin/activate
python3 $HOME/.local/${APP_NAME,,}/tordl.py "\$@"
deactivate
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ocenaudio cross-platform minimalist audio editor from Debian package
APP_NAME=ocenaudio
APP_VERSION=3.15.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_debian9_$(getconf LONG_BIT)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L --referer https://www.ocenaudio.com/download https://www.ocenaudio.com/downloads/index.php/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Fyne Calculator cross-platform minimalist GUI calculator from package
APP_NAME=Calculator
APP_GUI_NAME="Cross-platform minimalist GUI calculator."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Calculator;"
APP_VERSION=1.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-${KERNEL_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/fyne-io/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/fyne-io/${APP_NAME,,}/main/Icon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/usr/local/bin/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install rpg-cli Rust-based gamified 'cd' command replacement from package
APP_NAME=rpg-cli
APP_GUI_NAME="Rust-based gamified 'cd' command replacement."
APP_VERSION=0.2.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME} -J -L https://github.com/facundoolano/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}
sudo cp -R /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PHP Desktop 2020 Electron-based PHP environment with WordPress and SQLite from Debian package
APP_NAME=PHP-Desktop-2020
APP_VERSION=1.0.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install ScreenBringer Java-based minimalist remote desktop tool from Debian package
APP_NAME=ScreenBringer
APP_VERSION=0.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Setzer Python/GTK-based LaTeX editor for Linux from source
APP_NAME=Setzer
APP_GUI_NAME="Python/GTK-based LaTeX editor for Linux."
APP_VERSION=v66
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y meson python3-gi gir1.2-gtk-3.0 gir1.2-gtksource-4 gir1.2-gspell-1 gir1.2-pango-1.0 gir1.2-poppler-0.18 gir1.2-webkit2-4.0 python3-xdg gettext xdg-utils python3-pdfminer python3-cairo
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/cvfosammmm/${APP_NAME,,}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
meson /tmp/${FILE_NAME} --prefix=$HOME/.local && ninja install -C /tmp/${FILE_NAME}/build
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install GTK Wave Cleaner (GWC) digital audio restoration (dehiss, declick and decrackle) GUI tool from source
APP_NAME=GTK-Wave-Cleaner
APP_GUI_NAME="Digital audio restoration (dehiss, declick and decrackle) GUI tool."
APP_VERSION=0.22-05
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libgtk2.0-dev libfftw3-dev libsndfile1-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/gwc/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install fx cross-platform interactive command-line JSON processing tool from package
APP_NAME=fx
APP_GUI_NAME="Cross-platform interactive command-line JSON processing tool."
APP_VERSION=36.0.3
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/antonmedv/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install WorkerPDF cross-platform GUI front-end for converting PDF conversion using GhostScript from package
APP_NAME=WorkerPDF
APP_GUI_NAME="Cross-platform GUI front-end for converting PDF conversion using GhostScript."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="PDF;Conversion;GhostScript"
APP_VERSION=0.3.2
APP_EXT=tgz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x86_64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=i386
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-${ARCH_TYPE}-linux
sudo apt-get install -y ghostscript
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}.ico /usr/local/share/icons/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install LingLibre cross-platform Python language learning tool from package
APP_NAME=LingLibre
APP_GUI_NAME="Cross-platform Python language learning tool."
APP_GUI_CATEGORIES="Education;"
APP_GUI_KEYWORDS="Language"
APP_VERSION=2021.05.26
APP_EXT=tar.gz
FILE_NAME=exe.linux-x86_64-3.8
sudo apt-get install -y ghostscript
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/lingl/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Helix cross-platform, Rust-based modal text editor from package
APP_NAME=Helix
APP_GUI_NAME="Cross-platform, Rust-based modal text editor."
APP_VERSION=25.01.1
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/helix-editor/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/hx /usr/local/bin/hx
sudo ln -s -f /opt/${APP_NAME,,}/hx /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install dxtime cross-platform, WxWidgets-based GUI time-tracking tool from source
APP_NAME=dxtime
APP_GUI_NAME="Cross-platform, WxWidgets-based GUI time-tracking tool."
APP_VERSION=1.2.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y cmake libwxgtk3.0-gtk3-dev libsqlite3-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p build && cd build
cmake .. && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Kalk cross-platform, Rust-based calculator with symbolic functionality from package
APP_NAME=Kalk
APP_GUI_NAME="Cross-platform, Rust-based calculator with symbolic functionality."
APP_VERSION=0.5.4
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME} -J -L https://github.com/PaddiM8/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install GanTTY Python command-line minimalist project management tool from package
APP_NAME=GanTTY
APP_GUI_NAME="Python command-line minimalist project management tool."
APP_VERSION=master
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/timeopochin/${APP_NAME}/archive/refs/heads/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
mkdir -p $HOME/.local/${APP_NAME,,}
cp -R /tmp/${FILE_NAME}/* $HOME/.local/${APP_NAME,,}
python3 -m venv $HOME/.local/${APP_NAME,,}/.venv
source $HOME/.local/${APP_NAME,,}/.venv/bin/activate
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd $HOME/.local/${APP_NAME,,}
PATH=$HOME/.local/${APP_NAME,,}:\$PATH; export PATH
. $HOME/.local/${APP_NAME,,}/.venv/bin/activate
python3 $HOME/.local/${APP_NAME,,}/main.py "\$@"
deactivate
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Reactide dedicated IDE for React web application development from AppImage
APP_NAME=Reactide
APP_GUI_NAME="Dedicated IDE for React web application development."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="React;Javascript;IDE;Editor;"
APP_VERSION=3.0.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}.${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v3.0-beta/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/master/icons/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Lynx cross-platform minimalist code editor from package
APP_NAME=Lynx
APP_GUI_NAME="Cross-platform minimalist code editor."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=0.0.1.9
APP_EXT=7z
FILE_NAME=${APP_NAME}_${APP_VERSION}_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/lynxcodeeditor/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install gshogi cross-platform Python-based GUI Shogi (Japanese Chess) game from package
APP_NAME=gshogi
APP_GUI_NAME="Cross-platform Python-based GUI Shogi (Japanese Chess) game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Chess;Board Game;"
APP_VERSION=0.5.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y python3-gi-cairo gir1.2-rsvg-2.0
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/johncheetham/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 ./setup.py install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ctop cross-platform, top-like GUI for monitoring performance of containers from package
APP_NAME=ctop
APP_GUI_NAME="Cross-platform, top-like GUI for monitoring performance of containers."
APP_VERSION=0.7.6
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Lucas Chess cross-platform, Python-based GUI for 60+ chess engines from package
# https://lucaschess.pythonanywhere.com/
APP_NAME="Lucas Chess"
APP_GUI_NAME="Cross-platform, Python-based GUI for 60+ chess engines."
APP_VERSION=2.20c
APP_EXT=sh
FILE_NAME=${APP_NAME// /}R${APP_VERSION//./_}_LINUX
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/lucaschessr/${FILE_NAME}.${APP_EXT}
sudo sh /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install LANDrop cross-platform LAN file-sharing tool from AppImage
APP_NAME=LANDrop
APP_GUI_NAME="Cross-platform LAN file-sharing tool."
APP_GUI_CATEGORIES="Network;Accessories;"
APP_GUI_KEYWORDS="LAN;Collaboration;File Sharing;"
APP_VERSION=0.4.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://raw.githubusercontent.com/${APP_NAME}/${APP_NAME}/master/${APP_NAME}/icons/app.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME}.png /usr/local/share/icons/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Station Mauikit-framework Qt terminal tool from AppImage
APP_NAME=Station
APP_GUI_NAME="Mauikit-framework Qt terminal tool."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Terminal;Qt;"
APP_VERSION=1.2.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-stable-v${APP_VERSION}-amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.kde.org/stable/maui/${APP_NAME,,}/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install AppImageLauncher Qt-based tool to make AppImage files automatically launchable from Debian package
APP_NAME=AppImageLauncher
APP_MAIN_VERSION=2.2.0
APP_VERSION=${APP_MAIN_VERSION}-travis995.0f91801
APP_EXT=deb
source /etc/lsb-release
# If Ubuntu version is above 16.04 (Xenial) up to 18.04 (Bionic), then we use 16.04.
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(xe|ya|ze|ar)$ ]]; then   # 16.04 - 17.10
	DISTRIB_CODENAME=xenial
# Otherwise, we use Bionic.
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(bi|co|di|eo|fo|gr|hi)$ ]]; then
	DISTRIB_CODENAME=bionic
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}.${DISTRIB_CODENAME}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/TheAssassin/${APP_NAME}/releases/download/v${APP_MAIN_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install rpncalc cross-platform Java-based command-line RPN calculator from package
APP_NAME=rpncalc
APP_VERSION=5.8.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-fross/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install jworktime cross-platform Java-based GUI Pomodoro timer productivity tool from package
APP_NAME=jworktime
APP_GUI_NAME="Cross-platform Java-based GUI Pomodoro timer productivity tool."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Pomodoro;Productivity;"
APP_VERSION=1.0.5
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-app-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -cp "/opt/${APP_NAME,,}/lib/*" clock.Clock &
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install DVDStyler cross-platform, WxWidgets-based GUI DVD authoring tool from source
APP_NAME=DVDStyler
APP_GUI_NAME="Cross-platform, WxWidgets-based GUI DVD authoring tool."
APP_VERSION=3.2.1
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -yy build-essential flex libwxgtk3.0-gtk3-dev libwxgtk-media3.0-gtk3-dev libcairo2-dev libpango1.0-dev libexif-dev libudev-dev libdbus-1-dev xmlto dvdauthor growisofs libjpeg62-dev libavcodec-dev libavformat-dev libavfilter-dev libswscale-dev
# wxSVG package from Ubuntu repositories doesn't work to build DVDStyler, so we must build from source
curl -o /tmp/wxsvg-1.5.22.tar.bz2 -J -L https://downloads.sourceforge.net/wxsvg/wxsvg-1.5.22.tar.bz2
cd /tmp
dtrx -n /tmp/wxsvg-1.5.22.tar.bz2
cd /tmp/wxsvg-1.5.22
./autogen.sh && ./configure && make -j$(nproc) && sudo make install
# Now proceed with build of DVDStyler
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./autogen.sh && ./configure && make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install VidCutter media cutter/joiner built with FFmpeg and Qt from AppImage
APP_NAME=VidCutter
APP_GUI_NAME="Media cutter/joiner built with FFmpeg and Qt."
APP_GUI_CATEGORIES="Multimedia;Video;"
APP_GUI_KEYWORDS="Video;Editor;Cutter;"
APP_VERSION=6.0.5.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install The Powder Toy cross-platform desktop 'falling sand' physics simulation from package
APP_NAME="The Powder Toy"
APP_GUI_NAME="Cross-platform desktop 'falling sand' physics simulation."
APP_GUI_CATEGORIES="Education;Science;"
APP_GUI_KEYWORDS="Science;Physics;Simulation;"
APP_VERSION=98.2.365
APP_EXT=N/A
FILE_NAME=powder-v${APP_VERSION}-x86_64-linux-gnu
curl -o /tmp/${FILE_NAME} -J -L https://github.com/${APP_NAME// /-}/${APP_NAME// /-}/releases/download/v${APP_VERSION}/${FILE_NAME}
curl -o /tmp/${APP_NAME// /-}.ico -J -L https://github.com/The-Powder-Toy/The-Powder-Toy/raw/master/resources/icon.ico
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME// /-}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME// /-}.ico /usr/local/share/icons/${APP_NAME// /-}.ico
cat > /tmp/${APP_NAME// /-}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME// /-}
Icon=/usr/local/share/icons/${APP_NAME// /-}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME// /-}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install gpassmanager cross-platform, Golang-based simple command-line password generator/manager from package
APP_NAME=gpassmanager
APP_GUI_NAME="Cross-platform, Golang-based simple command-line password generator/manager."
APP_VERSION=1.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-amd64-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install WFDownloader cross-platform, Java-based bulk multimedia download tool from package
APP_NAME=WFDownloader
APP_GUI_NAME="Cross-platform, Java-based bulk multimedia download tool."
APP_GUI_CATEGORIES="Internet;Multimedia;"
APP_GUI_KEYWORDS="Download;Multimedia;"
APP_VERSION=0.89
APP_EXT=zip
FILE_NAME=${APP_NAME}App_CrossPlatform_BETA
sudo apt-get install -yy openjfx
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://a.fsdn.com/allura/p/wfdownloader/icon?1625415872
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME}.png /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -cp "/opt/${APP_NAME,,}/lib/*" -jar ${APP_NAME}App &
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Contour modern C++ terminal with graphics support from Debian package
APP_NAME=Contour
APP_VERSION=0.4.1.6292
APP_EXT=deb
source /etc/lsb-release
# If Ubuntu version is above 18.04 (Bionic) up to 19.10 (Eoan), then we use 18.04.
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(bi|co|di|eo)$ ]]; then   # 18.04 - 19.10
	DISTRIB_VERSION=18_04
# If Ubuntu version is 20.04 (Focal) up to 21.10 (Impish), then we use 20.04.
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(fo|gr|hi|im)$ ]]; then
	DISTRIB_VERSION=20_04
# Otherwise, we use Jammy (22.04).
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(ja|ki)$ ]]; then
	DISTRIB_VERSION=22_04
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-ubuntu_${DISTRIB_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}-terminal/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Kryptor cross-platform, C#/.NET-based command-line file encryption tool from package
APP_NAME=Kryptor
APP_GUI_NAME="Cross-platform, C#/.NET-based command-line file encryption tool."
APP_VERSION=3.1.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/samuel-lucas6/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install q Text as Data Python-based command-line tool for querying CSV and other tabular text data with SQL from Debian package
# https://github.com/harelba/q
APP_NAME=q-Text-as-Data
APP_VERSION=3.1.6
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Ltxshell command-line tool for launching LaTeX and associated tools (e.g., dvi-viewer, dvips, ps-file-viewer, pdf-file-viewer) from menu from package
APP_NAME=Ltxshell
APP_GUI_NAME="Command-line tool for launching LaTeX and associated tools (e.g., dvi-viewer, dvips, ps-file-viewer, pdf-file-viewer) from menu."
APP_VERSION=1.14
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Suside cross-platform Electron-based text editor with built-in HTML and Markdown preview from Debian package
# https://github.com/zeankundev/suside
APP_NAME=Suside
APP_VERSION=1.4.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Lorien cross-platform, Godot-based infinite canvas drawing/note-taking tool from package
APP_NAME=Lorien
APP_GUI_NAME="Cross-platform, Godot-based infinite canvas drawing/note-taking tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;Drawing;"
APP_VERSION=0.4.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}_v${APP_VERSION}_Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mbrlabs/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://raw.githubusercontent.com/mbrlabs/${APP_NAME}/main/images/${APP_NAME,,}.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME}.png /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME}.x86_64 /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Peek tool to create animated GIF recording of small screen area from Debian package
# https://github.com/phw/peek
APP_NAME=Peek
APP_GUI_NAME="Tool to create animated GIF recording of small screen area."
APP_VERSION=1.5.1-0~ppa28
APP_EXT=deb
source /etc/lsb-release
# If Ubuntu version is above 16.04 (Xenial) up to 18.04 (Bionic), then we use 16.04.
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(bi|co|di|eo|fo|gr|hi|im|ja)$ ]]; then   # 18.04 - 22.04
	DISTRIB_VERSION=${DISTRIB_RELEASE}
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}~ubuntu${DISTRIB_VERSION}.1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/~peek-developers/+archive/ubuntu/stable/+files/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Musicbrainz Picard cross-platform audio tagging tool from PPA
sudo add-apt-repository -yy ppa:musicbrainz-developers/stable
sudo apt update
sudo apt install -yy picard

# Install Passky cross-platform Javascript/Electron desktop tool for online password manager from AppImage
APP_NAME=Passky
APP_GUI_NAME="Cross-platform Javascript/Electron desktop tool for online password manager."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Password;Security;"
APP_VERSION=5.0.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Rabbit-Company/${APP_NAME}-Desktop/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Rabbit-Company/${APP_NAME}-Desktop/main/images/logo128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install CLIBASIC cross-platform BASIC interpreter for console/terminal from source
APP_NAME=CLIBASIC
APP_GUI_NAME="Cross-platform BASIC interpreter for console/terminal."
APP_VERSION=1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -yy -qq build-essential libreadline-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/PQCraft/${APP_NAME,,}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Ganimed cross-platform, Java-based animated GIF/PNG tool from package
APP_NAME=Ganimed
APP_GUI_NAME="Cross-platform, Java-based animated GIF/PNG tool."
APP_GUI_CATEGORIES="Multimedia;Graphics;"
APP_GUI_KEYWORDS="GIF;PNG;"
APP_VERSION=1.5.1-alpha
APP_EXT=jar
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -yy openjfx
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Moon70/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Moon70/${APP_NAME}/master/src/main/resources/icons/ProgramIcon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar ${FILE_NAME}.${APP_EXT} &
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install mp3guessenc command-line MPEG audio (layer 1/2/3) info scanner from source
APP_NAME=mp3guessenc
APP_GUI_NAME="Command-line MPEG audio (layer 1/2/3) info scanner."
APP_VERSION=0.27.6beta
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -yy build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Nyxt cross-platform, keyboard-oriented web browser with Vim and Emacs keybindings from package
# https://nyxt.atlas.engineer/
APP_NAME=Nyxt
APP_GUI_NAME="Cross-platform, keyboard-oriented web browser with Vim and Emac keybindings."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Browser;Vim;Emacs;Lisp;"
APP_VERSION=3.11.8
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/atlas-engineer/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/atlas-engineer/${APP_NAME,,}/master/assets/${APP_NAME,,}_128x128.png
cd /tmp
sudo tar -xvf /tmp/${FILE_NAME}.${APP_EXT} -C /
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
# Path=
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Wike desktop Wikipedia reader from PPA
https://github.com/hugolabe/Wike
sudo add-apt-repository -yy ppa:apandada1/wike
sudo apt update
sudo apt install -yy wike

# Install Spyder cross-platform Qt-based Python IDE from PyPI
APP_NAME=Spyder
APP_GUI_NAME="Cross-platform Qt-based Python IDE."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Python;IDE;Editor;"
APP_VERSION=6.0.7
mkdir -p $HOME/.local/bin/${APP_NAME,,}
cd $HOME/.local/bin/${APP_NAME,,}
python3 -m venv $HOME/.local/bin/${APP_NAME,,}/.venv
source $HOME/.local/bin/${APP_NAME,,}/.venv/bin/activate
python3 -m pip install ${APP_NAME,,}
deactivate
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/bash
cd $HOME/.local/bin/${APP_NAME,,}
PATH=$HOME/.local/bin/${APP_NAME,,}:\$PATH; export PATH
source $HOME/.local/bin/${APP_NAME,,}/.venv/bin/activate
$HOME/.local/bin/${APP_NAME,,}/.venv/bin/${APP_NAME,,} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=$HOME/.local/bin/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=$HOME/.local/bin/${APP_NAME,,}/.venv/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install F2 cross-platform, command-line batch file renamer from package
APP_NAME=F2
APP_VERSION=1.9.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ayoisaiah/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Zellij Rust-based terminal multiplexer with layout and plugin systems from package
APP_NAME=Zellij
APP_GUI_NAME="Rust-based terminal multiplexer with layout and plugin systems."
APP_VERSION=0.42.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/zellij-org/zellij/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Procs Rust-based modern replacement for 'ps' from package
APP_NAME=Procs
APP_GUI_NAME="Rust-based modern replacement for 'ps'."
APP_VERSION=0.14.4
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-lnx
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dalance/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install bftpd fast, RFC-compliant FTP server from source
APP_NAME=bftpd
APP_GUI_NAME="Fast, RFC-compliant FTP server."
APP_VERSION=6.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -yy build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Ox minimalist Rust-based terminal text editor from Debian package
APP_NAME=Ox
APP_VERSION=0.2.7
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/curlpipe/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Msc-generator cross-platform, GTK-based GUI signalling and sequence diagram editor from source
APP_NAME=Msc-generator
APP_GUI_NAME="Cross-platform, GTK-based GUI signalling and sequence diagram editor."
APP_VERSION=6.4.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -yy debhelper g++-10 automake bison flex libfl-dev texinfo libcairo2-dev libfreetype6-dev libfontconfig help2man libgraphviz-dev texlive texlive-plain-generic libglpk-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Mongomix cross-platform, free MongoDB GUI client from package
APP_NAME=Mongomix
APP_GUI_NAME="Cross-platform, free MongoDB GUI client."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Mongo;MongoDB;Database;NoSQL;"
APP_VERSION=1.5.4
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://mongomix.sigma-solutions.fr/release/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/resources/app/dist/bundle/128x128.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install FTP Rush cross-platform, free FTP/SFTP/FTPS and cloud storage client from package
APP_NAME="FTP Rush"
APP_GUI_NAME="Cross-platform, free FTP/SFTP/FTPS and cloud storage client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="FTP;Cloud;"
APP_VERSION=3.5.1
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME// /}_linux
# Convert APP_NAME to all lowercase and remove whitespace using 'tr'
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.wftpserver.com/download/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://www.wftpserver.com/images/${_APP_NAME}_app_logo.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME// /}/* /opt/${_APP_NAME}
sudo cp /tmp/${_APP_NAME}.png /opt/${_APP_NAME}
sudo chmod -R 755 /opt/${_APP_NAME}
sudo ln -s -f /opt/${_APP_NAME}/${APP_NAME// /} /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Enigma cross-platform, SDL-based puzzle game based on Oxyd from source
APP_NAME=Enigma
APP_GUI_NAME="Cross-platform, SDL-based puzzle game based on Oxyd."
APP_VERSION=1.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -yy libsdl1.2-dev libsdl-ttf2.0-dev libsdl-mixer1.2-dev libsdl-image1.2-dev libpng-dev libxerces-c-dev zlib1g-dev texi2html curl xdg-utils autoconf graphviz imagemagick
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-game/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install APK Editor Studio cross-platform Qt-based Android APK editor/reverse-engineering tool from AppImage
APP_NAME="APK Editor Studio"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Qt-based Android APK editor/reverse-engineering tool."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Android;APK;"
APP_VERSION=1.5.0
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}_linux_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kefir500/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/kefir500/${_APP_NAME}/master/src/icons/${_APP_NAME}/apps/48x48/${_APP_NAME}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install TriCo cross-platform, Electron-based Excel/CSV-to-MySQL/MongoDB import tool from package
# https://github.com/ngudbhav/TriCo-electron-app
APP_NAME=TriCo
APP_GUI_NAME="Cross-platform, Electron-based Excel/CSV-to-MySQL/MongoDB import tool."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Excel;Spreadsheet;CSV;Database;MySQL;MongoDB;"
APP_VERSION=3.0.0
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux
# Convert APP_NAME to all lowercase and remove whitespace using 'tr'
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/ngudbhav/${APP_NAME}-electron-app/master/images/icons/png/48x48.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install FusePDF Qt-based cross-platform PDF merging, splitting, and exporting tool from source
APP_NAME=FusePDF
APP_GUI_NAME="Qt-based cross-platform PDF merging, splitting, and exporting tool."
APP_VERSION=2.2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}%20${APP_VERSION}
sudo apt-get install -y qtbase5-dev qt5-qmake qt5-default qttools5-dev-tools ghostscript
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/*${APP_NAME,,}*
mkdir -p build && cd build
qtchooser -qt=5 -run-tool=qmake CONFIG+=release PREFIX=/usr/local ../${APP_NAME,,}.pro && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${FILE_NAME}*

# Install up (Ultimate Plumber) Golang-based command-line tool for interactively chaining commands together with pipe (|) from package
APP_NAME=up
APP_GUI_NAME="Golang-based command-line tool for interactively chaining commands together with pipe (|)."
APP_VERSION=0.4
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-ultimate-plumber.mirror/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Kakoune console text editor with Vi keybindings from source
APP_NAME=Kakoune
APP_GUI_NAME="Console text editor with Vi keybindings."
APP_VERSION=2025.06.03
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -yy build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mawww/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make -j$(nproc) && PREFIX=/usr/local sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install IPCalc cross-platform, Java-based IP address calculator from package
APP_NAME=IPCalc
APP_GUI_NAME="Cross-platform, Java-based IP address calculator."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="IP;Address;Networking;"
APP_VERSION=1.2
APP_EXT=zip
FILE_NAME=${APP_NAME}
sudo apt-get install -yy openjdk-11-jre
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-v1-0/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/ipcalc-v1-0/icon
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar ${FILE_NAME}.jar &
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install LosslessCut cross-platform FFmpeg GUI for video and audio editing and other operations from AppImage
APP_NAME=LosslessCut
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform FFmpeg GUI for video and audio editing and other operations."
APP_GUI_CATEGORIES="Multimedia;Entertainment;Audio;Video;"
APP_GUI_KEYWORDS="Audio;Video;FFmpeg;Editing;"
APP_VERSION=3.65.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mifi/lossless-cut/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/mifi/lossless-cut/master/src/icon.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install PDF Arranger cross-platform Python/GTK tool for splitting, merging, rotating, cropping, and rearranging pages in PDF files from package
APP_NAME="PDF Arranger"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Python/GTK tool for splitting, merging, rotating, cropping, and rearranging pages in PDF files."
APP_VERSION=1.12.0
APP_EXT=tar.gz
FILE_NAME=${_APP_NAME}-${APP_VERSION}
sudo apt-get install -yy python3-pip python3-distutils-extra python3-wheel python3-gi python3-gi-cairo gir1.2-gtk-3.0 gir1.2-poppler-0.18 python3-setuptools img2pdf
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${_APP_NAME}/${_APP_NAME}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
python3 -m pip install --user --upgrade /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Malnotes combination to-do list/note-taking tool from Debian package
APP_NAME=Malnotes
APP_VERSION=1.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install sqlite_bro Python/Tk single-file GUI SQLite editor/manager from package
APP_NAME=sqlite_bro
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Python/Tk single-file GUI SQLite editor/manager."
APP_VERSION=0.12.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -yy python3-pip python3-tk
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/stonebig/${APP_NAME,,}/archive/refs/tags/V${APP_VERSION}.${APP_EXT}
python3 -m pip install --user --upgrade /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Vieb (Vim Inspired Electron Browser) cross-platform, Chromium-based web browser with Vim keybindings from package
APP_NAME=Vieb
APP_GUI_NAME="Cross-platform, Chromium-based web browser with Vim keybindings."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Vim;Browser;Chromium;Web;"
APP_VERSION=12.3.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Jelmerro/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/Jelmerro/${APP_NAME}/master/app/img/icons/${APP_NAME,,}.svg
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.svg /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Logseq local-first, non-linear, outliner notebook for personal knowledge management from package
APP_NAME=Logseq
APP_GUI_NAME="Local-first, non-linear, outliner notebook for personal knowledge management."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;Knowledge;Management;"
APP_VERSION=0.10.5
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-x64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}-linux-x64/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/resources/app/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install DbGate cross-platform GUI editor/manager for SQL and NoSQL databases from AppImage
APP_NAME=DbGate
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform GUI editor/manager for SQL and NoSQL databases."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Database;SQL;NoSQL;Editor;"
APP_VERSION=6.4.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/master/app/icons/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Bdash cross-platform GUI (JavaScript/Electron) minimalist SQL client for data analysis from AppImage
APP_NAME=Bdash
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="GUI (JavaScript/Electron) minimalist SQL client for data analysis."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Database;SQL;Editor;"
APP_VERSION=1.16.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}-app/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}-app/${APP_NAME,,}/master/build/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Viddy modern Golang-based 'watch' command with time-travel and paging from package
APP_NAME=Viddy
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Modern Golang-based 'watch' command with time-travel and paging."
APP_VERSION=0.4.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sachaos/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install CP Editor cross-platform Qt-based code editor for competitive programming from AppImage
APP_NAME="CP Editor"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Qt-based code editor for competitive programming."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="IDE;Editor;Programming;"
APP_VERSION=6.10.3
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${_APP_NAME}/${_APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/${_APP_NAME}/${_APP_NAME}/master/resources/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Biscuit cross-platform Electron-based web browser that aims to reduce tab clutter from AppImage
APP_NAME=Biscuit
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based web browser that aims to reduce tab clutter."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Web;Browser;Tabs;"
APP_VERSION=1.2.29
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/agata/dl.${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://avatars.githubusercontent.com/u/40473
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME}.png /usr/local/share/icons/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install KeePassXC cross-platform lightweight password manager from AppImage
APP_NAME=KeePassXC
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform lightweight password manager."
APP_GUI_CATEGORIES="Internet;Accessories;System"
APP_GUI_KEYWORDS="Password;Security;"
APP_VERSION=2.7.10
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/keepassxreboot/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://raw.githubusercontent.com/keepassxreboot/${APP_NAME,,}/develop/share/icons/application/256x256/apps/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME}.png /usr/local/share/icons/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Dungeon Crawl: Stone Soup (DCSS) Rogue-like adventure game with tile graphics from source
APP_NAME="Stone Soup"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '_')
APP_GUI_NAME="Rogue-like adventure game with tile graphics."
APP_VERSION=0.30.0
APP_EXT=tar.xz
FILE_NAME=${_APP_NAME}-${APP_VERSION}
sudo apt install -yy build-essential libncursesw5-dev bison flex liblua5.1-0-dev libsqlite3-dev libz-dev pkg-config python3-yaml binutils-gold python-is-python3
sudo apt install -yy libsdl2-image-dev libsdl2-mixer-dev libsdl2-dev libfreetype6-dev libpng-dev ttf-dejavu-core advancecomp pngcrush
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/dungeoncrawlstonesoup.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make -j$(nproc) && PREFIX=/usr/local sudo make install
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Korbeaux cross-platform Qt-based comic book (PDF, CBR, CBZ format) reader from source
APP_NAME=Korbeaux
APP_GUI_NAME="Cross-platform Qt-based comic book (PDF, CBR, CBZ format) reader."
APP_VERSION=4.8
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y qt5-default qt5-qmake qtdeclarative5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/lua* && make linux
cd /tmp/${FILE_NAME}
sed -i.bak 's@Qt::KeepEmptyParts@QString::KeepEmptyParts@g' mainwindow.cpp
sed -i.bak 's@Qt::SkipEmptyParts@QString::SkipEmptyParts@g' mainwindow.cpp
qtchooser -run-tool=qmake -qt=5 ../${APP_NAME,,}.pro && make && sudo ./install.sh && sudo cp ./uninstall.sh /usr/local/bin/${APP_NAME,,}_uninstall.sh
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install dateutils command-line date and time utilities, including calculation and conversion, from source
APP_NAME=dateutils
APP_GUI_NAME="Command-line date and time utilities, including calculation and conversion."
APP_VERSION=0.4.11
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hroptatyr/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Brisqi cross-platform desktop personal Kanban tool from AppImage
# https://brisqi.com/
APP_NAME=Brisqi
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform desktop personal Kanban tool."
APP_GUI_CATEGORIES="Accessories;Office;Programming;Development;"
APP_GUI_KEYWORDS="Kanban;Project;Management;"
APP_VERSION=0.11.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-setup-${APP_VERSION}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/releases/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://avatars.githubusercontent.com/u/71693087?v=4
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME}.png /usr/local/share/icons/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install exatorrent BitTorrent client that can run locally or be hosted on server from package
APP_NAME=exatorrent
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="BitTorrent client that can run locally or be hosted on server."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="BitTorrent;P2P;"
APP_VERSION=0.1.2
APP_EXT=N/A
FILE_NAME=${APP_NAME}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/varbhat/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
/usr/local/bin/${APP_NAME,,} &
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=xdg-open http://127.0.0.1:5000/
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install SeaMonkey cross-platform integrated Internet application suite with web browser, email, newsgroup client, feed reader, HTML editor, IRC chat and web development tools from package
APP_NAME=SeaMonkey
APP_GUI_NAME="Cross-platform integrated Internet application suite with web browser, email, newsgroup client, feed reader, HTML editor, IRC chat and web development tools."
APP_GUI_CATEGORIES="Internet;Network;Networking;"
APP_GUI_KEYWORDS="Browser;RSS;HTML;IRC;Editor;Suite;Email;News;"
APP_VERSION=2.53.21
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.en-US.linux-$(uname -m)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://archive.mozilla.org/pub/seamonkey/releases/${APP_VERSION}/linux-$(uname -m)/en-US/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/* /opt
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/chrome/icons/default/default128.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Pinto Web Player cross-platform desktop media player focused on online media from AppImage
# https://www.pintowebplayer.com/
APP_NAME="Pinto Web Player"
_APP_NAME=$(echo ${APP_NAME} | tr '[:blank:]' '-' )
APP_GUI_NAME="Cross-platform desktop media player focused on online media."
APP_GUI_CATEGORIES="Multimedia;Audio;Video;"
APP_GUI_KEYWORDS="Multimedia;Audio;Video;Player;"
APP_VERSION=1.12.58
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${_APP_NAME,,}/desktop-app/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://www.pintowebplayer.com/_next/static/images/favicon-1d541999648178c92aa7b1526953cc2d.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME,,}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Tockler cross-platform minimalist time-tracking tool that uses focus window title from AppImage
APP_NAME=Tockler
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform minimalist time-tracking tool that uses focus window title."
APP_GUI_CATEGORIES="Accessories;Office;Programming;Development;"
APP_GUI_KEYWORDS="Time;Tracking;Project;Management;"
APP_VERSION=3.21.18
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/MayGo/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://raw.githubusercontent.com/MayGo/${APP_NAME,,}/master/electron/shared/img/icon/win/${APP_NAME,,}_icon_big.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME}.png /usr/local/share/icons/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install MultiCopyPaste cross-platform multiple clipboard tool from AppImage
APP_NAME=MultiCopyPaste
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform multiple clipboard tool."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Clipboard;"
APP_VERSION=1.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://a.fsdn.com/allura/p/multicopypaste/icon
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME}.png /usr/local/share/icons/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Annie Golang-based command-line video download tool from package
APP_NAME=Lux
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based command-line video download tool."
APP_VERSION=0.24.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(getconf LONG_BIT)-bit
sudo apt-get install -y ffmpeg
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/annie.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Darktile Golang-based GPU-rendered terminal for tiling window managers from package
APP_NAME=Darktile
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based GPU-rendered terminal for tiling window managers."
APP_VERSION=0.0.11
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-amd64
curl -o /tmp/${FILE_NAME} -J -L https://github.com/liamg/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install When Golang-based minimalist command-line time zone converter from package
APP_NAME=When
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based minimalist command-line time zone converter."
APP_VERSION=0.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.linux-amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jupj/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Focus cross-platform, command-line minimalist Pomodoro timer from Debian package
APP_NAME=Focus
APP_VERSION=1.4.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ayoisaiah/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install lls Golang-based command-line tool to list files in directories with large number of files from package
APP_NAME=lls
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based command-line tool to list files in directories with large number of files."
APP_VERSION=0.0.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-$(dpkg --print-architecture)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/catatsuy/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install shd Rust-based command-line tool to show HDD SMART parameters from package
APP_NAME=shd
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based command-line tool to show HDD SMART parameters."
APP_VERSION=0.1.6
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(uname -m)
sudo apt-get install -y smartmontools
curl -o /tmp/${FILE_NAME} -J -L https://github.com/alttch/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ReHex cross-platform hex editor focused on reverse engineering from AppImage
APP_NAME=ReHex
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform hex editor focused on reverse engineering."
APP_GUI_CATEGORIES="Programming;Development;System;"
APP_GUI_KEYWORDS="Hex;Hacking;Editor;"
APP_VERSION=0.60.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/solemnwarning/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/solemnwarning/${APP_NAME,,}/master/res/icon128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install gdu Golang-based command-line interactive tool to show file system usage from package
APP_NAME=gdu
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based command-line tool to list files in directories with large number of files."
APP_VERSION=5.25.0
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}_linux_$(dpkg --print-architecture)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dundee/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install BASIC256 cross-platform Qt-based BASIC compiler with interactive IDE from source
APP_NAME=BASIC256
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="BASIC;IDE;Editor;"
APP_VERSION=2.0.0.11
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}.orig
sudo apt-get install -y qttools5-dev libespeak-ng-libespeak-dev libqt5serialport5-dev qtmultimedia5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/kidbasic/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}*
mkdir -p build && cd build
qtchooser -run-tool=qmake -qt=5 ../${APP_NAME,,}.pro && make && sudo make install
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}*/resources/icons/${APP_NAME,,}.png /usr/share/${APP_NAME,,}/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/bin
Exec=/usr/bin/${APP_NAME,,}
Icon=/usr/share/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install AuthPass cross-platform password manager with support for Keepass format password database files from package
APP_NAME=AuthPass
APP_GUI_NAME="Cross-platform password manager with support for Keepass format password database files."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Security;Password;"
APP_VERSION=1.9.10_1994
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,} /opt
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/data/flutter_assets/assets/images/logo_icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install RSS Guard cross-platform Qt-based RSS/ATOM/JSON feed reader from AppImage
APP_NAME="RSS Guard"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Qt-based RSS/ATOM/JSON feed reader."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="RSS;Feed;Reader;"
APP_VERSION=4.8.4
BUILD_NUMBER=87f0d37cc
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}-${BUILD_NUMBER}-linux64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/martinrotter/${_APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/martinrotter/${_APP_NAME}/master/resources/graphics/${_APP_NAME}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install GtkRadio minimalist Internet radio player from package
APP_NAME=GtkRadio
APP_GUI_NAME="Minimalist Internet radio player."
APP_GUI_CATEGORIES="Internet;Multimedia;Audio;"
APP_GUI_KEYWORDS="Radio;Streaming;"
APP_VERSION=N/A
APP_EXT=tar.xz
FILE_NAME=Radio
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/gtk-radio/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/radio /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Exec=/opt/${APP_NAME,,}/radio
Icon=/opt/${APP_NAME,,}/kaa.kalexal.Radio.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Osoy Rust-based command-line Git repository management tool from package
APP_NAME=Osoy
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based command-line Git repository management tool."
APP_VERSION=0.5.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install OpenShot cross-platform non-linear video editor from AppImage
APP_NAME=OpenShot
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform non-linear video editor."
APP_GUI_CATEGORIES="Multimedia;Video;"
APP_GUI_KEYWORDS="Video;Editor;"
APP_VERSION=3.3.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(uname -m)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME,,}-qt//releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME}/${APP_NAME,,}-qt/develop/images/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install gobang Rust-based cross-platform TUI database management tool from package
APP_NAME=gobang
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based cross-platform TUI database management tool."
APP_VERSION=0.1.0-alpha.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(uname -m)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/TaKO8Ki/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install dust Rust-based cross-platform disk usage tool with graphical display from package
APP_NAME=dust
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based cross-platform disk usage tool with graphical display."
APP_VERSION=1.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(uname -m)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bootandy/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install KOReader ebook reader emulator with support for PDF, DjVu, EPUB, FB2 and other formats from AppImage
APP_NAME=KOReader
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Ebook reader emulator with support for PDF, DjVu, EPUB, FB2 and other formats."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Ebook;Reader;"
APP_VERSION=2025.04
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-appimage-x86_64-linux-gnu-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/master/resources/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install sttr Golang-based cross-platform command-line string transformation tool from package
APP_NAME=sttr
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based cross-platform command-line string transformation tool."
APP_VERSION=0.2.22
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/abhimanyu003/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install wethr Rust-based cross-platform weather tool with auto-location identification from package
APP_NAME=wethr
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based cross-platform weather tool with auto-location identification."
APP_VERSION=0.6.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-$(uname -m)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/risoflora/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install slack-term Golang-based Slack client for the terminal from package
APP_NAME=slack-term
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based Slack client for the terminal."
APP_VERSION=0.5.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/jpbruinsslot/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Gaia Sky real-time, 3D, astronomy visualisation software from AppImage
APP_NAME="Gaia Sky"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Real-time, 3D, astronomy visualisation software."
APP_GUI_CATEGORIES="Education;Science;"
APP_GUI_KEYWORDS="Astronomy;Space;"
APP_VERSION=3.1.6.986c7b5ee
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}_${APP_VERSION}_x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gaia.ari.uni-heidelberg.de/${_APP_NAME}/files/releases/latest/${FILE_NAME}.${APP_EXT,,}
curl -o /tmp/${_APP_NAME}.png -J -L https://gitlab.com/langurmonkey/${_APP_NAME}/-/raw/master/assets/icon/gs_128.png?inline=false
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install yed (Your Editor) fast, customizable text editor with zero dependencies from source
APP_NAME=yed
APP_GUI_NAME="Fast, customizable text editor with zero dependencies."
APP_VERSION=master
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://codeload.github.com/kammerdienerb/${APP_NAME,,}/${APP_EXT}/refs/heads/${APP_VERSION}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo ./install.sh -c release -p /usr/local
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install JupyterLab App cross-platform, desktop application for JupyterLab from Debian package
APP_NAME=JupyterLab
APP_VERSION=4.2.5-1
APP_EXT=deb
FILE_NAME=${APP_NAME}-Setup-Debian-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}-desktop/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install crabz Rust-based cross-platform, fast compression and decompression tool from package
APP_NAME=crabz
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based cross-platform, fast compression and decompression tool."
APP_VERSION=0.8.1
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/sstadick/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Multitextor cross-platform console-mode text editor from source
APP_NAME=Multitextor
APP_GUI_NAME="Cross-platform console-mode text editor."
APP_VERSION=2.0.0-beta2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential cmake libncursesw5-dev libgpm-dev gpm
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/vikonix/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
cmake -B _build -S .. && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Blink Qt-based GUI of indexed grep for source code, files locator, search and replace from AppImage
APP_NAME=Blink
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Qt-based GUI of indexed grep for source code, files locator, search and replace."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Search;"
APP_VERSION=1.7.4
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ychclone/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/ychclone/${APP_NAME,,}/master/blinkAppImage/usr/share/icons/hicolor/128x128/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install System Monitoring Center Python/Gtk system performance and usage monitoring tool from Debian package
# https://kod.pardus.org.tr/Hakan/system-monitoring-center
APP_NAME="System Monitoring Center"
APP_VERSION=2.25.1
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_EXT=deb
FILE_NAME=${_APP_NAME}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hakandundar34coding/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${_APP_NAME}*

# Install TutoTerm simple terminal emulator with interactive documentation for novice users from source
APP_NAME=TutoTerm
APP_GUI_NAME="Simple terminal emulator with interactive documentation for novice users."
APP_VERSION=0.7.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libglib2.0-dev libxml2-utils libxml2-dev libvte-2.91-dev libgtk-3-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.savannah.nongnu.org/releases/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install gron Golang-based cross-platform tool to make JSON searchable via grep from package
APP_NAME=gron
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based cross-platform tool to make JSON searchable via grep."
APP_VERSION=0.7.1
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/tomnomnom/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Shrink command-line URL shortener with support for variety of services from Debian package
APP_NAME=Shrink
APP_VERSION=1.0.0-beta
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION//-/_}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Lil-Nickel/${APP_NAME,,}/releases/download/linux/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${_APP_NAME}*

# Install Moosync Electron-based simple desktop music player from AppImage
APP_NAME=Moosync
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Electron-based simple desktop music player."
APP_GUI_CATEGORIES="Entertainment;Audio;Multimedia;"
APP_GUI_KEYWORDS="Audio;Player;"
APP_VERSION=11.0.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME}/${APP_NAME}/main/build/icons/512x512.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Readwarf minimalist web browser and RSS news aggregator from package
# https://www.readwarf.com:8888/
APP_NAME=Readwarf
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Minimalist web browser and RSS news aggregator."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="Browser;News;RSS;Aggregator;"
APP_VERSION=1.3.5
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/resources/app/img/logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install termscp Rust-based cross-platform, terminal/TUI file transfer and explorer tool with support for SCP/SFTP/FTP/S3 from package
APP_NAME=termscp
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based cross-platform, terminal/TUI file transfer and explorer tool with support for SCP/SFTP/FTP/S3."
APP_VERSION=0.16.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/veeso/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install limner Golang-based cross-platform command-line tool to colorize and transform output from package
APP_NAME=lm
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based cross-platform command-line tool to colorize and transform output."
APP_VERSION=0.2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/SignorMercurio/limner/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/bin/${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU) /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
sudo ln -s -f /usr/local/bin/${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU) /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Open Typer simple Qt-based typing tutor from AppImage
APP_NAME=Open-Typer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Simple Qt-based typing tutor."
APP_GUI_CATEGORIES="Accessories;Education;"
APP_GUI_KEYWORDS="Typing;Tutor;"
APP_VERSION=5.2.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://raw.githubusercontent.com/${APP_NAME}/${APP_NAME}/master/app/res/icons/icon.ico
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.ico /usr/local/share/icons/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Twin Textmode WINdow manager environment from Debian package
# https://github.com/cosmos72/twin
APP_NAME=Twin
APP_VERSION=0.9.0-0ubuntu1
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://launchpad.net/~eeickmeyer/+archive/ubuntu/${APP_NAME,,}/+files/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${_APP_NAME}*

# Install FreeNono cross-platform Java-based nonogram puzzle game from Debian package
# http://www.freenono.org/
APP_NAME=FreeNono
APP_VERSION=0.10.5
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${_APP_NAME}*

# Install Cinelerra GG Linux video editing and composition tool from AppImage
APP_NAME="Cinelerra GG"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Linux video editing and composition tool."
APP_GUI_CATEGORIES="Entertainment;Video;Multimedia;"
APP_GUI_KEYWORDS="Video;Editor;"
APP_VERSION=20250331
APP_EXT=AppImage
FILE_NAME=CinGG-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://${_APP_NAME}.org/download/images/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://www.cinelerra-gg.org/wp-content/uploads/2019/03/Cinfinity_logo_flat_black_200px.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install QHexEdit2 cross-platform Qt-based minimalist hex editor from source
APP_NAME=QHexEdit2
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Binary;Editor;"
APP_VERSION=0.8.9
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y qttools5-dev qtbase5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Simsys/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}*
mkdir -p build && cd build
qtchooser -run-tool=qmake -qt=5 /tmp/${FILE_NAME}/src/qhexedit.pro && sudo make
sudo rm -rf /tmp/${FILE_NAME}/build
qtchooser -run-tool=qmake -qt=5 /tmp/${FILE_NAME}/example/qhexedit.pro && make
sudo cp /tmp/${FILE_NAME}/example/qhexedit /usr/local/bin
sudo chmod +x /usr/local/bin/qhexedit
sudo cp /tmp/${FILE_NAME}/doc/html/qhexedit.png /usr/local/share/icons/qhexedit.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/qhexedit
Icon=/usr/local/share/icons/qhexedit.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install GitHub CLI official CLI tool from Debian package
APP_NAME=gh
APP_VERSION=2.35.0
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/cli/cli/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${_APP_NAME}*

# Install git-bug Golang-based cross-platform, terminal/TUI offline-first Git-based bug-tracking tool from package
APP_NAME=git-bug
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based cross-platform, terminal/TUI offline-first Git-based bug-tracking tool."
APP_VERSION=0.8.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/MichaelMure/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install littleutils collection of small and simple utilities from Debian package
APP_NAME=littleutils
APP_VERSION=1.2.5
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-\${i}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
collection=( base legacy imageutils )
for i in "${collection[@]}"
do
    curl -o /tmp/${APP_NAME,,}-${i}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU).${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${i}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU).${APP_EXT}
    sudo gdebi -n /tmp/${APP_NAME,,}-${i}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU).${APP_EXT}
done
collection=( docs recompressors )
for i in "${collection[@]}"
do
    curl -o /tmp/${APP_NAME,,}-${i}_${APP_VERSION}-1_all.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${APP_NAME,,}-${i}_${APP_VERSION}-1_all.${APP_EXT}
    sudo gdebi -n /tmp/${APP_NAME,,}-${i}_${APP_VERSION}-1_all.${APP_EXT}
done
cd $HOME
rm -rf /tmp/*${_APP_NAME}*

# Install Checkitgui Qt-based minimalist file integrity tool from Debian package
APP_NAME=Checkitgui
APP_VERSION=0.1.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install go-calc Golang-based cross-platform, terminal basic calculator from package
# https://github.com/pedroalbanese/calc
APP_NAME=go-calc
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.0.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install GoSC Golang-based cross-platform, terminal/TUI spreadsheet calculator with Vi/Vim keybindings from package
APP_NAME=GoSC
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.0.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Microsoft Edge cross-platform web browser (stable branch) from Debian package
APP_NAME="Microsoft Edge"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_VERSION=98.0.1108.43
APP_EXT=deb
FILE_NAME=${_APP_NAME}-stable_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://packages.microsoft.com/repos/edge/pool/main/m/${_APP_NAME}-stable/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install gping Rust-based cross-platform, terminal ping with graph of results from package
APP_NAME=gping
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based cross-platform, terminal ping with graph of results."
APP_VERSION=1.19.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-Linux-gnu-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Froxlor PHP-based web server management platform from package
APP_NAME=Froxlor
APP_GUI_CATEGORIES="System;Programming;Development;"
APP_GUI_KEYWORDS="Server;PHP;"
APP_VERSION=2.0.23
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
DB_NAME=${APP_NAME,,}
DB_NAME=${DB_NAME,,}
DB_USER=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,} ${WWW_HOME}
sudo chown -R www-data:www-data ${WWW_HOME}/${APP_NAME,,}
# Create database
mysql -u root -proot -Bse "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_unicode_ci;"
mysql -u root -proot -Bse "CREATE USER '${DB_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${DB_PASSWORD}';"
mysql -u root -proot -Bse "GRANT USAGE ON *.* TO '${DB_USER}'@'%'; GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%';"
mysql -u root -proot -Bse "FLUSH PRIVILEGES;"
xdg-open http://localhost/${APP_NAME,,}/
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=xdg-open http://localhost/${APP_NAME,,}/
Icon=${WWW_HOME}/froxlor/templates/Sparkle/assets/img/logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Rickrack Qt-based cross-platform color palette generator from package
APP_NAME=Rickrack
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Qt-based cross-platform color palette generator."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Color;Editor;"
APP_VERSION=2.9.10
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}_v${APP_VERSION}_en_linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
tar -xf /tmp/${FILE_NAME}.${APP_EXT} -C /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/Icon.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install NormCap cross-platform, Qt-based OCR powered screen-capture tool from AppImage
APP_NAME=NormCap
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Qt-based OCR powered screen-capture tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="OCR;Screen Capture;"
APP_VERSION=0.5.9
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dynobo/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/dynobo/${APP_NAME,,}/main/assets/icons/${APP_NAME,,}.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install TigerVNC cross-platform server and viewer remote access tool from Debian package
APP_NAME=TigerVNC
APP_VERSION=1.13.1-1ubuntu1
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_EXT=deb
FILE_NAME=N/A
collection=( xtigervncviewer tigervncserver tigervnc-java )
for i in "${collection[@]}"
do
    FILE_NAME=${i}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
    curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
    sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
done
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install hostscope multi-host Linux monitoring tool from source
APP_NAME=hostscope
APP_GUI_NAME="Multi-host Linux monitoring tool."
APP_VERSION=8.0
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-V${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install DbVisualizer cross-platform Java-based GUI database client from package
APP_NAME=DbVisualizer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Java-based GUI database client."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Database;JDBC;Client;"
APP_VERSION=14.0.2
APP_EXT=tar.gz
FILE_NAME=dbvis_linux_${APP_VERSION//./_}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://fossies.org/linux/misc/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/dbvisgui.sh &
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/resources/images/ix4/dbvis-icon128x128.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install btop++ minimalist command-line resource monitor tool from package
APP_NAME=btop
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Minimalist command-line resource monitor tool."
APP_VERSION=1.4.3
APP_EXT=tbz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/aristocratos/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo make install /usr/local
sudo make setuid /usr/local     # Allow btop to always run as root
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install reptyr Linux command-line tool to rehome a process from one shell to another from source
APP_NAME=reptyr
APP_GUI_NAME="Linux command-line tool to rehome a process from one shell to another."
APP_VERSION=0.8.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/nelhage/${APP_NAME,,}/archive/refs/tags/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/*${APP_NAME,,}*
make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Qhfs Qt-based simple HTTP/HTTPS file server from source
APP_NAME=Qhfs
APP_GUI_NAME="Qt-based simple HTTP/HTTPS file server."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="File;Sharing;"
APP_VERSION=4.0
APP_EXT=zip
FILE_NAME=${APP_NAME}${APP_VERSION}
sudo apt-get install -y build-essential cmake libssl-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
cmake CMakeLists.txt && make && make generate_translation && sudo make install
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${FILE_NAME}/Gui/Resources/Icons/${APP_NAME,,}1.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Pinta cross-platform drawing and image editing tool from Flatpak
# https://www.pinta-project.com/
# https://github.com/PintaProject/Pinta
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub com.github.PintaProject.Pinta

# Install Forward Only cross-platform Holocaust simulation real-time strategy game from package
APP_NAME="Forward Only"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Holocaust simulation real-time strategy game."
APP_GUI_CATEGORIES="Games;"
APP_GUI_KEYWORDS="History;Strategy;Simulator;"
APP_VERSION=0.91
APP_EXT=tar.gz
FILE_NAME=${APP_NAME// /_}_${APP_VERSION}_manylinux_x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}game/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/Forward*/* /opt/${_APP_NAME}
sudo chmod -R 777 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
"/opt/${_APP_NAME}/${APP_NAME}" &
cd $HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/teach_shots/locomotive1.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Git Interactive Rebase Tool command-line tool for performing interactive rebase in Git from Debian package
APP_NAME=git-interactive-rebase-tool
APP_VERSION=2.3.0
APP_EXT=deb
source /etc/lsb-release
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(xe|ya|ze|ar)$ ]]; then   # 16.04 - 17.10
    DISTRIB_RELEASE=16.04
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(bi|co|di|eo)$ ]]; then   # 18.04 - 19.10
	DISTRIB_RELEASE=18.04
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(fo|gr|hi|im)$ ]]; then
	DISTRIB_RELEASE=20.04
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(ja|ki|lu|ma)$ ]]; then
	DISTRIB_RELEASE=22.10
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-ubuntu-${DISTRIB_RELEASE}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/MitMaro/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Cal cross-platform Java-based terminal calendar from package
APP_NAME=Cal
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Java-based terminal calendar."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Calendar;Shell;"
APP_VERSION=2.7.6
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-fross/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod 666 /usr/local/bin/
cat > /tmp/${APP_NAME,,}j << EOF
#! /bin/sh
cd /usr/local/bin
PATH=/usr/local/bin:\$PATH; export PATH
java -jar /usr/local/bin/${FILE_NAME}.${APP_EXT} -n 4
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}j /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}j
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Netvisix Qt-based tool for visualization of network packet flow between hosts from Debian package
APP_NAME=Netvisix
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_VERSION=1.4.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_ubuntu-20.04
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bewue/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install XVI ncurses-based hex editor with Vim keybindings for Linux from AppImage
APP_NAME=XVI
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="ncurses-based hex editor with Vim keybindings for Linux."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Hex;Editor;"
APP_VERSION=1.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.0-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/artemsen/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/artemsen/${APP_NAME,,}/master/extra/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Podman Desktop Companion Electron-based desktop GUI for podman container manager from AppImage
APP_NAME="Podman Desktop Companion"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Electron-based desktop GUI for podman container manager."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Containers;"
APP_VERSION=4.1.0-rc.28
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/iongion/${_APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.svg -J -L https://raw.githubusercontent.com/iongion/${_APP_NAME}/main/docs/img/logo.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.svg /usr/local/share/icons/${_APP_NAME}.svg
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Erin Electron-based desktop wallpaper changer from AppImage
APP_NAME=Erin
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Electron-based desktop wallpaper changer."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Wallpaper;"
APP_VERSION=2.1.5
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/losbiw/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/losbiw/${APP_NAME,,}/master/assets/icons/512x512.png
echo "$PASSWORD" | sudo -S -k cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
echo "$PASSWORD" | sudo -S -k chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
echo "$PASSWORD" | sudo -S -k ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
echo "$PASSWORD" | sudo -S -k mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install QEFI Entry Manager Qt-based tool to set EFI entry to boot from on next system start from AppImage
APP_NAME="QEFI Entry Manager"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Qt-based tool to set EFI entry to boot from on next system start."
APP_GUI_CATEGORIES="System;"
APP_GUI_KEYWORDS="EFI;Boot;"
APP_VERSION=0.3.0
APP_EXT=AppImage
FILE_NAME=$(echo ${APP_NAME} | tr '[:blank:]' '_')_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)_${APP_EXT}
curl -o /tmp/${FILE_NAME}.zip -J -L https://github.com/Inokinoki/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.zip
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/Inokinoki/${_APP_NAME}/master/cc.inoki.qefientrymanager.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.zip
echo "$PASSWORD" | sudo -S -k cp /tmp/${FILE_NAME}/*$(dpkg-architecture --query DEB_BUILD_GNU_CPU).${APP_EXT} /usr/local/bin/${_APP_NAME}.${APP_EXT}
echo "$PASSWORD" | sudo -S -k chmod +x /usr/local/bin/${_APP_NAME}.${APP_EXT}
echo "$PASSWORD" | sudo -S -k ln -s -f /usr/local/bin/${_APP_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
echo "$PASSWORD" | sudo -S -k mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=echo "$PASSWORD" | sudo -S -k /usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}* /tmp/${FILE_NAME}*

# Install llama cross-platform terminal file manager from package
APP_NAME=llama
APP_GUI_NAME="Cross-platform terminal file manager."
APP_VERSION=1.2.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/antonmedv/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
echo "$PASSWORD" | sudo cp -R /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
echo "$PASSWORD" | sudo chmod +x /usr/local/bin/${APP_NAME,,}
echo 'function ll {' >> $HOME/.bashrc
echo '  cd "$(/usr/local/bin/'${APP_NAME,,}' "$@")"' >> $HOME/.bashrc
echo '}' >> $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install chmod-cli cross-platform interactive terminal/TUI tool for generating chmod configurations from package
APP_NAME=chmod-cli
APP_GUI_NAME="Cross-platform interactive terminal/TUI tool for generating chmod configurations."
APP_VERSION=0.2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Mayowa-Ojo/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
echo "$PASSWORD" | sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
echo "$PASSWORD" | sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install bottom cross-platform GUI terminal system monitor from package
APP_NAME=bottom
APP_GUI_NAME="Cross-platform GUI terminal system monitor."
APP_VERSION=0.10.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ClementTsang/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
echo "$PASSWORD" | sudo cp -R /tmp/${FILE_NAME}/btm /usr/local/bin/btm
echo "$PASSWORD" | sudo chmod +x /usr/local/bin/btm
echo "$PASSWORD" | sudo cp -R /tmp/${FILE_NAME}/completion/btm.bash /etc/bash_completion.d/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install GJID Sokoban-style nuclear waste disposal puzzle game from source
APP_NAME=GJID
APP_GUI_NAME="Sokoban-style nuclear waste disposal puzzle game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Sokoban;Puzzle;"
APP_VERSION=3.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libxcb1-dev libxcb-render0-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/msharov/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
sudo cp /tmp/${FILE_NAME}/data/logo.xpm /usr/local/share/icons/${APP_NAME,,}.xpm
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.xpm
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Nice Editor (ne) ncurses-based minimalist text editor from source
APP_NAME=ne
APP_GUI_NAME="ncurses-based minimalist text editor."
APP_VERSION=3.3.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libncursesw5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://ne.di.unimi.it/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make build && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install oslcrypt TCL-based GUI front-end to OpenSSL encryption methods from package
APP_NAME=oslcrypt
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="TCL-based GUI front-end to OpenSSL encryption methods."
APP_GUI_CATEGORIES="Internet;System;"
APP_GUI_KEYWORDS="Security;Encryption;"
APP_VERSION=2.19
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/${APP_NAME,,}-LINUX.appimage /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}-LINUX.appimage
sudo ln -s -f /usr/local/bin/${APP_NAME,,}-LINUX.appimage /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Potato Presenter presentation slide creation tool with LaTex and PDF export support from AppImage
APP_NAME="Potato Presenter"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Presentation slide creation tool with LaTex and PDF export support."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Presentation;LaTeX;Slides;"
APP_VERSION=1.0.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/thgier/${APP_NAME// /}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.svg -J -L https://raw.githubusercontent.com/thgier/${APP_NAME// /}/master/potato_logo.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.svg /usr/local/share/icons/${_APP_NAME}.svg
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME// /}*

# Install LibreWolf privacy-focused fork of Firefox web browser from AppImage
APP_NAME=LibreWolf
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Privacy-focused fork of Firefox web browser."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Web;Browser;Privacy;Firefox;"
APP_VERSION=115.0.2-2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}.$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.com/api/v4/projects/24386000/packages/generic/${APP_NAME,,}/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://gitlab.com/librewolf-community/branding/-/raw/master/icon/icon.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install MTR combination traceroute and ping from source
APP_NAME=MTR
APP_GUI_NAME="Combination traceroute and ping."
APP_VERSION=0.95
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.bitwizard.nl/${APP_NAME,,}/files/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install AppImagePool simple AppImageHub client from AppImage
APP_NAME=AppImagePool
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Simple AppImageHub client."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Installer;AppImage;"
APP_VERSION=4.9.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/prateekmedia/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/prateekmedia/${APP_NAME,,}/main/assets/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install yt-dlp youtube-dl fork with additional features and fixes from package
APP_NAME=yt-dlp
APP_GUI_NAME="youtube-dl fork with additional features and fixes."
APP_VERSION=2025.05.22
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install refmt Rust-based CLI JSON-YAML format conversion tool from package
APP_NAME=refmt
APP_GUI_NAME="Rust-based CLI JSON-YAML format conversion tool."
APP_VERSION=0.2.3-alpha
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/yoshihitoh/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install octfont compact bold font for X11 terminal windows from Debian package
APP_NAME=octfont
APP_VERSION=1.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Thorium Browser fork of Chromium browser with performance enhancements from Debian package
APP_NAME=Thorium
APP_GUI_NAME="Fork of Chromium browser with performance enhancements."
APP_VERSION=126.0.6478.231
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-browser_${APP_VERSION}_AVX
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Alex313031/${APP_NAME}/releases/download/M${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install OnlyOffice Community Server office and collaboration suite from Debian package
APP_NAME=OnlyOffice-CommunityServer
APP_VERSION=12.0.0.1726
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/teamlab/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install keynav keyboard pointer navigation tool from source
APP_NAME=keynav
APP_GUI_NAME="Keyboard pointer navigation tool."
APP_VERSION=master
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libcairo2-dev libxinerama-dev libxdo-dev libxrandr-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jordansissel/${APP_NAME,,}/archive/refs/heads/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Wizznic cross-platform Puzznic clone puzzle game from package
APP_NAME=Wizznic
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Puzznic clone puzzle game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Puzzle;"
APP_VERSION=400
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME}_lin_build_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/DusteDdk/${APP_NAME}/releases/download/1.1/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}_linux_x64_precompiled &
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/data/wmicon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Theoretical Diary Qt-based digital diary application from AppImage
APP_NAME="Theoretical Diary"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Qt-based digital diary application."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Diary;"
APP_VERSION=2.3.8
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /}-v${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/someretical/${APP_NAME// /}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/someretical/${APP_NAME// /}/master/images/linux_icons/256x256/${_APP_NAME}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME// /}* /tmp/${_APP_NAME}*

# Install Nurdle Java GUI Wordle clone and solver tool from package
APP_NAME=Nurdle
APP_GUI_NAME="Java GUI Wordle clone and solver tool."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Wordle;Puzzle;"
APP_VERSION=1.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}%20${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install JEasyDOS Java GUI front-end for DOSBox from package
APP_NAME=JEasyDOS
APP_GUI_NAME="Java GUI front-end for DOSBox."
APP_GUI_CATEGORIES="Games;System;"
APP_GUI_KEYWORDS="DOSBox;"
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/images/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install FlareRenamer bulk renamer and file name normalization tool from Debian package
APP_NAME=FlareRenamer
APP_VERSION=0.0.21
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-0ubuntu1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PanWriter Markdown editor with pandoc integration and paginated preview from AppImage
APP_NAME=PanWriter
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Markdown editor with pandoc integration and paginated preview."
APP_GUI_CATEGORIES="Office;"
APP_GUI_KEYWORDS="Markdown;Editor;"
APP_VERSION=0.8.8
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mb21/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/mb21/${APP_NAME,,}/master/icons/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install MZ-800 SDL-based emulator for Sharp MZ-800 computer from package
APP_NAME="MZ-800"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '-')
APP_GUI_NAME="SDL-based emulator for Sharp MZ-800 computer."
APP_GUI_CATEGORIES="Games;Development;Programming;"
APP_GUI_KEYWORDS="Retro;Emulator;"
APP_VERSION=1.0.7
APP_EXT=tgz
FILE_NAME=${_APP_NAME}emu-${APP_VERSION}-linux-64bit-bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}emu/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
sudo chmod 777 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
/opt/${_APP_NAME}/${_APP_NAME}emu &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${APP_NAME}
Icon=/opt/${_APP_NAME}/ui_resources/${_APP_NAME}emu_logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install Sparkle Todo Golang-based command-line to do tool from Debian package
APP_NAME=Sparkle-Todo
APP_VERSION=0.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hiteshhedwig/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install FileHashler Java console cross-platform file encryption and archiving utility from package
APP_NAME=FileHashler
APP_GUI_NAME="Java console cross-platform file encryption and archiving utility."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Archive;Encryption;"
APP_VERSION=0.3.0
APP_EXT=jar
FILE_NAME=fhl-${APP_VERSION//./-}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
java -jar /usr/local/bin/${FILE_NAME}.${APP_EXT} "$@" &
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}

# Install Papr cross-platform desktop wallpaper search and changer utility from package
APP_NAME=Papr
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform desktop wallpaper search and changer utility."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Wallpaper;"
APP_VERSION=1.0.3
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME}_${APP_VERSION}_linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/package.nw/default_icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install UnixTree XTree-style console file manager from Debian package
APP_NAME=UnixTree
APP_VERSION=3.0.3
APP_EXT=deb
FILE_NAME=${APP_NAME}-${APP_VERSION}-1_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install 1History Rust-based cross-platform multi-browser history backup/consolidation tool from package
APP_NAME=1History
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based cross-platform multi-browser history backup/consolidation tool."
APP_VERSION=0.2.0
APP_EXT=zip
FILE_NAME=${APP_NAME}_v${APP_VERSION}_x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/onehistory /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install punktf Rust-based cross-platform multi-target dotfiles manager from package
APP_NAME=punktf
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based cross-platform multi-target dotfiles manager."
APP_VERSION=1.0.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Shemnei/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install far2l Linux port/fork of Windows Far Manager file manager from source
APP_NAME=far2l
APP_GUI_NAME="Linux port/fork of Windows Far Manager file manager."
APP_VERSION=v_2.4.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y gawk m4 libwxgtk3.0-gtk3-dev libx11-dev libxi-dev libpcre3-dev libxerces-c-dev libspdlog-dev libuchardet-dev libssh-dev libssl-dev libsmbclient-dev libnfs-dev libneon27-dev libarchive-dev cmake g++
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/elfmz/${APP_NAME,,}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p build && cd build
cmake -DUSEWX=yes -DPYTHON=yes -DCALC=yes -DCOLORER=yes -DCOMPARE=yes -DDRAWLINE=yes -DEDITORCOMP=yes -DFARFTP=yes -DINCSRCH=yes -DNETROCKS=yes -DSIMPLEINDENT=yes -DCMAKE_BUILD_TYPE=Release .. && make -j$(nproc --all) && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Pooter cross-platform Java-based PIM with support for plugins from package
APP_NAME=Pooter
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Java-based PIM with support for plugins."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="PIM;Productivity;"
APP_VERSION=5.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo tar -xvf /tmp/${FILE_NAME}.${APP_EXT} -C /
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
PATH=/usr/local/${APP_NAME}:\$PATH; export PATH
java -jar /usr/local/${APP_NAME}/${APP_NAME}.jar &
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Word Guess command-line Wordle clone with multiple word length support from package
APP_NAME=Word-Guess
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Command-line Wordle clone with multiple word length support."
APP_VERSION=1.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME} -J -L https://github.com/ludovicianul/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${FILE_NAME}
sudo chmod a+x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/wg
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install dvt command-line multi-purpose/function development tools utility from package
APP_NAME=dvt
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Command-line multi-purpose/function development tools utility."
APP_VERSION=1.0.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME} -J -L https://github.com/ludovicianul/${APP_NAME,,}/releases/download/${APP_NAME,,}-${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${FILE_NAME}
sudo chmod a+x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
dvt generate-completion >> ~/.config/dvt_autocomplete
echo 'source $HOME/.config/dvt_autocomplete' >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Git-It cross-platform Electron-based GUI tool for learning Git and Github from package
# https://github.com/jlord/git-it-electron/
APP_NAME=Git-It
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based GUI tool for learning Git and Github."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Git;Github;"
APP_VERSION=4.4.0
APP_EXT=zip
FILE_NAME=${APP_NAME//I/i}-Linux-x64
sudo apt install -y libgconf-2-4
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME//I/i}*/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME//I/i} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/resources/app/assets/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Gitty Golang-based command-line Git project summary tool from Debian package
APP_NAME=Gitty
APP_VERSION=0.7.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/muesli/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Atlas Golang-based command-line multi-database management tool from package
# https://github.com/ariga/atlas
APP_NAME=Atlas
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based command-line multi-database management tool."
APP_VERSION=0.3.3
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-amd64-v${APP_VERSION}
curl -o /tmp/${FILE_NAME} -J -L https://release.ariga.io/atlas/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${FILE_NAME}
sudo chmod a+x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Numara Electron-based notepad-style calculator from AppImage
APP_NAME=Numara
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Electron-based notepad-style calculator."
APP_GUI_CATEGORIES="Accessories;Science;Education;"
APP_GUI_KEYWORDS="Calculator;"
APP_VERSION=6.0.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bornova/${APP_NAME,,}-calculator/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/bornova/${APP_NAME,,}-calculator/master/src/assets/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Antares Electron-based cross-platform, multi-database (MySQL/PostgreSQL/SQLite) SQL database client from AppImage
APP_NAME=Antares
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Electron-based cross-platform, multi-database (MySQL/PostgreSQL/SQLite) SQL database client."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Database;SQL;"
APP_VERSION=0.7.16
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}-sql/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}-sql/${APP_NAME,,}/master/assets/appx/StoreLogo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Photo-Manager Java-based photo/image editor and manager from Debian package
APP_NAME=Photo-Manager
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java-based photo/image editor and manager."
APP_VERSION=1.1
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/dj-${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install JImage Compressor tiny Java GUI image compressor from package
APP_NAME="JImage Compressor"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Tiny Java GUI image compressor."
APP_GUI_CATEGORIES="Graphics;Accessories;"
APP_GUI_KEYWORDS="Compressor;Graphics;"
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME// /%20}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/p/jimagecompressor/icon?1644503172
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/JImage*/* /opt/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
java -jar /opt/${_APP_NAME}/"${APP_NAME}".jar &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME// /%20}* /tmp/${_APP_NAME}*

# Install Molasses cross-platform Gopher and Gemini browser from package
APP_NAME=Molasses
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Gopher and Gemini browser."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Gopher;Gemini;Browser;"
APP_VERSION=0.6.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jjsimpso/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION} /usr
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=
Exec=/usr/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Rabbit Remote Control cross-platform remote control tool with support for VNC, RDP, SSH, Telnet, etc. from Debian package
APP_NAME="Rabbit Remote Control"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform remote control tool with support for VNC, RDP, SSH, Telnet, etc."
APP_VERSION=0.0.35
APP_EXT=deb
FILE_NAME=${_APP_NAME}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install BitLogic Java computer algebra calculator from package
APP_NAME=BitLogic
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java computer algebra calculator."
APP_GUI_CATEGORIES="Science;Education;Accessories;"
APP_GUI_KEYWORDS="Calculator;Math;"
APP_VERSION=1.7.6
APP_EXT=zip
FILE_NAME=${APP_NAME//B/b}Arch_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/bitlogic/icon?51b9899c4a7194247f2845c2791f49c9680d6133d4f1328504ab5bc4ef714b54
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME//B/b}Arch/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME//B/b}*

# Install Min fast, minimal web browser focused on privacy/security from Debian package
APP_NAME=Min
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Fast, minimal web browser focused on privacy/security."
APP_VERSION=1.35.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Squoosh cross-platform tool to optimize, resize, compress and convert images from AppImage
APP_NAME=Squoosh
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform tool to optimize, resize, compress and convert images."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Graphics;"
APP_VERSION=1.0.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}%20Desktop%20${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-desktop-app/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://squoosh-desktop.vercel.app/static/img/logo-1024x1024.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Redictionary offline Chinese-English dictionary supporting mdict format from Debian package
APP_NAME=Redictionary
APP_VERSION=0.3.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/planetoryd/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Cerebro cross-platform desktop search and indexing tool from AppImage
APP_NAME=Cerebro
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform desktop search and indexing tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Search;Indexing;"
APP_VERSION=0.11.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/${APP_NAME,,}/icon?1645074547
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install PDF Tinkerer Java PDF editor from package
APP_NAME=PDF-Tinkerer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java PDF editor."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="PDF;Editor;"
APP_VERSION=11
APP_EXT=jar
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Block Attack cross-platform clone of Tetris Attack arcade puzzle game from package
APP_NAME="Block Attack"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform clone of Tetris Attack arcade puzzle game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Puzzle;Arcade;"
APP_VERSION=2.8.0
APP_EXT=tar.bz2
FILE_NAME=${_APP_NAME}-linux-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
sudo chmod -R 777 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
/opt/${_APP_NAME}/${_APP_NAME} &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/icons/${_APP_NAME}128.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install 86Box low-level x86 emulator for 8086 up to Pentium processors from AppImage
APP_NAME=86Box
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Low-level x86 emulator for 8086 up to Pentium processors."
APP_GUI_CATEGORIES="Programming;Development;System"
APP_GUI_KEYWORDS="Emulator;"
APP_VERSION=4.2.1
APP_BUILD=b6130
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-Linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-${APP_BUILD}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME}/${APP_NAME}/master/src/win/assets/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Notebook cross-platform, Qt-based tabbed notepad and editor from Debian package
APP_NAME=Notebook
APP_VERSION=1.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.com/piotrintes/notebook/-/raw/master/release/x64/install/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install App Outlet universal application store with support for AppImage, FlatPak, and Snaps from package
APP_NAME="App Outlet"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Universal application store with support for AppImage, FlatPak, and Snaps."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Package;"
APP_VERSION=2.1.0
APP_EXT=tar.gz
FILE_NAME=${_APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${_APP_NAME}/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/${_APP_NAME}/${_APP_NAME}/main/src/assets/icon/icon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
sudo cp /tmp/${_APP_NAME}.png /opt/${_APP_NAME}
sudo chmod -R 777 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
/opt/${_APP_NAME}/${_APP_NAME} &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install qTox cross-platform, multi-mode, peer-to-peer messenger tool from AppImage
APP_NAME=qTox
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, multi-mode, peer-to-peer messenger tool."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Messenger;P2P;"
APP_VERSION=1.17.6
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-v${APP_VERSION}.x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME}/${APP_NAME}/master/img/icons/128x128/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Code Master cross-platform, Java-based Mastermind game from package
APP_NAME="Code Master"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '_')
APP_GUI_NAME="Cross-platform, Java-based Mastermind game."
APP_GUI_CATEGORIES="Games;"
APP_GUI_KEYWORDS="Puzzle;Mastermind;"
APP_VERSION=3.2.2
APP_EXT=zip
FILE_NAME=${_APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME//_/-}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
sudo chmod -R 777 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME//_/-} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
java -jar /opt/${_APP_NAME}/${_APP_NAME//_/}.jar $* &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME//_/-} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME//_/-}
cat > /tmp/${_APP_NAME//_/-}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME//_/-}
Icon=/opt/code_master/src/codemaster/ui/images/${_APP_NAME//_/}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME//_/-}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME//_/-}* /tmp/${_APP_NAME}*

# Install FontForge cross-platform GUI font editor and converter from AppImage
APP_NAME=FontForge
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform GUI font editor and converter."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Font;Typography;Editor;"
APP_VERSION=2023-01-01-a1dad3e
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://fontforge.org/assets/img/logo-transparent.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Simple Wallpaper Changer cross-platform, Electron-based desktop wallpaper manager from package
APP_NAME="Simple Wallpaper Changer"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Electron-based desktop wallpaper manager."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Wallpaper;"
APP_VERSION=1.1.5
APP_EXT=zip
FILE_NAME=linux_zip-${_APP_NAME}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}/${_APP_NAME}*/* /opt/${_APP_NAME}
sudo chmod -R 777 /opt/${_APP_NAME}
sudo ln -s -f /opt/${_APP_NAME}/${_APP_NAME} /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/resources/app/src/assets/logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME//_/-}* /tmp/${_APP_NAME}*

# Install Mailspring cross-platform, fast, lean e-mail client from Debian package
APP_NAME=Mailspring
APP_VERSION=1.10.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Macchina Rust-based command-line system information tool from package
APP_NAME=Macchina
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based command-line system information tool."
APP_VERSION=6.4.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/${APP_NAME}-CLI/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${FILE_NAME}
sudo chmod a+x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Tomato Timer Rust-based command-line Pomodoro timer with notifications from package
APP_NAME="Tomato Timer"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Rust-based command-line Pomodoro timer with notifications."
APP_VERSION=0.4.0
APP_EXT=tar.gz
FILE_NAME=${_APP_NAME}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sigoden/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Ebook Creator Python/Qt GUI editor for creating ebooks from Markdown from Debian package
# https://ebc.crowdware.at/
# https://bitbucket.org/artanidos/ebookcreator/src/master/
APP_NAME="Ebook Creator"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.3.3
APP_EXT=deb
FILE_NAME=${_APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/CrowdWare/ebc/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install mrViewer cross-platform image viewer and audio/video player from Debian package
APP_NAME=mrViewer
APP_VERSION=6.2.3
APP_EXT=deb
FILE_NAME=${APP_NAME}-v${APP_VERSION}-Linux-64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Lapce Rust-based cross-platform fast text editor from package
# https://lapce.dev/
APP_NAME=Lapce
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Rust-based cross-platform fast text editor."
APP_GUI_CATEGORIES="Programming;Development;Accessories;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=0.4.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/master/extra/images/logo.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Flying Carpet cross-platform GUI for file transfer over ad hoc networking from AppImage
APP_NAME="Flying Carpet"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform GUI for file transfer over ad hoc networking."
APP_GUI_CATEGORIES="Internet;Accessories;System;"
APP_GUI_KEYWORDS="File;Transfer;"
APP_VERSION=8.0.1
APP_EXT=AppImage
FILE_NAME=linux_${_APP_NAME}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/spieglt/${_APP_NAME//-/}/releases/download/v${APP_VERSION//.0/}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L  https://raw.githubusercontent.com/spieglt/${_APP_NAME//-/}/main/${APP_NAME// /%20}/src-tauri/icons/128x128.png
mv /tmp/${FILE_NAME}.${APP_EXT} /tmp/${FILE_NAME//linux_/}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME//linux_/}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME//linux_/}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME//linux_/}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install aretext Golang-based command-line minimalist text editor with Vim keybindings from package
APP_NAME=aretext
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line minimalist text editor with Vim keybindings."
APP_VERSION=1.4.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install Speek cross-platform P2P secure messenger from AppImage
APP_NAME=Speek
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform P2P secure messenger."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Chat;Messenger;"
APP_VERSION=1.6.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}.Chat-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}-App/${APP_NAME}/releases/download/v${APP_VERSION}-release/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME}-App/${APP_NAME}/main/src/tego_ui/icons/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install LiteMessage Java lightweight P2P GUI messenger from package
APP_NAME=LiteMessage
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java lightweight P2P GUI messenger."
APP_GUI_CATEGORIES="Network;System;"
APP_GUI_KEYWORDS="Messenger;Chat;"
APP_VERSION=0.3.2
APP_EXT=zip
FILE_NAME=${APP_NAME}%20${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/lite-message/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME}GUI.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Nala front-end for Debian/Ubuntu apt package manager from Debian package
APP_NAME=Nala
APP_VERSION=0.15.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://deb.volian.org/volian/pool/main/n/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install LucaMail cross-platform Electron-based desktop email client from AppImage
APP_NAME=LucaMail
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based desktop email client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Email;"
APP_VERSION=0.0.3-beta
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/raghavyuva/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/raghavyuva/${APP_NAME}/master/src/icons/png/256x256.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Ward Java lightweight GUI system monitoring tool from package
APP_NAME=Ward
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java lightweight GUI system monitoring tool."
APP_GUI_CATEGORIES="System;"
APP_GUI_KEYWORDS="Monitoring;"
APP_VERSION=2.5.4
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/AntonyLeons/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://raw.githubusercontent.com/AntonyLeons//${APP_NAME}/main/src/main/resources/static/img/ico/favicon.ico
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}* /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
WARD_NAME=localhost
WARD_THEME=light
WARD_PORT=4000
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
xdg-open http://localhost:4000/
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Ruffle Rust-based command-line Adobe Flash Player emulator from package
APP_NAME=Ruffle
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Rust-based command-line Adobe Flash Player emulator."
APP_VERSION=nightly-2022_03_23
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}-rs/${APP_NAME,,}/releases/download/${APP_VERSION//_/-}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install warpd modal X/Windows keyboard driven interface for cursor manipulation from source
APP_NAME=warpd
APP_GUI_NAME="Modal X/Windows keyboard driven interface for cursor manipulation."
APP_VERSION=v1.3.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y libxi-dev libxinerama-dev libxft-dev libxfixes-dev libxtst-dev libx11-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rvaiya/${APP_NAME,,}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}*
make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Cine Encoder media file converter front-end for FFmpeg, MKVToolNix and MediaInfo from Debian package
APP_NAME="Cine Encoder"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_VERSION=3.5.5
APP_EXT=deb
FILE_NAME=${_APP_NAME}-${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME// /}/${_APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Apostrophe GTK distraction-free Markdown editor from Flatpak
# https://gitlab.gnome.org/World/apostrophe
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub org.gnome.gitlab.somas.Apostrophe

# Install PsTube cross-platform YouTube client from AppImage
APP_NAME=PsTube
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based desktop email client."
APP_GUI_CATEGORIES="Internet;Multimedia"
APP_GUI_KEYWORDS="YouTube;Video;"
APP_VERSION=2.6.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-linux-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/prateekmedia/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/prateekmedia/${APP_NAME,,}/main/assets/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Fhex lightweight, full-featured Qt-based hex editor from package
APP_NAME=Fhex
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Lightweight, full-featured Qt-based hex editor."
APP_GUI_CATEGORIES="Development;Programming;System;"
APP_GUI_KEYWORDS="Hex;Editor;"
APP_VERSION=3.0.5
APP_EXT=bz2
FILE_NAME=${APP_NAME}_${APP_VERSION}_Linux_x64_Qt5.9.6_static_libs
sudo apt install -y libqt5charts5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/echo-devim/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/echo-devim/${APP_NAME,,}/master/icon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Desktopify command-line AppImage installation tool from package
APP_NAME=Desktopify
APP_GUI_NAME="Command-line AppImage installation tool."
APP_VERSION=1.0
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Tulip cross-platform relational data visualization tool from AppImage
APP_NAME=Tulip
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform relational data visualization tool."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Data;Database;Visualization;"
APP_VERSION=5.6.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/auber/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/auber/icon?1558703166
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Notepad Next cross-platform Qt-based re-implementation of Notepad++ text editor from AppImage
APP_NAME="Notepad Next"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Qt-based re-implementation of Notepad++ text editor."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Editor;Notepad;"
APP_VERSION=0.11
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dail8859/${APP_NAME// /}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.svg -J -L https://raw.githubusercontent.com/dail8859/${APP_NAME// /}/master/icon/${APP_NAME// /}.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.svg /usr/local/share/icons/${_APP_NAME}.svg
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME// /}* /tmp/${_APP_NAME}*

# Install JMusicPlayer Java lightweight GUI music player from package
APP_NAME=JMusicPlayer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java lightweight GUI music player."
APP_GUI_CATEGORIES="Multimedia;Audio;"
APP_GUI_KEYWORDS="Music;Player;Audio;"
APP_VERSION=2025-05-07
APP_EXT=7z
FILE_NAME=${APP_VERSION//-/}.${APP_NAME}.v1.0
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}2/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}/_binary:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/_binary/${APP_NAME,,}-main-v1.0-SNAPSHOT-all.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/_source/apps/music/player/v1.0/JMusicPlayer/src/main/resources/com/frojasg1/applications/jmusicplayer/resources/play.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Geeqie GTK-based image viewer and organizer from AppImage
APP_NAME=Geeqie
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="GTK-based image viewer and organizer."
APP_GUI_CATEGORIES="Accessories;Graphics;Multimedia;"
APP_GUI_KEYWORDS="Viewer;"
APP_VERSION=1.7.1+20220117
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://cclark.uk/${APP_NAME}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/BestImageViewer/${APP_NAME,,}/master/src/icons/gqview_icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install era clock/stopwatch with rainy theme for terminal from package
APP_NAME=era
APP_GUI_NAME="Clock/stopwatch with rainy theme for terminal."
APP_VERSION=0.1.3
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kyoheiu/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}* /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Whinny Rust-based command-line minimalist system information tool from package
APP_NAME=Whinny
APP_GUI_NAME="Rust-based command-line minimalist system information tool."
APP_VERSION=1.0.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}.unix.executable
curl -o /tmp/${FILE_NAME} -J -L https://github.com/dankthropod/${APP_NAME,,}/releases/download/v1.0.0/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install AAAAXY Golang-based 2D jump-and-run puzzle platformer game from AppImage
APP_NAME=AAAAXY
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based 2D jump-and-run puzzle platformer game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Puzzle;Arcade;"
APP_VERSION=1.5.250
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/divVerent/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/divVerent/${APP_NAME,,}/main/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install ToDoRust Rust-based simple To Do task manager from AppImage
APP_NAME=ToDoRust
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based simple To Do task manager."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="ToDo;Productivity;"
APP_VERSION=0.2.0
APP_EXT=AppImage
FILE_NAME=to-do-rust_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/gustavo-tomas/${APP_NAME}/releases/download/app-v0.2.0/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/gustavo-tomas/${APP_NAME}/master/src-tauri/icons/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install hexedit simple command-line hex viewer and editor from source
# https://github.com/pixel/hexedit
APP_NAME=hexedit
APP_GUI_NAME="Simple command-line hex viewer and editor."
APP_VERSION=1.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential autoconf libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://fossies.org/linux/misc/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./autogen.sh && ./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Photo Viewer minimalist imager viewer with resizing and color effects support from AppImage
APP_NAME="Photo Viewer"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Minimalist imager viewer with resizing and color effects support."
APP_GUI_CATEGORIES="Graphics;Accessories;"
APP_GUI_KEYWORDS="Viewer;"
APP_VERSION=0.2.0
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Tenpi/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/Tenpi/${_APP_NAME}/master/assets/icons/logo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME,,}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}* /tmp/${_APP_NAME,,}*

# Install ModernDeck cross-platform Electron-based desktop Twitter client from AppImage
APP_NAME=ModernDeck
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based desktop Twitter client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Twitter;Microblogging;"
APP_VERSION=10.0.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dangeredwolf/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://raw.githubusercontent.com/dangeredwolf/${APP_NAME}/master/build/icons/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME}.png /usr/local/share/icons/${APP_NAME}.png
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install systeroid Rust-based command-line alternative to sysctl from package
APP_NAME=systeroid
APP_GUI_NAME="Rust-based command-line alternative to sysctl."
APP_VERSION=0.4.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/orhun/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/${APP_NAME,,}* /usr/local/bin
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/man8/* /usr/share/man/man8
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install StackAndConquer tower conquest board game from PPA
# https://github.com/ElTh0r0/stackandconquer
sudo add-apt-repository -y ppa:elthoro/stackandconquer
sudo apt update -y
sudo apt install -y stackandconquer

# Install Red Panda cross-platform lightweight C/C++ IDE from Debian package
APP_NAME="Red Panda"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=2.25
APP_EXT=deb
FILE_NAME=${_APP_NAME}-cpp_${APP_VERSION}-1_amd64_ubuntu20.04
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}-cpp/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install SQLite Micro Manager cross-platform GUI SQLite client from Debian package
APP_NAME="SQLite Micro Manager"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=0.6.0.84
APP_EXT=deb
FILE_NAME=sqlmm-qt5_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/sqlmm/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Webman Golang-based command-line package manager from package
APP_NAME=Webman
APP_GUI_NAME="Golang-based command-line package manager."
APP_VERSION=0.9.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/candrewlee14/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Cointop Golang-based command-line cryptocurrency monitoring tool from package
APP_NAME=Cointop
APP_GUI_NAME="Golang-based command-line cryptocurrency monitoring tool."
APP_VERSION=1.6.10
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}-sh/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Karnaugh Map Solver Java GUI K-Map solver tool from package
APP_NAME=KMap
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java GUI K-Map solver tool."
APP_GUI_CATEGORIES="Programming;Electronics;"
APP_GUI_KEYWORDS="K-Map;"
APP_VERSION=1.0.2
APP_EXT=jar
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/karnaugh-map-solver/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/karnaugh-map-solver/icon?f908b425c3c76f672ef1588ec7c68199f540e8a194201387089ec3f92a35067a
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}.${APP_EXT}  /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=Karnaugh Map Solver
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install JetUML Java lightweight desktop GUI UML model editing tool from package
APP_NAME=JetUML
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java lightweight desktop GUI UML model editing tool."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="UML;Editor;Modeling;"
APP_VERSION=3.6
APP_EXT=jar
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/prmr/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/prmr/${APP_NAME}/master/icons/jet.png
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp /tmp/${FILE_NAME}.${APP_EXT}  /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Monotty Desktopio terminal multiplexer with window manager and session sharing from package
APP_NAME=VTM
APP_GUI_NAME="Terminal multiplexer with window manager and session sharing."
APP_VERSION=0.9.9u
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/netxs-group/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Request minimal HTTP GUI client for REST API development and testing from AppImage
APP_NAME=Request
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Minimal HTTP GUI client for REST API development and testing."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="REST;API;Testing;"
APP_VERSION=1.1.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/aiocat/${APP_NAME}/releases/download/${APP_NAME,,}-v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://raw.githubusercontent.com/aiocat/${APP_NAME,,}/main/public/logo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME}.png /usr/local/share/icons/${APP_NAME}.png
cat > /tmp/${APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Pryrite interactive console REPL/debugger for Markdown files from package
APP_NAME=Pryrite
APP_GUI_NAME="Interactive console REPL/debugger for Markdown files."
APP_VERSION=0.10.20
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/1xyz/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install DrawIO Electron-based desktop diagramming and whiteboarding tool from AppImage
APP_NAME=DrawIO
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Electron-based desktop diagramming and whiteboarding tool."
APP_GUI_CATEGORIES="Office;Programming;Development;"
APP_GUI_KEYWORDS="Diagramming;Drawing;"
APP_VERSION=27.0.9
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-desktop.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/jgraph/${APP_NAME,,}-desktop/dev/build/256x256.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install RESP.app (formerly RedisDesktopManager) cross-platform, Qt-based GUI management tool for Redis from Flatpak
# https://github.com/uglide/RedisDesktopManager
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub app.resp.RESP

# Install NoteBot Java lightweight sticky note tool from package
# https://github.com/adolfintel/NoteBot
APP_NAME=NoteBot
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java lightweight sticky note tool."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Notepad;"
APP_VERSION=1.6
APP_EXT=7z
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.fdossena.com/Projects/StickyNotes/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/adolfintel/${APP_NAME}/master/StickyNotes/src/com/dosse/stickynotes/icon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/*  /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/StickyNotes.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Bodacious Flutter-based music player from AppImage
APP_NAME=Bodacious
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Flutter-based music player."
APP_GUI_CATEGORIES="Audio;Multimedia;"
APP_GUI_KEYWORDS="Music;Player;"
APP_VERSION=0.9.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bleonard252/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/bleonard252/${APP_NAME,,}/main/assets/brand/ic_launcher.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Jack-The-Cutter Java lossless audio file cutting tool from package
APP_NAME=Jack-The-Cutter
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java lossless audio file cutting tool."
APP_GUI_CATEGORIES="Audio;Entertainment;Multimedia;"
APP_GUI_KEYWORDS="Audio;Editor;"
APP_VERSION=0.3.1
APP_EXT=jar
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/jack-the-cutter/icon?a19017724febd8552e2230b86bc7f47ab8e4385685f5ea9dc48399d97c6e118f
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}.${APP_EXT}  /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Lazydocker Golang-based terminal UI for Docker and Docker Compose from package
APP_NAME=Lazydocker
APP_GUI_NAME="Golang-based terminal UI for Docker and Docker Compose."
APP_VERSION=0.24.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jesseduffield/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Converse Desktop Jabber/XMPP desktop client based on Converse.js and Electron from package
APP_NAME="Converse Desktop"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '_')
APP_GUI_NAME="Jabber/XMPP desktop client based on Converse.js and Electron."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="Messenger;Jabber;XMPP;"
APP_VERSION=10.1.5
APP_EXT=tar.gz
FILE_NAME=${_APP_NAME}-${APP_VERSION}_x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/conversejs/${_APP_NAME//_/-}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/conversejs/${_APP_NAME//_/-}/master/resources/images/icon-48x48.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R -a /tmp/${FILE_NAME}/*  /opt/${_APP_NAME}
sudo cp /tmp/${_APP_NAME}.png /opt/${_APP_NAME}
# sudo chmod -R 777 /opt/${_APP_NAME}
sudo ln -s -f /opt/${_APP_NAME}/"@${_APP_NAME//_/}" /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install termdbms Golang-based terminal UI client for SQLite DBs and CSV files from package
APP_NAME=termdbms
APP_GUI_NAME="Golang-based terminal UI client for SQLite DBs and CSV files."
APP_VERSION=0.9-alpha
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_linux_x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mathaou/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/build/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Dice Endgames cross-platform games with dice from package
APP_NAME=dicend
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform games with dice."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Dice;Games;"
APP_VERSION=1.5
APP_EXT=7z
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=l64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=l32
fi
FILE_NAME=${APP_NAME//nd/}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?1652285204
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R -a /tmp/${FILE_NAME}/${APP_NAME,,}.run  /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}.run
sudo ln -s -f /usr/local/bin/${APP_NAME,,}.run /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME,,//nd/}*

# Install JBoardGames Java board games package from package
APP_NAME=JBoardGames
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java board games package."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Games;Chess;"
APP_VERSION=1.0.2
APP_EXT=jar
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?1652532066
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}.${APP_EXT}  /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -Xms128m -Xmx1024m -classpath ${FILE_NAME}.${APP_EXT}  com.chess.main.ChessFrame &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install grex Rust-based command-line tool and library for generating regular expressions from user-provided test cases from package
APP_NAME=grex
APP_GUI_NAME="Rust-based command-line tool and library for generating regular expressions from user-provided test cases."
APP_VERSION=1.4.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/pemistahl/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Basic Numerical Methods GUI tool for demonstrating common numerical methods for engineering from AppImage
APP_NAME=Basic-Numerical-Methods
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '-' '_')
APP_GUI_NAME="GUI tool for demonstrating common numerical methods for engineering."
APP_GUI_CATEGORIES="Math;Engineering;"
APP_GUI_KEYWORDS="Math;Engineering;"
APP_VERSION=3.0.17
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/basic-numerical-methods/icon?062ee29e8cadddee685aa432ef8e8e31af939cd4d2982f52ed35a3fce524c443
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Asbru Connection Manager GUI tool for managing remote terminal sessions and automation from AppImage
APP_NAME=Asbru-CM
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '-' '_')
APP_GUI_NAME="GUI tool for managing remote terminal sessions and automation."
APP_GUI_CATEGORIES="Internet;System;"
APP_GUI_KEYWORDS="SSH;Shell;Automation;"
APP_VERSION=6.4.0-1
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION//-2/}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/master/res/asbru-logo-256.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install httplab Golang-based command-line interactive web/HTTP server that allows inspection of HTTP requests and editing of responses from package
APP_NAME=httplab
APP_GUI_NAME="Golang-based command-line interactive web/HTTP server that allows inspection of HTTP requests and editing of responses."
APP_VERSION=0.4.0
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=amd64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=386
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}s.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install fq Golang-based command-line tool for working with binary data (media, packet captures, etc.) similar to jq from package
APP_NAME=fq
APP_GUI_NAME="fq Golang-based command-line tool for working with binary data (media, packet captures, etc.) similar to jq."
APP_VERSION=0.15.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-tool.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install dstask Golang-based command-line task manager with Git integration and Markdown support from package
APP_NAME=dstask
APP_GUI_NAME="Golang-based command-line task manager with Git integration and Markdown support."
APP_VERSION=0.26
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/naggie/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Gophie Java-based cross-platform Gopher client from package
APP_NAME=Gophie
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java-based cross-platform Gopher client."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="Gopher;"
APP_VERSION=1.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}-Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jankammerath/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/jankammerath/${APP_NAME,,}/master/res/icon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R -a /tmp/${FILE_NAME}/${APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME}
sudo ln -s -f /usr/local/bin/${APP_NAME} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install mle simple console text editor from source
APP_NAME=mle
APP_GUI_NAME="Simple console text editor."
APP_VERSION=1.5.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential libpcre3-dev liblua5.3-dev libtermbox-dev uthash-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/adsr/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install radio-cli Rust-based command-line Internet radio client with YouTube support from package
APP_NAME=radio-cli
APP_GUI_NAME="Rust-based command-line Internet radio client with YouTube support."
APP_VERSION=2.1.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64
sudo apt install -y mpv yt-dlp
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/margual56/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install transfer.sh Golang-based command-line simple and fast file transfer tool from package
APP_NAME=transfer.sh
APP_GUI_NAME="fq Golang-based command-line simple and fast file transfer tool."
APP_VERSION=1.6.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME//./}-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME//./-}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME//./}*

# Install kpcli cross-platform command-line interface/interactive shell for KeePass database files (*.kdb/*.kdbx) from Debian package
APP_NAME=kpcli
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=4.1.2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-1
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install mprocs Rust-based command-line tool to run multiple processes in parallel and display output separately from package
APP_NAME=mprocs
APP_GUI_NAME="Rust-based command-line tool to run multiple processes in parallel and display output separately."
APP_VERSION=0.6.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/pvolok/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install gotz Golang-based command-line tool to display world time zones graphically from package
APP_NAME=gotz
APP_GUI_NAME="Golang-based command-line tool to display world time zones graphically."
APP_VERSION=0.1.5
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/merschformann/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME//./}*

# Install Portable Text Encryption (PTE) cross-platform TCL-based GUI text encryption tool from package
APP_NAME=PTE
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '-' '_')
APP_GUI_NAME="Cross-platform TCL-based GUI text encryption tool."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Encryption;"
APP_VERSION=12.02
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/portable-text-encryptor/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/linux/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install eSearch OCR screen recognition and search tool from Debian package
APP_NAME=eSearch
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=14.8.0
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/e-search/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PassVault cross-platform Electron-based desktop password management tool from Debian package
APP_NAME=PassVault
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.1.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/SinadShan/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Kapow cross-platform Qt-based minimalist time-tracking tool from Debian package
APP_NAME=Kapow
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.6.0-0+2.1
APP_EXT=deb
source /etc/lsb-release
if [[ ! "${DISTRIB_CODENAME:0:2}" =~ (ja)$ ]]; then  # 22.04
	DISTRIB_VERSION=xUbuntu_22.04
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (fo|gr|hi)$ ]]; then  # 20.04 - 21.10
	DISTRIB_VERSION=xUbuntu_20.04
	APP_VERSION=1.5.10-0+1.2
elif [[ ! "${DISTRIB_CODENAME:0:2}" =~ (bi|co|di|eo)$ ]]; then  # 18.04 - 19.10
	DISTRIB_VERSION=xUbuntu_18.04
	APP_VERSION=1.5.10-0+1.1
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/gottcode/${DISTRIB_VERSION}/amd64/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Liquid Prompt full-featured adaptive command prompt for Bash and Zsh from package
APP_NAME="Liquid Prompt"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Full-featured adaptive command prompt for Bash and Zsh."
APP_VERSION=2.1.2
APP_EXT=tar.gz
FILE_NAME=${_APP_NAME}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/liquid-prompt.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
mkdir -p ~/bin
cp -R -a /tmp/${FILE_NAME}/${_APP_NAME} ~/bin
echo 'source $HOME/bin/'${_APP_NAME}'/'${_APP_NAME} >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install The Semware Editor (TSE) legacy text editor from package
APP_NAME=TSE
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Legacy text editor."
APP_VERSION=4.46
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://semware.com/files/tse-pro-install/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/${APP_NAME,,}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/e /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install HTTPie Python-based human-friendly command-line HTTP client from Debian package
APP_NAME=HTTPie
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=3.2.2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Radare cross-platform reverse-engineering framework from Debian package
APP_NAME=Radare2
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=5.8.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Worderize Lite Java-based language learning tool from package
APP_NAME="Worderize Lite"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Java-based language learning tool."
APP_GUI_CATEGORIES="Education;"
APP_GUI_KEYWORDS="Language;"
APP_VERSION=2.1
APP_EXT=jar
FILE_NAME=${APP_NAME// /_}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/p/${_APP_NAME}/icon?9703549ad6468aa44af31e8804bc12946e17466fa9e1abe43707c39d25e74a5b
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R -a /tmp/${FILE_NAME}.${APP_EXT}  /opt/${_APP_NAME}
sudo cp /tmp/${_APP_NAME}.png /opt/${_APP_NAME}
sudo chmod -R 777 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
java -jar ${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}* /tmp/${APP_NAME// /_}*

# Install Gui4REST cross-platform Golang-based minimal GUI client for REST APIs from package
APP_NAME=Gui4REST
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '-' '_')
APP_GUI_NAME="Cross-platform Golang-based minimal GUI client for REST APIs."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="REST;Web Services;API;"
APP_VERSION=1.2.0
APP_EXT=N/A
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/ommz/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install hit Golang-based command-line HTTP client with history from package
APP_NAME=hit
APP_GUI_NAME="Golang-based command-line HTTP client with history."
APP_VERSION=0.2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hbagdi/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME//./}*

# Install lssh Golang-based command-line SSH/SCP/SFTP client from package
APP_NAME=lssh
APP_GUI_NAME="Golang-based command-line SSH/SCP/SFTP client."
APP_VERSION=0.6.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/blacknon/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/bin/* /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,} /usr/local/bin/lscp /usr/local/bin/lsftp
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Yaka cross-platform, simple 'to do' tool with full keyboard navigation from AppImage
APP_NAME=Yaka
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, simple 'to do' tool with full keyboard navigation."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="To Do;Productivity;"
APP_VERSION=0.7.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jyannick/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/jyannick/${APP_NAME,,}/main/build/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install WebKitty cross-platform, all-in one tool for editing, testing and debugging HTML projects from AppImage
APP_NAME=WebKitty
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, all-in one tool for editing, testing and debugging HTML projects."
APP_GUI_CATEGORIES="Office;Internet;"
APP_GUI_KEYWORDS="HTML;Editor;"
APP_VERSION=2.3.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/yikuansun/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/yikuansun/${APP_NAME,,}/master/resources/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Kavita cross-platform, self-hosted web comic and ebook reader from package
APP_NAME=Kavita
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, self-hosted web comic and ebook reader."
APP_GUI_CATEGORIES="Office;Internet;"
APP_GUI_KEYWORDS="Comics;Ebook;Reader;"
APP_VERSION=0.8.6.2
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=x64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=x86
fi
FILE_NAME=${APP_NAME,,}-linux-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/Kareadita/${APP_NAME}/develop/Logo/${APP_NAME,,}.svg
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.svg /opt/${APP_NAME,,}/${APP_NAME,,}.svg
sudo chmod -R 777 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /opt/${APP_NAME,,}/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
# Register Kavita application as a service to run at system start
sudo useradd -p $(openssl passwd -6 ${APP_NAME,,}) ${APP_NAME,,}
# sudo addgroup ${APP_NAME,,}
# sudo usermod -a -G ${APP_NAME,,} ${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.service << EOF
[Unit]
Description=Kavita Server
After=network.target

[Service]
User=${APP_NAME,,}
Group=${APP_NAME,,}
Type=simple
WorkingDirectory=/opt/${APP_NAME,,}
ExecStart=/opt/${APP_NAME,,}/${APP_NAME}
TimeoutStopSec=20
KillMode=process
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF
sudo cp /tmp/${APP_NAME,,}.service /etc/systemd/system
sudo systemctl start ${APP_NAME,,}.service
sudo systemctl enable ${APP_NAME,,}.service
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
# Path=/usr/local/bin
Exec=xdg-open http://localhost:5000/
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install fzshell Golang-based customized shell completions utility from package
APP_NAME=fzshell
APP_GUI_NAME="Golang-based customized shell completions utility."
APP_VERSION=0.3.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mnowotnik/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME//./}*

# Install TimeTracker cross-platform, Electron-based time-tracking tool with task management from AppImage
APP_NAME=TimeTracker
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Electron-based time-tracking tool with task management."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Time;Productivity;"
APP_VERSION=1.0.9
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/time-tracker-yadro/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/time-tracker-yadro/icon?64a3176090b8b2fe5cac23c2985570c015bafeafd965e058e527d6f10e96dd27
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ictree interactive 'tree' tool for the command line from package
APP_NAME=ictree
APP_GUI_NAME="Interactive 'tree' tool for the command line."
APP_VERSION=1.0.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-x86_64-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/NikitaIvanovV/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME//./}*

# Install ptSh visually-pleasing replacements for 'ls', 'pwd', and 'cd' from package
APP_NAME=ptSh
APP_GUI_NAME="Visually-pleasing replacements for 'ls', 'pwd', and 'cd'."
APP_VERSION=0.3.2-beta
APP_EXT=zip
FILE_NAME=${APP_NAME}_v${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jszczerbinsky/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/bin/pt* /usr/local/bin
# sudo chmod +x /usr/local/bin/${APP_NAME,,}
mkdir -p $HOME/.config/ptSh
cp -a /tmp/${FILE_NAME}/share/${APP_NAME}/config $HOME/.config/ptSh/.config
sudo chown -R ${USER}:${USER} $HOME/.config/ptSh
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME//./}*

# Install tone cross-platform, C#/.NET tool for viewing/editing audio file metadata from package
APP_NAME=tone
APP_GUI_NAME="Cross-platform, C#/.NET tool for viewing/editing audio file metadata."
APP_VERSION=0.1.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sandreas/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME//./}*

# Install MText Java-based minimalist text editor from Debian package
APP_NAME=MText
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=2.5.2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Newsraft simple console RSS news aggregator from source
APP_NAME=Newsraft
APP_GUI_NAME="Simple console RSS news aggregator."
APP_VERSION=0.18
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential libncursesw6 libsqlite3-dev libcurl4-openssl-dev libexpat1-dev libyajl-dev libgumbo-dev meson scdoc
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://codeberg.org/grisha/${APP_NAME,,}/archive/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
meson setup builddir && meson compile -C builddir && sudo meson install -C builddir
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Sampler Golang-based tool for shell commands execution, visualization and alerting with YAML configuration from package
APP_NAME=Sampler
APP_GUI_NAME="Golang-based tool for shell commands execution, visualization and alerting with YAML configuration."
APP_VERSION=1.1.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-amd64
curl -o /tmp/${FILE_NAME} -J -L https://github.com/sqshq/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
curl -o /tmp/${APP_NAME,,}_config.yml -J -L https://raw.githubusercontent.com/sqshq/${APP_NAME,,}/master/example.yml
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cp /tmp/${APP_NAME,,}_config.yml $HOME/.config
sampler -c $HOME/.config/${APP_NAME,,}_config.yml
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME//./}*

# Install GLogic logic gate simulator from Debian package
APP_NAME=GLogic
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=3.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install NColor Java-based color palette tool from package
APP_NAME=NColor
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Java-based color palette tool."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Color;CSS;"
APP_VERSION=1.0
APP_EXT=zip
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/ncolor/icon?bf3729d2da317dbbe599828384a237c0b7cb73b9ee8dc58405f8b221c46d859d
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/*  /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 777 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar '${APP_NAME} ${APP_VERSION}'.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Muffon Electron/Vue.JS-based desktop music-streaming service player from Debian package
APP_NAME=Muffon
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.5.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}.${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/staniel359/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install SFBRename cross-platform, GUI bulk file renaming tool from AppImage
APP_NAME=SFBRename
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, GUI bulk file renaming tool."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="File;Rename;"
APP_VERSION=1.0.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-gtk-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/karwler/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/karwler/${APP_NAME,,}/master/rsc/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Kosmorro astronomical ephemerides calculation tool from AppImage
APP_NAME=Kosmorro
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Astronomical ephemerides calculation tool."
APP_GUI_CATEGORIES="Education;Accessories;"
APP_GUI_KEYWORDS="Space;"
APP_VERSION=0.10.11
APP_EXT=zip
FILE_NAME=${APP_NAME,,}.AppImage
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME}/${APP_NAME,,}/master/${APP_NAME,,}/assets/png/${APP_NAME,,}-icon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-latest-x86_64.AppImage /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}-latest-x86_64.AppImage
sudo ln -s -f /usr/local/bin/${APP_NAME,,}-latest-x86_64.AppImage /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Dasel cross-platform data structure editing tool for JSON, TOML, YAML, XML and CSV files from package
APP_NAME=Dasel
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform data structure editing tool for JSON, TOML, YAML, XML and CSV files."
APP_VERSION=2.5.0
APP_EXT=gz
FILE_NAME=${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install P3X-Redis-UI cross-platform, Electron-based GUI for Redis from AppImage
APP_NAME=P3X-Redis-UI
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Electron-based GUI for Redis."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Redis;Database;"
APP_VERSION=2023.4.102
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/patrikx3/redis-ui/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/patrikx3/redis-ui/master/src/electron/images/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install mediaChips cross-platform, Electron-based desktop video library manager/player from AppImage
APP_NAME=mediaChips
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Electron-based desktop video library manager/player."
APP_GUI_CATEGORIES="Entertainment;Accessories;"
APP_GUI_KEYWORDS="Video;Player;"
APP_VERSION=0.11.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}.v${APP_VERSION}.Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?d36c259cc1ddc54dbe9d4ed7532c4334ca5a9c4484aa53d612b5087b9446da4e
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Mandelbulber cross-platform 3D fractal explorer/renderer from AppImage
APP_NAME=Mandelbulber
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform 3D fractal explorer/renderer."
APP_GUI_CATEGORIES="Education;Science;"
APP_GUI_KEYWORDS="Graphics;Math;"
APP_VERSION=2.28
APP_EXT=appimage
FILE_NAME=${APP_NAME}_v2-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?1559148932
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install tere simple command-line file manager intended to replace 'cd + ls' from package
APP_NAME=tere
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Simple command-line file manager intended to replace 'cd + ls'."
APP_VERSION=1.4.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mgunyho/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
echo 'tere() {' >> $HOME/.bashrc
echo '    local result=$(/usr/local/bin/tere "$@")' >> $HOME/.bashrc
echo '    [ -n "$result" ] && cd -- "$result"' >> $HOME/.bashrc
echo '}' >> $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install Xplorer cross-platform, Tauri-based customizable, modern file manager from AppImage
APP_NAME=Xplorer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Tauri-based customizable, modern file manager."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="File;Manager;"
APP_VERSION=0.3.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kimlimjustin/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/kimlimjustin/${APP_NAME,,}/master/src-tauri/icons/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install osquery cross-platform system monitoring tool that uses SQL-style querying from package
APP_NAME=osquery
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform system monitoring tool that uses SQL-style querying."
APP_VERSION=5.4.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}_1.linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${FILE_NAME}/* /
sudo ln -s -f /usr/bin/${APP_NAME,,}i /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install jless command-line JSON viewer from package
APP_NAME=jless
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Command-line JSON viewer."
APP_VERSION=0.9.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/PaulJuliusMartinez/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install SoundTracker GTK-based pattern-oriented music editor from source
APP_NAME=SoundTracker
APP_GUI_NAME="GTK-based pattern-oriented music editor."
APP_VERSION=1.0.3-pre2
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential libasound2-dev libsdl1.2-dev libgtk2.0-dev libsndfile1-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Tachash GUI hashing tool with support for many algorithms from package
APP_NAME=Tachash
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="GUI hashing tool with support for many algorithms."
APP_GUI_CATEGORIES="Programming;Development;Accessories;"
APP_GUI_KEYWORDS="Hashing;"
APP_VERSION=1.11
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R -a /tmp/${FILE_NAME}/linux/${APP_NAME,,}-linux  /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}-linux
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}-linux
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Black Box GTK4 Terminal Application from Flatpak
# https://www.omgubuntu.co.uk/2022/07/blackbox-gtk4-terminal-emulator-for-gnome
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub com.raggesilver.BlackBox

# Install dpScreenOCR open-source Tesseract-based screen OCR tool with support for over 100 languages from PPA
# https://danpla.github.io/dpscreenocr/
sudo add-apt-repository -y ppa:daniel.p/dpscreenocr
sudo apt update -y
sudo apt install -y dpscreenocr

# Install deb-get tool to provide 'apt-get' style functionality from Debian packages from third-party repositories from Debian package
APP_NAME=deb-get
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=0.4.4
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/wimpysworld/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Linwood Butterfly cross-platform, free-form notepad tool from AppImage
APP_NAME="Linwood Butterfly"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, free-form notepad tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;Editor;"
APP_VERSION=2.3.0
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/LinwoodDev/Butterfly/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/LinwoodDev/Butterfly/develop/app/images/logo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME// /-}* /tmp/${_APP_NAME}*

# Install MenuLibre GTK-based advanced FreeDesktop.org compliant menu editor from source
APP_NAME=MenuLibre
APP_GUI_NAME="GTK-based advanced FreeDesktop.org compliant menu editor."
APP_VERSION=2.3.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y gir1.2-gtk-3.0 intltool libgnome-menu-3-dev python-gi-dev python3 python3-distutils-extra python3-psutil
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bluesabre/${APP_NAME,,}/releases/download/${FILE_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo python3 setup.py install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install WindEdit cross-platform large file editor with Vim keybindings from package
APP_NAME=WindEdit
APP_GUI_NAME="Cross-platform large file editor with Vim keybindings."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=1.0.0_Prerelease_1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}_${APP_VERSION}_Linux_Portable
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kingToolbox/${APP_NAME}/releases/download/1.0-prerelease/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/${APP_NAME}*/* /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${APP_NAME}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
#Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install mtm (Micro Terminal Multiplexer) tiny terminal multiplexer from source
APP_NAME=mtm
APP_GUI_NAME="Tiny terminal multiplexer."
APP_VERSION=1.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/deadpixi/${APP_NAME,,}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Buttercup JavaScript/Electron desktop password manager from AppImage
APP_NAME=Buttercup
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="JavaScript/Electron desktop password manager."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Password;Security;Manager;"
APP_VERSION=2.28.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}-desktop/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}-desktop/master/resources/images/${APP_NAME,,}-256.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Encrypt0r cross-platform Electron-based GUI file encryption/decryption tool from package
APP_NAME=Encrypt0r
APP_GUI_NAME="Cross-platform Electron-based GUI file encryption/decryption tool."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Encryption;Security;"
APP_VERSION=3.12.57
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kunalnagar/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/kunalnagar/${APP_NAME,,}/blob/master/assets/icons/png/128x128.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${FILE_NAME}/release-builds/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Kuro cross-platform Electron-based desktop 'to do' manager from AppImage
APP_NAME=Kuro
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based desktop 'to do' manager."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="To Do;"
APP_VERSION=9.0.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/davidsmorais/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/davidsmorais/${APP_NAME,,}/master/static/IconTray.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Forecast cross-platform Vue.JS/Electron-based desktop 'to do' manager from AppImage
APP_NAME=Forecast
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Vue.JS/Electron-based desktop 'to do' manager."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="To Do;"
APP_VERSION=1.0.5
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/macguirerintoul/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/macguirerintoul/${APP_NAME}/master/build/icons/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Retroplanet Navigator Python/Qtwebengine-based web browser from package
APP_NAME="Retroplanet Navigator"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Python/Qtwebengine-based web browser."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Web;Browser;"
APP_VERSION=4.0
APP_EXT=tar.gz
FILE_NAME=$(echo ${APP_NAME} | tr '[:blank:]' '_')-${APP_VERSION}
sudo apt install -y python3-pyqt5 python3-pyqt5.qtwebengine
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://www.lagrottadelpipistrello.altervista.org/retroplanet/files/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -a -R /tmp/${FILE_NAME}/*/* /opt/${_APP_NAME}
sudo chown -R ${USER}:${USER} /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
python3 /opt/${_APP_NAME}/$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-').py &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Notesnook cross-platform Electron-based desktop encrypted note-taking tool from AppImage
APP_NAME=Notesnook
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based desktop encrypted note-taking tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;Security;"
APP_VERSION=3.1.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}_linux_x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/streetwriters/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/streetwriters/${APP_NAME,,}/main/logo/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install lurk pretty and simple Rust-based alternative to strace from package
APP_NAME=lurk
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Pretty and simple Rust-based alternative to strace."
APP_VERSION=0.2.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-x86_64-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/JakWai01/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install bauh Python-based GUI multi-format package manager for Linux with support for AppImage, Debian and Arch Linux packages (including AUR), Flatpak, and Snap from AppImage
APP_NAME=bauh
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Python-based GUI multi-format package manager for Linux with support for AppImage, Debian and Arch Linux packages (including AUR), Flatpak, and Snap."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Package;Manager;"
APP_VERSION=0.10.4
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/vinifmor/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://github.com/vinifmor/bauh/blob/master/bauh/view/resources/img/logo.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Mochi cross-platform offline spaced-repetition flashcard tool with markdown support from AppImage
APP_NAME=Mochi
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform offline spaced-repetition flashcard tool with markdown support."
APP_GUI_CATEGORIES="Education;Accessories;"
APP_GUI_KEYWORDS="Flashcards;Notepad;"
APP_VERSION=1.14.7
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://mochi.cards/releases/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://mochi.cards/docs/img/logo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install neoeedit Java-based smart, light, powerful text editor from package
APP_NAME=neoeedit
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Java-based smart, light, powerful text editor."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=384
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/neoedmund/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://raw.githubusercontent.com/neoedmund/${APP_NAME,,}/master/cpp-src/${APP_NAME,,}/${APP_NAME,,}-launcher/Alien.ico
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}.${APP_EXT}  /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.ico /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -Xmx512M -jar ${APP_NAME,,}.jar $1 &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install KeenWrite cross-platform Java-based desktop text editor with live preview, string interpolation, and formulas from package
APP_NAME=KeenWrite
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Java-based desktop text editor with live preview, string interpolation, and formulas from."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=3.2.0
APP_EXT=bin
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/DaveJarvis/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://github.com/DaveJarvis/${APP_NAME,,}/blob/master/images/logo64.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install PDFGrepGUI simple GUI for pdfgrep for text search inside PDFs from Debian package
APP_NAME=PDFGrepGUI
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=0.9.2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install pdfgrep -y
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install amber Rust-based command-line source code search-and-replace tool from package
APP_NAME=amber
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based command-line source code search-and-replace tool."
APP_VERSION=0.5.9
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-x86_64-lnx
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dalance/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME//er/}* /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME//er/}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install gip Rust-based command-line tool to check external IP address via multiple providers from package
APP_NAME=gip
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based command-line tool to check external IP address via multiple providers."
APP_VERSION=0.6.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-lnx
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dalance/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}* /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install tickrs Rust-based command-line stock ticker from package
APP_NAME=tickrs
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based command-line stock ticker."
APP_VERSION=0.14.6
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/tarkah/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}* /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install GrabSCR Python-based screenshot tool from AppImage
APP_NAME=GrabSCR
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Python-based screenshot tool."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Screenshot;"
APP_VERSION=0.0.7
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/thepeshka/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://images.pling.com/img/00/00/50/02/87/1887189/icon-5.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install A Photo Tool Libre minimalist Qt-based image viewer/editor from AppImage
APP_NAME="A Photo Tool Libre"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Minimalist Qt-based image viewer/editor."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Graphics;Viewer;Editor;"
APP_VERSION=1.0.5-3
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}_${APP_VERSION}_x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/aphototool/${APP_NAME// /-}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/aphototool/${APP_NAME// /-}/main/pics/APhotoToolLibreIcon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}* /tmp/${APP_NAME}*

# Install jc Python-based CLI tool and library that converts output from many popular command-line tools and file types to JSON, YAML, or Python dictionary format from package
# https://github.com/kellyjonbrazil/jc
APP_NAME=jc
APP_VERSION=1.25.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-cli.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install q Golang-based tiny command line DNS client from package
APP_NAME=q
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based tiny command line DNS client."
APP_VERSION=0.19.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/natesales/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}* /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install hnterm Hacker News in the terminal from source
APP_NAME=hnterm
APP_GUI_NAME="Hacker News in the terminal."
APP_VERSION=0.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y cmake libncurses-dev libcurl4-openssl-dev
cd /tmp
git clone https://github.com/ggerganov/${APP_NAME,,} --recursive
cd /tmp/${APP_NAME,,}
mkdir build && cd build
cmake .. && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Zametek ProjectPlan cross-platform MS Project-style GUI project management tool from package
APP_NAME="Zametek ProjectPlan"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '.')
APP_GUI_NAME="Cross-platform MS Project-style GUI project management tool."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Project;Management;"
APP_VERSION=0.7.3
APP_EXT=zip
FILE_NAME=ProjectPlan-v${APP_VERSION}.linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/countincognito/${APP_NAME// /.}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R -a /tmp/${FILE_NAME}/linux-x64/*  /opt/${_APP_NAME}
sudo chown -R ${USER}:${USER} /opt/${_APP_NAME}
sudo chmod +x /opt/${_APP_NAME}/${APP_NAME// /.}
sudo ln -s -f /opt/${_APP_NAME}/${APP_NAME// /.} /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/opt/${_APP_NAME}/${APP_NAME// /.}
Icon=/opt/${_APP_NAME}/Icons/zpp.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME// /.}* /tmp/${_APP_NAME}*

# Install bat Rust-based cat(1) clone with syntax highlighting and Git integration from package
# https://github.com/sharkdp/bat
APP_NAME=bat
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based cat(1) clone with syntax highlighting and Git integration."
APP_VERSION=0.25.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}.1 /usr/share/man/man1
sudo mandb --quiet
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install ifshow command-line network interface status display tool from source
APP_NAME=ifshow
APP_GUI_NAME="Command-line network interface status display tool."
APP_VERSION=1.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y cmake build-essential libpci-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/awgn/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
cmake .. && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install ytt Golang-based YAML templating tool that works on YAML structure instead of text from package
# https://carvel.dev/ytt/
APP_NAME=ytt
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based YAML templating tool that works on YAML structure instead of text."
APP_VERSION=0.51.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install DevTools-X cross-platform collection of offline-first developer tools from AppImage
APP_NAME=DevTools-X
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform collection of offline-first developer tools."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Utilities;"
APP_VERSION=1.9.1
APP_EXT=AppImage
FILE_NAME=dev-tools_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/fosslife/${_APP_NAME}/releases/download/${APP_NAME//-X/}v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/fosslife/${_APP_NAME}/master/src-tauri/icons/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}* /tmp/${APP_NAME}*

# Install Laidout minimalist desktop publishing application from AppImage
APP_NAME=Laidout
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Minimalist desktop publishing applicatio."
APP_GUI_CATEGORIES="Office;"
APP_GUI_KEYWORDS="Editor;PDF;"
APP_VERSION=ae6b35e
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME,,}/releases/download/continuous/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/${APP_NAME}/${APP_NAME,,}/master/src/icons/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install jqp Golang-based TUI playground to experiment with jq from package
APP_NAME=jqp
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Golang-based TUI playground to experiment with jq."
APP_VERSION=0.7.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/noahgorstein/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Open Video Downloader cross-platform Electron-based GUI frontend for youtube-dl from AppImage
APP_NAME="Open Video Downloader"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based GUI frontend for youtube-dl."
APP_GUI_CATEGORIES="Multimedia;Entertainment;Video;"
APP_GUI_KEYWORDS="Video;Download;"
APP_VERSION=2.4.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /-}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/mirror/${_APP_NAME}/icon?b5febb7f0cc048efba5c8260f2f50f82bf284b89d1414e9ff94db0c0c4e65d74
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME// /-}* /tmp/${_APP_NAME}*

# Install fu Rust-based modern du replacement from package
APP_NAME=fu
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based modern du replacement."
APP_VERSION=1.0.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Angelmmiguel/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Yank Note cross-platform Electron-based Markdown editor with preview from AppImage
APP_NAME="Yank Note"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based Markdown editor with preview."
APP_GUI_CATEGORIES="Office;Development;Programming;"
APP_GUI_KEYWORDS="Markdown;Editor;"
APP_VERSION=3.82.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /-}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://github.com/purocean/yn/blob/develop/src/main/assets/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME// /-}* /tmp/${_APP_NAME}*

# Install Fluent Reader cross-platform Electron-based RSS reader/aggregator from AppImage
APP_NAME="Fluent Reader"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based RSS reader/aggregator."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="RSS;News;Reader;"
APP_VERSION=1.1.4
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /.}.${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/mirror/fluent-reader/icon?81f7415c8770bd037a549fada715ab80995e13228d5409f27573945f285f9db3
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME// /-}* /tmp/${_APP_NAME}*

# Install Pomotroid cross-platform Electron-based minimalist Pomodoro timer from AppImage
APP_NAME=Pomotroid
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based minimalist Pomodoro timer."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Pomodoro;Timer;Productivity;"
APP_VERSION=0.13.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Splode/${APP_NAME,,}/master/build/icons/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Heimer cross-platform Qt-based minimalist mind map, diagram, and note-taking tool from AppImage
APP_NAME=Heimer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Qt-based minimalist mind map, diagram, and note-taking tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Mind;Map;Notepad;Productivity;"
APP_VERSION=4.5.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/juzzlin/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/juzzlin/${APP_NAME}/master/src/images/icon.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install CPU-X GUI and command-line tool for displaying CPU and other system information from AppImage
APP_NAME=CPU-X
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="GUI and command-line tool for displaying CPU and other system information."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="CPU;System;"
APP_VERSION=5.2.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/X0rg/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/X0rg/${APP_NAME}/master/data/icons/${APP_NAME}_128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install rqlite distributed version of SQLite database from package
APP_NAME=rqlite
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Distributed version of SQLite database."
APP_VERSION=8.37.4
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/* /usr/local/bin
sudo chmod +x /usr/local/bin/rq*
/usr/local/bin/${APP_NAME,,}d ~/node.1 &
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Colorpicker Electron-based, cross-platform minimal GUI color identification tool from AppImage
APP_NAME=Colorpicker
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Electron-based, cross-platform minimal GUI color identification tool."
APP_GUI_CATEGORIES="Accessories;Development;Programming;"
APP_GUI_KEYWORDS="Color;Picker;"
APP_VERSION=2.2.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Toinane/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Toinane/${APP_NAME,,}/master/build/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Clashy Electron-based, cross-platform GUI proxy client from AppImage
APP_NAME=Clashy
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Electron-based, cross-platform GUI proxy client."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="Proxy;"
APP_VERSION=0.2.7
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/SpongeNobody/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
# Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Museeks Electron-based, cross-platform minimalist music player from AppImage
APP_NAME=Museeks
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Electron-based, cross-platform minimalist music player."
APP_GUI_CATEGORIES="AudioVideo;Multimedia;"
APP_GUI_KEYWORDS="Music;Player;"
APP_VERSION=0.20.9
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/martpie/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/martpie/${APP_NAME,,}/master/src/images/logos/${APP_NAME,,}-128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install shmoji tiny shell-based emoji picker from package
APP_NAME=shmoji
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Tiny shell-based emoji picker."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
sudo apt install -y rofi xdotool
curl -o /tmp/${FILE_NAME} -J -L https://raw.githubusercontent.com/biox/${APP_NAME,,}/main/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install CaptfEncoder Rust-based, cross-platform security suite with variety of cryptographic algorithms from package
APP_NAME=CaptfEncoder
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Rust-based, cross-platform security suite with variety of cryptographic algorithms."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Security;Crypto;"
APP_VERSION=3.1.2
APP_EXT=bin
FILE_NAME=${APP_NAME}-ubuntu-20-x64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/guyoung/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/guyoung/${APP_NAME}/master/images/${APP_NAME,,}-log-1.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install SnippetStore cross-platform Electron-based development snippet management tool from AppImage
APP_NAME=SnippetStore
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based development snippet management tool."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Snippet;Notepad;"
APP_VERSION=0.2.12
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/${APP_NAME,,}/icon?7fc85927cf8ad3478545a0472d37602f007d62412151e6147923323e1a65ace3
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install genact cross-platform shell-based nonsense activity generator from package
APP_NAME=genact
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform shell-based nonsense activity generator."
APP_VERSION=1.2.2
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install PQMusic Python/Qt-based, minimalist music player from AppImage
APP_NAME=PQMusic
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Python/Qt-based, minimalist music player."
APP_GUI_CATEGORIES="AudioVideo;Multimedia;"
APP_GUI_KEYWORDS="Music;Player;"
APP_VERSION=1.2.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y python3-dbus.mainloop.pyqt5
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/son-link/${APP_NAME}/releases/download/v.${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/son-link/${APP_NAME}/main/bin/io.sonlink.${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install just project-specific command runner with make-like syntax from package
APP_NAME=just
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Project-specific command runner with make-like syntax."
APP_VERSION=1.5.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/casey/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}.1 /usr/local/man/man1
sudo chmod +x /usr/local/bin/${APP_NAME,,}
sudo mandb
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install joshuto Rust-based ranger-like terminal file manager from package
APP_NAME=joshuto
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based ranger-like terminal file manager."
APP_VERSION=0.9.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kamiyaa/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install rmx Rust-based port of 'rm' with extra features from package
APP_NAME=rmx
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based port of 'rm' with extra features."
APP_VERSION=0.1.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-musl-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/demfabris/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/target/$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl/release/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Markdownify Electron-based, cross-platform Markdown editor with live preview and PDF export support from package
APP_NAME=Markdownify
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Electron-based, cross-platform Markdown editor with live preview and PDF export support."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Markdown;Editor;"
APP_VERSION=1.2.0
APP_EXT=zip
FILE_NAME=${APP_NAME}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/amitmerchant1990/electron-${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/*  /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${APP_NAME}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/resources/app/img/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Keyholder Java-based GUI off-line encrypted password storage tool from package
# https://www.antoniopelusi.com/posts/keyholder-desktop/
APP_NAME=Keyholder
APP_GUI_NAME="Java-based GUI off-line encrypted password storage tool."
APP_GUI_CATEGORIES="Internet;System;Accessories;"
APP_GUI_KEYWORDS="Password;Security;"
APP_VERSION=1.1
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-desktop-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-desktop/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/keyholder-desktop/icon?8bd36c17f01e8a168c0675909743f1c6861f6a97646b49b8c6ad69cf86716627
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.jar &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install xdf (exquisite df) enhanced version of 'df' utility from source
APP_NAME=xdf
APP_GUI_NAME="Enhanced version of 'df' utility."
APP_VERSION=1.6.40
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install NP Resistor cross-platform GUI resistor color-code tool from Debian package
APP_NAME="NP Resistor"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_VERSION=1.0
APP_EXT=deb
FILE_NAME=${_APP_NAME}_v${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Znote cross-platform Electron-based Markdown editor from AppImage
# https://znote.io/
APP_NAME=Znote
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based Markdown editor."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Editor;Markdown;"
APP_VERSION=1.7.5
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/alagrede/${APP_NAME,,}-app/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME}.png -J -L https://znote.io/assets/img/logo-colored.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME}.png /usr/local/share/icons/${APP_NAME}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}*

# Install QDia cross-platform simple schematic diagram editor from AppImage
APP_NAME=QDia
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform simple schematic diagram editor."
APP_GUI_CATEGORIES="Science;Engineering;"
APP_GUI_KEYWORDS="Editor;Electronics;"
APP_VERSION=0.24
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-linux-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sunderme/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/sunderme/${APP_NAME,,}/main/resources/${APP_NAME,,}.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install StateS simple state diagram editor from package
APP_NAME=StateS
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform simple schematic diagram editor."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Editor;Diagramming;Visualization;"
APP_VERSION=0.4.4
APP_EXT=tar.xz
FILE_NAME=${APP_NAME}_${APP_VERSION}_Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ClementFoucher/${APP_NAME}/releases/download/V.${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/ClementFoucher/${APP_NAME}/main/art/svg/${APP_NAME}.svg
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ChordSmith Java-based music editor that can display, transpose and print song sheets containing chords and lyrics from package
# http://www.statistics101.net/chordsmith/
APP_NAME=ChordSmith
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Java-based music editor that can display, transpose and print song sheets containing chords and lyrics."
APP_GUI_CATEGORIES="Entertainment;Audio;Video;Education;"
APP_GUI_KEYWORDS="Editor;Music;"
APP_VERSION=11.11
APP_EXT=zip
FILE_NAME=${APP_NAME}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -Xmx512M -jar ${APP_NAME}.jar $1 &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/help/${APP_NAME}Icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install ddarch wrapper for dd, fdisk, parted and other tools for creating and restoring disk images from Debian package
APP_NAME=ddarch
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_VERSION=0.1.9
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install BORG Calendar Java-based desktop calendar and task manager from Debian package
APP_NAME="BORG Calendar"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.10.02
APP_EXT=deb
FILE_NAME=${_APP_NAME}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/borg-calendar/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install recon Rust-based tool to search for files from shell using SQL from package
APP_NAME=recon
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based ranger-like terminal file manager."
APP_VERSION=0.5.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rusty-ferris-club/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install FunTerm simple terminal in C++ inspired by Tilix from AppImage
APP_NAME=FunTerm
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Simple terminal in C++ inspired by Tilix."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Terminal;Shell;"
APP_VERSION=a764287
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/zhangfuwen/${APP_NAME}/releases/download/v0.1/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/zhangfuwen/${APP_NAME}/master/res/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install ChimpStackr focus-stacking image viewer/editor from AppImage
APP_NAME=ChimpStackr
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Focus-stacking image viewer/editor."
APP_GUI_CATEGORIES="Graphics;Accessories;"
APP_GUI_KEYWORDS="Viewer;"
APP_VERSION=0.0.38
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-latest-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/noah-peeters/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/noah-peeters/${APP_NAME}/master/packaging/icons/icon_128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install 3D-Puzzles simple Rubik's Cube-style puzzles from AppImage
APP_NAME=3D-Puzzles
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Simple Rubik's Cube-style puzzles."
APP_GUI_CATEGORIES="Entertainment;Games;"
APP_GUI_KEYWORDS="Rubik;Puzzle;3D;"
APP_VERSION=N/A
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/volatilflerovium/${APP_NAME}/raw/main/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/volatilflerovium/${APP_NAME}/main/resources/puzzle.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install ungit cross-platform Electron-based GUI Git client from package
APP_NAME=ungit
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based GUI Git client."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Git;"
APP_VERSION=1.5.28
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/FredrikNoren/${APP_NAME,,}/master/assets/images/icon.svg
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/${APP_NAME,,}-linux-x64/* /opt/${APP_NAME,,}
sudo cp -a /tmp/${APP_NAME,,}.svg /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install cheat Golang-based interactive cheat sheet tool for the command-line from package
APP_NAME=cheat
APP_GUI_NAME="Golang-based interactive cheat sheet tool for the command-line."
APP_VERSION=4.4.0
APP_EXT=gz
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Passy cross-platform Flutter-based password manager with synchronization capability from AppImage
APP_NAME=Passy
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Flutter-based password manager with synchronization capability."
APP_GUI_CATEGORIES="Internet;System;Accessories;"
APP_GUI_KEYWORDS="Password;Security;"
APP_VERSION=1.8.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-v${APP_VERSION}-Linux-${APP_EXT}
curl -o /tmp/${FILE_NAME}.zip -J -L https://github.com/GlitterWare/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.zip
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/GlitterWare/${APP_NAME}/main/assets/images/icon48.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.zip
sudo cp /tmp/${FILE_NAME}/${APP_NAME}-v${APP_VERSION}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME}-v${APP_VERSION}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${APP_NAME}-v${APP_VERSION}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Virtuozo Java-based music composition tool for search for scales and chords from XML database from package
APP_NAME=Virtuozo
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Java-based music composition tool for search for scales and chords from XML database."
APP_GUI_CATEGORIES="Entertainment;Audio;Video;Education;"
APP_GUI_KEYWORDS="Editor;Music;"
APP_VERSION=1.14
APP_EXT=zip
FILE_NAME=${APP_NAME,,}${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -Xmx512M -jar ${APP_NAME}.jar $1 &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install GitVersion C#/.NET-based tool for calculating semantic version from repository Git history from package
APP_NAME=GitVersion
APP_GUI_NAME="C#/.NET-based tool for calculating semantic version from repository Git history."
APP_VERSION=5.11.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-x64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Nonpareil HP calculator emulator from source
APP_NAME=Nonpareil
APP_GUI_NAME="HP calculator emulator."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y scons flex bison netpbm libxml2-dev libsdl1.2-dev zlib1g-dev libgtk2.0-dev
sudo apt install -y libcanberra-gtk-module libcanberra-gtk3-module
cd /tmp
git clone https://git.code.sf.net/p/${APP_NAME,,}-ubuntu/code ${APP_NAME,,}-ubuntu-code
cd /tmp/${APP_NAME,,}-ubuntu-code
sudo scons install && sudo scons -c
sudo cp HP-12C_icon.png /usr/share/icons
sudo cp HP-12C.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install subnets Rust-based command-line tool to analyze and calculate IPv4 addresses and subnet masks from package
APP_NAME=subnets
APP_GUI_NAME="Rust-based command-line tool to analyze and calculate IPv4 addresses and subnet masks."
APP_VERSION=1.1
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux
curl -o /tmp/${FILE_NAME} -J -L https://github.com/margual56/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Slider Puzzles cross-platform, color terminal/console puzzle games from package
APP_NAME="Slider Puzzles"
APP_GUI_NAME="Cross-platform, color terminal/console puzzle games."
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1jan25
APP_EXT=7z
FILE_NAME=asl${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -a -R /tmp/${FILE_NAME}/sliderPuzzles/* /opt/${_APP_NAME}
sudo chown -R ${USER}:${USER} /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}/bin/gnu
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
/opt/${_APP_NAME}/bin/gnu/nexus
cd /opt/${_APP_NAME}
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cd $HOME
rm -rf /tmp/${_APP_NAME}* /tmp/puz*

# Install Pulse Browser fork of Firefox web browser for enhanced focus and work productivity from package
APP_NAME="Pulse Browser"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Fork of Firefox web browser for enhanced focus and work productivity."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Firefox;Browser;"
APP_VERSION=1.0.0-a.31
APP_EXT=tar.bz2
FILE_NAME=${_APP_NAME}.linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${_APP_NAME}/browser/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R -a /tmp/${FILE_NAME}/* /opt
sudo chown -R ${USER}:${USER} /opt/${_APP_NAME}
sudo ln -s -f /opt/${_APP_NAME}/${_APP_NAME} /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/browser/chrome/icons/default/default48.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Monolith Rust-based command-line tool to save web page to single HTML page with embedded resources from package
APP_NAME=Monolith
APP_GUI_NAME="Rust-based command-line tool to save web page to single HTML page with embedded resources."
APP_VERSION=2.7.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-gnu-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/Y2Z/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Doer Qt-based minimalist desktop notepad from source
APP_NAME=Doer
APP_GUI_NAME="Qt-based minimalist desktop notepad."
APP_VERSION=1.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y libx11-dev qtbase5-dev libqt5x11extras5-dev libqt5svg5-dev libhunspell-dev qttools5-dev-tools qtwebengine5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Y2Z/${APP_NAME}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 .. && make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Liquid Qt-based tool that turns web pages into desktop applications from source
APP_NAME=Liquid
APP_GUI_NAME="Qt-based tool that turns web pages into desktop applications."
APP_VERSION=main
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y libx11-dev qtbase5-dev libqt5x11extras5-dev libqt5svg5-dev libhunspell-dev qttools5-dev-tools qtwebengine5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Y2Z/${APP_NAME}/archive/refs/heads/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 .. && make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install pods Rust-based Podman desktop GUI application from Flatpak
# https://github.com/marhkb/pods
sudo apt install -y flatpak
sudo flatpak remote-add --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo
sudo flatpak install flathub-beta com.github.marhkb.Pods

# Install epick Rust-based color picker tool for creating harmonic color palettes from package
APP_NAME=epick
APP_GUI_NAME="Rust-based color picker tool for creating harmonic color palettes."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Color;Picker;"
APP_VERSION=0.9.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(arch)-unknown-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/vv9k/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/vv9k/${APP_NAME,,}/master/assets/icon.png
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install ChessX Qt-based chess database and PGN viewer from source
APP_NAME=ChessX
APP_GUI_NAME="Qt-based chess database and PGN viewer."
APP_GUI_CATEGORIES="Games;"
APP_GUI_KEYWORDS="Chess;"
APP_VERSION=1.6.0
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y qtbase5-dev qttools5-dev-tools libqt5svg5-dev qtmultimedia5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 .. && make -j$(nproc) && sudo make install
sudo cp -a ./release/${APP_NAME,,} /usr/local/bin
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${FILE_NAME}/src/${APP_NAME,,}.ico /usr/local/share/icons/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install RufasCube cross-platform OpenGL Rubik's Cube-style puzzle game from package
APP_NAME=RufasCube
APP_GUI_NAME="Cross-platform OpenGL Rubik's Cube-style puzzle game."
APP_VERSION=18mar24
APP_EXT=7z
FILE_NAME=rc${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/rcube/* /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/cube_gnu
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/rufasok_gnu
Icon=/opt/${APP_NAME,,}/cube.app/Contents/Resources/rufascube.icns
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Cube;Puzzle;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install git-bug Golang-based cross-platform offline-first bug tracker embedded in Git from package
APP_NAME=git-bug
APP_GUI_NAME="Golang-based cross-platform offline-first bug tracker embedded in Git."
APP_VERSION=0.8.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Curlie Golang-based command-line frontend to curl that offers ease-of-use of HTTPie from package
APP_NAME=Curlie
APP_GUI_NAME="Golang-based command-line frontend to curl that offers ease-of-use of HTTPie."
APP_VERSION=1.7.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rs/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install psmisc small Linux system utilities that use proc file system from source
APP_NAME=psmisc
APP_GUI_NAME="Small Linux system utilities that use proc file system."
APP_VERSION=23.6
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install BurgerSpace clone of BurgerTime retro arcade game from source
APP_NAME=BurgerSpace
APP_GUI_NAME="Clone of BurgerTime retro arcade game."
APP_VERSION=1.9.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libsdl-image1.2-dev libsdl-mixer1.2-dev
curl -o /tmp/flatzebra-0.1.7.tar.gz -J -L http://perso.b2b2c.ca/~sarrazip/dev/flatzebra-0.1.7.tar.gz
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://perso.b2b2c.ca/~sarrazip/dev/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/flatzebra-0.1.7.tar.gz
cd /tmp/flatzebra-0.1.7
./configure && make -j(nproc) && sudo make install && sudo ldconfig
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Clipboard tool to cut, copy, and paste files from the terminal from package
APP_NAME=Clipboard
APP_GUI_NAME="Tool to cut, copy, and paste files from the terminal."
APP_VERSION=0.10.0
APP_EXT=zip
GITHUB_USER=Slackadays
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${GITHUB_USER}/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Nap Golang-based code snippet manager for terminal from package
APP_NAME=Nap
APP_GUI_NAME="Golang-based code snippet manager for terminal."
APP_VERSION=0.1.1
APP_EXT=tar.gz
GITHUB_USER=maaslalani
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${GITHUB_USER}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Apktool Java-based tool for reverse engineering Android APK files from package
APP_NAME=Apktool
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Java-based tool for reverse engineering Android APK files."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Android;APK;"
APP_VERSION=2.8.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=`pwd`:\$PATH; export PATH
exec java -Xmx512M -Dfile.encoding=utf-8 -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} "$@" &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install SpaceZero 2D real-time strategy (RTS) space combat game from source
APP_NAME=SpaceZero
APP_GUI_NAME="2D real-time strategy (RTS) space combat game."
APP_VERSION=0.86.01
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libgtk2.0-dev libglib2.0-dev libopenal-dev libalut-dev libvorbis-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
make -j$(nproc) ${APP_NAME,,} && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install colorgrep Golang-based grep tool that displays matched patterns in specified color from package
APP_NAME=colorgrep
APP_GUI_NAME="Golang-based grep tool that displays matched patterns in specified color."
APP_VERSION=0.0.3
APP_EXT=N/A
GITHUB_USER=alexcb
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/${GITHUB_USER}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Drawing simple image editor in the style of MS Paint from PPA
# https://github.com/maoschanz/drawing
APP_NAME=Drawing
APP_GUI_NAME="Simple image editor in the style of MS Paint."
APP_VERSION=1.0.1
APP_EXT=deb
sudo add-apt-repository -y ppa:cartes/${APP_NAME,,}
sudo apt-get update
sudo apt-get install -y ${APP_NAME,,}

# Install Altair cross-platform Electron-based GUI GraphQL client from AppImage
# https://github.com/altair-graphql/altair/
APP_NAME=Altair
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based GUI GraphQL client."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="GraphQL;Web Services;HTTP;"
APP_VERSION=5.2.9
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_x86_64_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}-graphql/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}-graphql/${APP_NAME,,}/master/icons/android-icon-96x96.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install weatherme Golang-based command-line weather tool from package
APP_NAME=weatherme
APP_GUI_NAME="Golang-based command-line weather tool."
APP_VERSION=2.5
APP_EXT=tar.gz
GITHUB_USER=eoin-barr
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${GITHUB_USER}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install WeekToDo cross-platform Electron-based minimalist weekly planner and to do tool from AppImage
# https://weektodo.me/
# https://github.com/manuelernestog/weektodo
APP_NAME=WeekToDo
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based minimalist weekly planner and to do tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Calendar;Planner;To Do;"
APP_VERSION=2.2.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/weektodo/icon?4c5cc317c3cb5fcb360d64cbc4798bbe1c04c2811b760d863ca4a0f84cbd79a9
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install TagSpaces cross-platform Electron-based tool for organizing, annotating and managing local files using tags from AppImage
# https://www.tagspaces.org/
# https://github.com/tagspaces/tagspaces
APP_NAME=TagSpaces
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based tool for organizing, annotating and managing local files using tags."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Tags;File;Productivity;"
APP_VERSION=6.4.10
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-linux-x86_64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/develop/resources/icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Babashka native binary Clojure REPL and interpreter for scripting from package
APP_NAME=Babashka
APP_GUI_NAME="Native binary Clojure REPL and interpreter for scripting."
APP_VERSION=1.12.200
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/bb /usr/local/bin
sudo chmod +x /usr/local/bin/bb
sudo ln -s -f /usr/local/bin/bb /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Rabbit Calendar cross-platform calendar and task manager from Debian package
APP_NAME="Rabbit Calendar"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform calendar and task manager."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Calendar;Productivity;"
APP_VERSION=1.0.22
APP_EXT=deb
FILE_NAME=${_APP_NAME}_${APP_VERSION}_ubuntu-24.04_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/Calendar* /tmp/${APP_NAME,,}*

# Install cedit cross-platform minimalist console text editor from package
APP_NAME=cedit
APP_GUI_NAME="Cross-platform minimalist console text editor."
APP_VERSION=N/A
APP_EXT=tar.gz
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=lin64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=lin32
fi
FILE_NAME=${ARCH_TYPE}_${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/console-edit/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Rune Java Swing-based minimalist tabbed text editor from package
APP_NAME=Rune
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Java Swing-based minimalist tabbed text editor."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Editor;Text;Notepad;"
APP_VERSION=1.0.3
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/rune/icon?261ff2903085a78f5bdb9bdceac804c8ddd96e3c00eb3c5210a7a3baeeab1142
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -Xmx512M -jar ${APP_NAME,,}.jar "$@" &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install GRV Golang-based command-line GUI interface to Git repositories from package
# https://github.com/rgburke/grv
APP_NAME=GRV
APP_GUI_NAME="Golang-based command-line GUI interface to Git repositories."
APP_VERSION=0.3.2
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_linux64
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Oh My Posh cross-platform tool for customizing command prompt with colors and themes from package
# https://github.com/JanDeDobbeleer/oh-my-posh
APP_NAME="Oh My Posh"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform tool for customizing command prompt with colors and themes."
APP_VERSION=26.5.0
APP_EXT=N/A
FILE_NAME=posh-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/ohmyposh-dev.mirror/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${_APP_NAME}
cd $HOME
sudo rm -rf /tmp/posh*

# Install Dragonfly Navigator minimalist Python-based two-pane file manager from package
APP_NAME="Dragonfly Navigator"
APP_GUI_NAME="Minimalist Python-based two-pane file manager."
APP_VERSION=22.10.1
APP_EXT=tar.gz
FILE_NAME=dragonfly_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
sudo apt install -y python3-pyqt5 python3-pil
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/suncore/dflynav/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt
sudo chown -R ${USER}:${USER} /opt/dragonfly
sudo ln -s -f /opt/dragonfly/dragonfly /usr/local/bin/dragonfly
cat > /tmp/dragonfly.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/dragonfly
Exec=/opt/dragonfly/dragonfly
Icon=/opt/dragonfly/icons/dragonfly.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Accessories;System;
Keywords=File;Manager;
EOF
sudo mv /tmp/dragonfly.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install te  from package
APP_NAME=Eschecs
APP_GUI_NAME="UCI chess GUI written in Pascal with several included chess engines."
APP_VERSION=5.1.5
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION//./}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/eschecs/icon?ba7af29aa6a476d96571807a6aaf36092ef28b5ceb1b64cf34732e2a7a5f6095
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp -a /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}.sh &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=Games;Entertainment;
Keywords=Chess;Games;
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install GrassFeeder Rust-based GTK RSS/Atom news reader/aggregator from Debian package
APP_NAME=GrassFeeder
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based GTK RSS/Atom news reader/aggregator."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="RSS;News;"
APP_VERSION=0.2.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-debian11
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/schleglermarcus/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install StatAnt Qt-based spreadsheet-style statistical calculation tool from source
APP_NAME=StatAnt
APP_GUI_NAME="Qt-based spreadsheet-style statistical calculation tool."
APP_GUI_CATEGORIES="Accessories;Office;Science;"
APP_GUI_KEYWORDS="Data;Science;Spreadsheet;Statistics;"
APP_VERSION=4.1.1
APP_EXT=tar
FILE_NAME=${APP_NAME,,}${APP_VERSION//./}_source
sudo apt-get install -y qt5-default qt5-qmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 .. && make
sudo cp -a /tmp/${FILE_NAME}/build/${APP_NAME,,} /usr/local/bin  # No 'install' target for make
sudo cp -a /tmp/${FILE_NAME}/images/icon.png /usr/local/share/pixmaps/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install YouTube Music cross-platform Electron-based desktop music player from AppImage
# https://github.com/th-ch/youtube-music/
APP_NAME="YouTube Music"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based desktop music player."
APP_GUI_CATEGORIES="Audio;Entertainment;Multimedia;"
APP_GUI_KEYWORDS="Music;YouTube;"
APP_VERSION=3.7.5
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /-}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/mirror/${_APP_NAME}/icon?544aa2d0652d841941d5b4c9c92ae95246144e5575120c102890bd2a2a9c8574
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}* /tmp/${APP_NAME// /-}*

# Install MinEd text editor with Unicode and CJK support from source
# https://mined.github.io/
APP_NAME=MinEd
APP_GUI_NAME="Text editor with Unicode and CJK support."
APP_VERSION=2022.27
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Regular Expression Editor (RegExpEditor) Java-based GUI for building and testing regular expressions with Scala support from package
APP_NAME=RegExpEditor
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Java-based GUI for building and testing regular expressions with Scala support."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Editor;Regex;Java;"
APP_VERSION=2.0
APP_EXT=jar
FILE_NAME=${APP_NAME//RegExp/regexp}-${APP_VERSION}-jar-with-dependencies
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/regexpeditor/icon?1672823590
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -Xmx512M -jar ${FILE_NAME}.${APP_EXT} "$@" &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install kmon Rust-based command-line Linux kernel manager and activity monitor from package
APP_NAME=kmon
APP_GUI_NAME="Rust-based command-line Linux kernel manager and activity monitor."
APP_VERSION=1.6.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/orhun/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/${APP_NAME,,}* /usr/local/bin
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/man/* /usr/share/man/man8
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install GpgFrontend cross-platform minimalist OpenPGP/GnuPG GUI front-end tool from AppImage
# https://gpgfrontend.pub/
# https://github.com/saturneric/GpgFrontend
APP_NAME=GpgFrontend
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based minimalist weekly planner and to do tool."
APP_GUI_CATEGORIES="System;Security;Internet;"
APP_GUI_KEYWORDS="GPG;Security;PGP;"
APP_VERSION=2.1.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?16e255ffa0d0327c753ddce95c8aece6792928320c7e01cbfc84f7184eb2dd8e
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Twice Crosses Circles cross-platform tic-tac-toe puzzle game with modified rules from package
APP_NAME=twicc
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform tic-tac-toe puzzle game with modified rules."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Puzzle;Games;"
APP_VERSION=1.5
APP_EXT=7z
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=l64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=l32
fi
FILE_NAME=${APP_NAME//wi/}-${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?7c5a06b53cf8f26a8b108210dab02726f04cf611f4a0018e85c4648e4d76b764
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R -a /tmp/${FILE_NAME}/${APP_NAME//wi/}.run  /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME//wi/}.run
sudo ln -s -f /usr/local/bin/${APP_NAME//wi/}.run /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME,,//nd/}*

# Install XulSword cross-platform, Electron-based Bible study tool from AppImage
APP_NAME=XulSword
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Electron-based Bible study tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Bible;"
APP_VERSION=4.0.13
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/JohnAustinDev/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/JohnAustinDev/${APP_NAME,,}/master/assets/icons/128x128.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Gitql Golang-based command-line query language tool for Git repositories from package
# https://github.com/filhodanuvem/gitql
APP_NAME=Gitql
APP_GUI_NAME="Golang-based command-line query language tool for Git repositories."
APP_VERSION=2.3.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Statistics 101 Java-based statistics IDE for teaching/learning probability and statistics from package
# http://www.statistics101.net/
APP_NAME="Statistics 101"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java-based statistics IDE for teaching/learning probability and statistics."
APP_GUI_CATEGORIES="Development;Programming;Science;Education;"
APP_GUI_KEYWORDS="Statistics;Math;IDE;"
APP_VERSION=5.8
APP_EXT=zip
FILE_NAME=${APP_NAME// /}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/p/statistics101/icon?85995fed7b42a1f9f0b4cab9ef0ba7d483704780e93c33b8e1413d599b21683f
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R -a /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
sudo cp -a /tmp/${_APP_NAME}.png /opt/${_APP_NAME}
sudo chown -R ${USER}:${USER} /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
java -Xmx512M -jar ${APP_NAME// /}.jar \"$@\" &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME// /}* /tmp/${_APP_NAME}*

# Install Apt-Qt Qt-based Apt GUI manager/Synaptic alternative from package
APP_NAME=Apt-Qt
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Qt-based Apt GUI manager/Synaptic alternative."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Apt;Synaptic;"
APP_VERSION=0.02
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}.ico /usr/local/share/icons/${APP_NAME,,}.ico
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Hilbish Golang-based minimalist shell for Lua fans from package
APP_NAME=Hilbish
APP_GUI_NAME="Golang-based minimalist shell for Lua fans."
APP_VERSION=2.3.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Rosettea/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chown ${USER}:${USER} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,} \"$@\" &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Aptly Golang-based Debian repository management tool from package
APP_NAME=Aptly
APP_VERSION=1.6.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp /tmp/${FILE_NAME}/man/${APP_NAME,,}.1 /usr/local/man/man1
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install R-P-S-L-S cross-platform Rock, Paper, Scissors, Lizard, Spock extension to traditional game from package
APP_NAME=RPSLS
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Rock, Paper, Scissors, Lizard, Spock extension to traditional game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Games;Fun;"
APP_VERSION=1.5
APP_EXT=7z
if $(uname -m | grep '64'); then  # Check for 64-bit Linux kernel
	ARCH_TYPE=l64
else    # Otherwise use version for 32-bit kernel
	ARCH_TYPE=l32
fi
FILE_NAME=${APP_NAME,,}${ARCH_TYPE}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/r-p-s-l-s/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/r-p-s-l-s/icon?05a72d2c2511ff8e155cab6058cc9f052afa0a47ef318f7d76163fe28dc5cc53
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R -a /tmp/${FILE_NAME}/${APP_NAME,,}.run  /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}.run
sudo ln -s -f /usr/local/bin/${APP_NAME,,}.run /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME,,//nd/}*

# Install Dbmate cross-platform, Golang-based, command-line data migration tool that supports MySQL, PostgreSQL, SQLite, and ClickHouse from package
# https://github.com/amacneil/dbmate
APP_NAME=Dbmate
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Golang-based, command-line data migration tool that supports MySQL, PostgreSQL, SQLite, and ClickHouse."
APP_VERSION=2.23.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${_APP_NAME}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Gource source control repository visualization tool from source
# https://github.com/acaudwell/Gource
APP_NAME=Gource
APP_GUI_NAME="Source control repository visualization tool."
APP_VERSION=0.54
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libsdl2-dev libsdl2-image-dev libpcre2-dev libfreetype6-dev libglew-dev libglm-dev libboost-filesystem-dev libpng-dev libtinyxml-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure --with-tinyxml && make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Nanonote cross-platform Qt-based minimalist desktop notepad from Debian package
APP_NAME=Nanonote
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Qt-based minimalist desktop notepad."
APP_VERSION=1.4.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/agateau/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Jitsi Meet cross-platform Electron-based desktop video conferencing tool from AppImage
# https://github.com/jitsi/jitsi-meet-electron
APP_NAME="Jitsi Meet"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based desktop video conferencing tool."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="Video;Conferencing;"
APP_VERSION=2025.2.0
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}-electron.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/jitsi/${_APP_NAME}-electron/master/resources/icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install Pingu cross-platform, Golang-based ping tool with color output from package
# https://github.com/sheepla/pingu
APP_NAME=Pingu
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Golang-based ping tool with color output."
APP_VERSION=0.0.4-alpha
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install TMSU Golang-based command-line file tagging tool from package
# https://github.com/oniony/TMSU
APP_NAME=TMSU
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Golang-based ping tool with color output."
APP_VERSION=0.7.5
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-x86_64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/bin/* /usr/local/bin
sudo cp -a /tmp/${FILE_NAME}/man/* /usr/local/man/man1
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Turbo experimental text editor based on Scintilla and Turbo Vision from source
APP_NAME=Turbo
APP_GUI_NAME="Experimental text editor based on Scintilla and Turbo Vision."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=N/A
sudo apt-get install -y build-essential cmake gettext-base git libgpm-dev libmagic-dev libncursesw5-dev xsel
cd /tmp
git clone --recursive https://github.com/magiblot/turbo.git
cd /tmp/${APP_NAME,,}
cmake . -DCMAKE_BUILD_TYPE=Release && cmake --build . -- -j$(nproc) && sudo cp ${APP_NAME,,} /usr/local/bin
sudo cp doc/${APP_NAME,,}.1 /usr/local/man/man1
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Mergestat Lite Golang-based command-line SQL querying tool for Git repositories from package
# https://github.com/mergestat/mergestat-lite
APP_NAME=Mergestat
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line SQL querying tool for Git repositories."
APP_VERSION=0.6.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-lite.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/lib${APP_NAME,,}.so /usr/lib/x86_64-linux-gnu
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install mrViewer 2 cross-platform multimedia viewer/player from Debian package
APP_NAME=mrViewer2
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform multimedia viewer/player."
APP_VERSION=1.3.8
APP_EXT=deb
FILE_NAME=mrv2-v${APP_VERSION}-Linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/mrv2/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install GoAWK Golang-based POSIX-compliant AWK implementation with native CSV support from package
# https://github.com/benhoyt/goawk
APP_NAME=GoAWK
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based POSIX-compliant AWK implementation with native CSV support."
APP_VERSION=1.29.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install nFPM Golang-based simple, no-dependencies, DEB, RPM, APK, and Arch Linux packager from package
# https://github.com/goreleaser/nfpm
APP_NAME=nFPM
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based simple, no-dependencies, deb, rpm, apk, and Arch Linux packager."
APP_VERSION=2.42.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp -a /tmp/${FILE_NAME}/manpages/${APP_NAME,,}.1.gz /usr/local/man/man1
sudo cp -a /tmp/${FILE_NAME}/completions/${APP_NAME,,}.bash /usr/share/bash-completion/completions/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install GoReplay Golang-based tool for capturing and replaying live HTTP traffic for system testing from package
APP_NAME=GoReplay
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based tool for capturing and replaying live HTTP traffic for system testing."
APP_VERSION=1.3.3
APP_EXT=tar.gz
FILE_NAME=gor_${APP_VERSION}_x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/buger/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/gor /usr/local/bin
sudo ln -s -f /usr/local/bin/gor /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install DevDash Golang-based configurable console dashboard from package
# https://github.com/Phantas0s/devdash
APP_NAME=DevDash
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based configurable console dashboard."
APP_VERSION=0.5.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_x86
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install ttop Nim-based top-like system monitoring tool with TUI, historical data service and notifications from package
APP_NAME=ttop
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Nim-based top-like system monitoring tool with TUI, historical data service and notifications."
APP_VERSION=1.5.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME} -J -L https://github.com/inv2004/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install pdfcook command-line PDF editor from source
APP_NAME=pdfcook
APP_GUI_NAME="Command-line PDF editor."
APP_VERSION=0.4.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ksharindam/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/src
make -j$(nproc) && sudo make install && sudo make installman
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install QReadable library and command line tool for running Readability.js with Qt's Javascript engine from PPA
# https://invent.kde.org/ccarney/qreadable
sudo add-apt-repository -y ppa:cscarney/syndic
sudo apt update -y
sudo apt install -y qreadable

# Install Caesium Image Compressor cross-platform image compressor that reduces file size while preserving image quality from AppImage
APP_NAME="Caesium Image Compressor"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform image compressor that reduces file size while preserving image quality."
APP_GUI_CATEGORIES="Graphics;Accessories;"
APP_GUI_KEYWORDS="Graphics;Compressor;"
APP_VERSION=2.2.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /_}-v${APP_VERSION}-Qt6.2-ubu-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/larygwil/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/larygwil/${_APP_NAME}/main/resources/icons/logo.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install trdsql Golang-based command-line tool to execute SQL queries on CSV, LTSV, JSON and TBLN data from package
# https://github.com/noborus/trdsql
APP_NAME=trdsql
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line tool to execute SQL queries on CSV, LTSV, JSON and TBLN data."
APP_VERSION=1.0.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Qmcalc programmable scientific calculator with graphical function plotter from RPM package
# https://www.cybernadian.net/software.html#Qmcalc
APP_NAME=Qmcalc
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Programmable scientific calculator with graphical function plotter."
APP_VERSION=2.8
APP_EXT=rpm
sudo apt-get install -y alien gdebi
FILE_NAME=${APP_NAME,,}-linux.bin-${APP_VERSION}-1.$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}2/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo alien --scripts /tmp/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${APP_NAME,,}*.deb
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Pulsar cross-platform Electron-based hackable text editor (fork of discontinued Atom editor) from AppImage
APP_NAME=Pulsar
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based hackable text editor (fork of discontinued Atom editor)."
APP_GUI_CATEGORIES="Programming;Development;Accessories;"
APP_GUI_KEYWORDS="Editor;IDE;"
APP_VERSION=1.128.0
APP_EXT=AppImage
FILE_NAME=Linux.${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}-edit/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}-edit/${APP_NAME,,}/master/resources/icons/128x128.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install XFile minimalist canonical X11/Motif file manager from source
# https://fastestcode.org/xfile.html
APP_NAME=XFile
APP_GUI_NAME="Minimalist canonical X11/Motif file manager."
APP_VERSION=1.0-beta
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-src-${APP_VERSION}
sudo apt-get install -y build-essential libx11-dev libmotif-dev libxpm-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}manager/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-beta
make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Simple Sokoban minimalist SDL2-based puzzle game from source
APP_NAME="Simple Sokoban"
APP_GUI_NAME="Minimalist SDL2-based puzzle game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Sokoban;Puzzle;"
APP_VERSION=1.0.6
APP_EXT=tar.xz
FILE_NAME=simplesok-${APP_VERSION}
sudo apt-get install -y build-essential libsdl2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make -j$(nproc)
sudo mkdir -p /opt/simplesok
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/simplesok
sudo ln -s -f /opt/simplesok/simplesok /usr/local/bin/simplesok
cat > /tmp/simplesok.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/simplesok
Exec=/opt/simplesok/simplesok
Icon=/opt/simplesok/simplesok.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/simplesok.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/simplesok*

# Install mob Golang-based command-line tool for efficient pair programming with Git from package
# https://github.com/remotemobprogramming/mob
APP_NAME=mob
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line tool for efficient pair programming with Git."
APP_VERSION=4.3.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/fast-git-handover-${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install OpenRefine Java-based data analysis and cleansing tool from package
# https://github.com/OpenRefine/OpenRefine
APP_NAME=OpenRefine
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java-based data analysis and cleansing tool."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Data;Management;"
APP_VERSION=3.7.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/${APP_NAME,,}/icon?1676469722
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}/* /opt/${APP_NAME,,}
sudo cp -a /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chown -R ${USER}:${USER} /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/refine &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install TeXworks cross-platform TeX authoring environment with built-in PDF viewer from AppImage
APP_NAME=TeXworks
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform TeX authoring environment with built-in PDF viewer."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="TeX;Editor;"
APP_VERSION=0.6.9
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-202402120650-git_68a2e99
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/${APP_NAME,,}/icon?1676750780
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Sigma File Manager cross-platform canonical file manager with built-in file viewer from AppImage
# https://github.com/aleksey-hoffman/sigma-file-manager
APP_NAME="Sigma File Manager"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform canonical file manager with built-in file viewer."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="File;Manager;"
APP_VERSION=1.7.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /-}-${APP_VERSION}-Linux-Debian
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/aleksey-hoffman/${_APP_NAME}/main/build/icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME// /-}* /tmp/${_APP_NAME}*

# Install OctoSQL Golang-based command-line tool to execute SQL queries on multiple database platforms and data formats including joining data between them from package
# https://github.com/cube2222/octosql
APP_NAME=OctoSQL
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line tool to execute SQL queries on multiple database platforms and data formats including joining data between them."
APP_VERSION=0.13.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install pdfcpu Golang-based command-line PDF editor from package
# https://github.com/pdfcpu/pdfcpu
APP_NAME=pdfcpu
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line PDF editor."
APP_VERSION=0.4.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Fastfetch C-based, cross-platform, command-line minimalist system information tool from package
APP_NAME=Fastfetch
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="C-based, cross-platform, command-line minimalist system information tool."
APP_VERSION=2.45.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/fastfetch-cli/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${FILE_NAME}/* /
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install BeeRef cross-platform, PyQt-based minimalist image viewer from package
APP_NAME=BeeRef
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, PyQt-based minimalist image viewer."
APP_GUI_CATEGORIES="Accessories;Graphics;"
APP_GUI_KEYWORDS="Image;Graphics;Viewer;"
APP_VERSION=0.3.0
APP_EXT=N/A
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME} -J -L https://github.com/rbreu/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/rbreu/${APP_NAME,,}/main/${APP_NAME,,}/assets/logo.png
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install RabbitMark cross-platform, PyQt-based desktop bookmark manager from package
APP_NAME=RabbitMark
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, PyQt-based desktop bookmark manager."
APP_GUI_CATEGORIES="Accessories;Internet;"
APP_GUI_KEYWORDS="Bookmarks;"
APP_VERSION=0.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sobjornstad/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
mkdir -p ${HOME}/bin/${APP_NAME,,}
cp -a /tmp/${FILE_NAME}/* ${HOME}/bin/${APP_NAME,,}
python3 -m venv ${HOME}/bin/${APP_NAME,,}/.venv
source ${HOME}/bin/${APP_NAME,,}/.venv/bin/activate
python3 -m pip install -r ${HOME}/bin/${APP_NAME,,}/requirements.txt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd \$HOME/bin/${APP_NAME,,}
source \$HOME/bin/${APP_NAME,,}/.venv/bin/activate
python3 -m \$HOME/bin/${APP_NAME,,}/${APP_NAME,,}/__main__.py &
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=${HOME}/bin/${APP_NAME,,}/resources/${APP_NAME,,}-rabbit.jpg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install bvi hex editor with vi keybindings from source
# https://bvi.sourceforge.net/
APP_NAME=bvi
APP_GUI_NAME="Hex editor with vi keybindings."
APP_VERSION=1.4.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.src
sudo apt-get install -y build-essential libncurses-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}
./configure && make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install bfs variant of 'find' command that does breadth-first search (BFS) from source
APP_NAME=bfs
APP_GUI_NAME="Variant of 'find' command that does breadth-first search (BFS)."
APP_VERSION=3.0.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential acl libacl1-dev attr libattr1-dev libcap2-bin libcap-dev libonig-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/tavianator/${APP_NAME,,}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Agena cross-platform, interpreted, general-purpose programming language from Debian package
APP_NAME=Agena
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, interpreted, general-purpose programming language."
APP_VERSION=4.12.10
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux.$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install mdcat Rust-based command-line renderer for Markdown documents from package
APP_NAME=mdcat
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Rust-based command-line renderer for Markdown documents."
APP_VERSION=2.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/swsnr/${APP_NAME,,}/releases/download/${APP_NAME,,}-${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}.1 /usr/local/man/man1
sudo cp -a /tmp/${FILE_NAME}/completions/${APP_NAME,,}.bash /usr/share/bash-completion/completions/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install xemu cross-platform original Xbox emulator from AppImage
# https://github.com/xemu-project/xemu
APP_NAME=xemu
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform original Xbox emulator."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Games;Retro;Emulation;"
APP_VERSION=0.7.86
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/xemu/icon?b00b4681ddb2968d2e501cff71a1a9dad50308418966a2bb75dbaa055691a5cd
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Dinosaur RSS cross-platform Electron-based simple RSS news aggregator/reader from AppImage
APP_NAME="Dinosaur RSS"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based simple RSS news aggregator/reader."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="RSS;News;Aggregator;"
APP_VERSION=1.10.1
APP_EXT=AppImage
FILE_NAME=Dinosaur.Rss.${APP_VERSION}.x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/richshaw2015/dino-rss-electron/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/richshaw2015/dino-rss-electron/master/build/logo.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}* /tmp/${APP_NAME}*

# Install SiYuan cross-platform Electron-based notepad and personal knowledge-management tool with markdown support from AppImage
# https://github.com/siyuan-note/siyuan
APP_NAME=SiYuan
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based notepad and personal knowledge-management tool with markdown support."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;Markdown;"
APP_VERSION=3.1.31
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/siyuan/icon?6c1938c56e7567b5e62741d3453d4477f961ff2756d6c946328fbad307acbbcf
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ReacType cross-platform, prototyping tool for React/TypeScript applications with drag-and-drop interactive canvas from Debian package
# https://github.com/open-source-labs/ReacType
APP_NAME=ReacType
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, prototyping tool for React/TypeScript applications with drag-and-drop interactive canvas."
APP_VERSION=14.0.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux.deb
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}/${APP_NAME,,}-v${APP_VERSION}.deb
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install LBreakoutHD SDL-based HD Breakout game from source
APP_NAME=LBreakoutHD
APP_GUI_NAME="SDL-based HD Breakout game."
APP_VERSION=1.1.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt-get install -y build-essential libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev libsdl2-mixer-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/lgames/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make --jobs=$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Electron Fiddle cross-platform tool for learning Electron development from AppImage
# https://github.com/electron/fiddle
APP_NAME="Electron Fiddle"
_APP_NAME=$(echo ${APP_NAME} | tr '[:blank:]' '.')
APP_GUI_NAME="Cross-platform tool for learning Electron development."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Electron;JavaScript;"
APP_VERSION=0.36.0
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/electron-fiddle.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/mirror/electron-fiddle/icon?186d1312d7a10539f73e69df92163eb31560e396f9a9ea997aea7e8002d04653
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install Matterhorn Haskell-based command-line client for Mattermost messenger platform from package
# https://github.com/matterhorn-chat/matterhorn
APP_NAME=Matterhorn
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Haskell-based command-line client for Mattermost messenger platform."
APP_VERSION=90000.1.0
APP_EXT=tar.bz2
source /etc/lsb-release
if [[ "${DISTRIB_CODENAME:0:2}" =~ (bi|co|di|eo)$ ]]; then  # 18.04 - 19.10
	DISTRO_NBR=18.04-bionic
elif [[ "${DISTRIB_CODENAME:0:2}" =~ (fo|gr|hi|im)$ ]]; then  # 20.04 - 21.10
	DISTRO_NBR=20.04-focal
elif [[ "${DISTRIB_CODENAME:0:2}" =~ (ja|ki|lu|ma|no|or|pl)$ ]]; then  # 22.04 - 
	DISTRO_NBR=22.04-jammy
fi
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-ubuntu-${DISTRO_NBR}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Nuitka cross-platform optimizing Python compiler from package
# https://nuitka.net/
CODENAME=`egrep 'UBUNTU_CODENAME|VERSION_CODENAME' /etc/os-release | sort | head -1 | cut -d= -f2`
if [ -z "$CODENAME" ]
then
   CODENAME=`lsb_release -c -s`
fi
wget -O - https://nuitka.net/deb/archive.key.gpg | sudo apt-key add -
sudo apt-get install ca-certificates
sudo echo >/etc/apt/sources.list.d/nuitka.list "deb https://nuitka.net/deb/stable/$CODENAME $CODENAME main"
sudo apt-get update
sudo apt-get install nuitka

# Install Pass Simple cross-platform Qt-based GUI for standard Unix/Linux password store from Debian package
# https://github.com/shemeshg/pass-simple-qt
APP_NAME="Pass Simple"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Qt-based GUI for standard Unix/Linux password store."
APP_VERSION=1.0.15
APP_EXT=deb
FILE_NAME=${_APP_NAME}-${APP_VERSION}-Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install X-Pipe Java-based command-line connection manager and file manager for local and remote file systems from package
APP_NAME=X-Pipe
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '-' )
APP_GUI_NAME="Java-based command-line connection manager and file manager for local and remote file systems."
APP_GUI_CATEGORIES="Internet;System;"
APP_GUI_KEYWORDS="File;Manager;"
APP_VERSION=12.3.4
APP_EXT=tar.gz
FILE_NAME=${_APP_NAME}-portable-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${_APP_NAME}-io/${_APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R -a /tmp/${FILE_NAME}/${_APP_NAME}-${APP_VERSION}/* /opt/${_APP_NAME}
sudo cp -a /tmp/${FILE_NAME}/${_APP_NAME}-${APP_VERSION}/cli/man/*.1 /usr/local/man/man1
sudo cp -a /tmp/${FILE_NAME}/${_APP_NAME}-${APP_VERSION}/cli/${_APP_NAME}_completion /usr/share/bash-completion/completions
sudo ln -s -f /opt/${_APP_NAME}/cli/bin/${_APP_NAME} /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/opt/${_APP_NAME}/app/bin/${_APP_NAME}d
Icon=/opt/${_APP_NAME}/app/lib/${_APP_NAME}d.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install QA2 C++/Qt-based 128kB Enhanced Apple //e emulator from package
APP_NAME=QA2
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '-' )
APP_GUI_NAME="C++/Qt-based 128kB Enhanced Apple //e emulator."
APP_GUI_CATEGORIES="Development;System;"
APP_GUI_KEYWORDS="Apple;Retro;Emulator;"
APP_VERSION=v002
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_centos7_x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/qa2/icon?1534612046
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${FILE_NAME}/${APP_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install DeltaChat cross-platform Electron-based chat/messenger over e-mail client from AppImage
APP_NAME=DeltaChat
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based chat/messenger over e-mail client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Chat;Messenger;"
APP_VERSION=1.46.8
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}-desktop/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}-desktop/master/build/icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Sniffnet cross-platform, Rust-based GUI network traffic monitoring tool from Debian package
APP_NAME=Sniffnet
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Rust-based GUI network traffic monitoring tool."
APP_VERSION=1.3.2
APP_EXT=deb
FILE_NAME=${APP_NAME}_Linux
sudo apt install -y libpcap0.8
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/GyulyVGC/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install KeeperRL SDL-based dungeon exploration game with Rouge-like elements from source
# https://github.com/miki151/keeperrl
APP_NAME=KeeperRL
APP_GUI_NAME="SDL-based dungeon exploration game with Rouge-like elements."
APP_VERSION="1.0 hotfix 19"
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}%20${APP_VERSION// /%20}%20source%20code
sudo apt-get install -y build-essential libsdl2-dev libsdl2-image-dev libopenal-dev libvorbis-dev libtheora-dev llvm-14 clang-14
sudo ln -s -f /usr/bin/clang++-14 /usr/bin/clang++
sudo ln -s -f /usr/bin/clang-14 /usr/bin/clang
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/*${APP_NAME,,}*
sed -i.bak 's@STEAMWORKS = true@# STEAMWORKS = true@g' Makefile
make --jobs=$(nproc) OPT=true RELEASE=true && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Berty cross-platform Golang-based secure P2P chat/messenger from package
# https://github.com/berty/berty
APP_NAME=Berty
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform  Golang-based secure P2P chat/messenger."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Chat;Messenger;"
APP_VERSION=2.470.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}gui_linux_amd64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/berty/icon?5f967338420a0a27252b72512a43ee430dc29363d6ad0c9c54bf16082f458047
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}gui /usr/local/bin
sudo ln -s -f /usr/local/bin/${APP_NAME,,}gui /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,} gui
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install gh-dash Golang-based command-line dashboard for GitHub from package
# https://github.com/dlvhdr/gh-dash
APP_NAME=gh-dash
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line dashboard for GitHub."
APP_VERSION=3.7.7
APP_EXT=N/A
FILE_NAME=linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Tuba Vala-based Fediverse client for GNOME from Flatpak
# https://github.com/GeopJr/Tuba
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub dev.geopjr.Tuba

# Install xq Golang-based command-line XML/HTML extractor and formatter from package
# https://github.com/sibprogrammer/xq
APP_NAME=xq
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line XML/HTML extractor and formatter."
APP_VERSION=1.2.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-code.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install hex command-line tool to convert binary files between HEX, BIN, and ELF formats from package
# https://github.com/sibprogrammer/xq
APP_NAME=hex
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Command-line tool to convert binary files between HEX, BIN, and ELF formats."
APP_VERSION=2.02
APP_EXT=tar.gz
FILE_NAME="${APP_NAME,,}_v${APP_VERSION}_Release_Linux_X86_64_(debian_10.12.0)"
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/intel-hex-file-processing/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}*/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install AppOutlet Electron-based universal Linux app store from AppImage
APP_NAME=AppOutlet
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Electron-based universal Linux app store."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="App;Store;"
APP_VERSION=2.1.0
APP_EXT=AppImage
FILE_NAME=App.Outlet-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/main/src/assets/icon/icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install bore Rust-based command-line tool to open tunnel to localhost from package
# https://github.com/ekzhang/bore
APP_NAME=bore
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Rust-based command-line tool to open tunnel to localhost."
APP_VERSION=0.5.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install CubeSolver Qt-based GUI Rubik's cube solver with fast algorithm from source
APP_NAME=CubeSolver
APP_GUI_NAME="Qt-based GUI Rubik's cube solver with fast algorithm."
APP_GUI_CATEGORIES="Development;Science;"
APP_GUI_KEYWORDS="Puzzle;Rubik;"
APP_VERSION=0.2.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y qt5-qmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make -j$(nproc) && sudo make install 
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
# Icon=/usr/local/share/pixmaps/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Yang Downloader YouTube video downloader that saves videos in VP9 format from AppImage
APP_NAME="Yang Downloader"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="YouTube video downloader that saves videos in VP9 format."
APP_GUI_CATEGORIES="Multimedia;Video;Internet;"
APP_GUI_KEYWORDS="YouTube;Video;"
APP_VERSION=3.3.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /}-${APP_VERSION}_Linux_x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME//-/}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/p/yangdownloader/icon?bc2d7c14a7328d9b6f898375840fab8cc27b638cf1af512264f3cca052975879
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${_APP_NAME}*

# Install Draft Notes cross-platform C#-based screen capture tool with built-in annotation functions from package
APP_NAME="Draft Notes"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform C#-based screen capture tool with built-in annotation functions."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Screen;Capture;Editor;"
APP_VERSION=2.0
APP_EXT=7z
FILE_NAME=Draft_2_0_notes_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/Draft_notes /usr/local/bin/${_APP_NAME}
sudo chmod +x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
#Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Soft Serve Golang-based command-line self-hosted Git server with SSH support from package
# https://github.com/charmbracelet/soft-serve
APP_NAME="Soft Serve"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line self-hosted Git server with SSH support."
APP_VERSION=0.5.0
APP_EXT=tar.gz
FILE_NAME=${_APP_NAME}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/soft /usr/local/bin
sudo chmod +x /usr/local/bin/soft
sudo cp -a /tmp/${FILE_NAME}/manpages/${_APP_NAME}.1.gz /usr/local/man/man1
sudo cp -a /tmp/${FILE_NAME}/completions/${_APP_NAME}.bash /usr/share/bash-completion/completions/${_APP_NAME}
sudo ln -s -f /usr/local/bin/soft /usr/local/bin/${_APP_NAME}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Ellas War Electron-based Ancient Greek-themed role-playing game from AppImage
APP_NAME="Ellas War"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Electron-based Ancient Greek-themed role-playing game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="History;Games;RPG;"
APP_VERSION=2.1.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/V-Paranoiaque/${APP_NAME// /-}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/V-Paranoiaque/${APP_NAME// /-}/master/res/electron/icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME// /}* /tmp/${APP_NAME// /-}*

# Install IntelliShell Rust-based command-line history enhancement like Intellisense from package
APP_NAME=Intelli-Shell
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Rust-based command-line history enhancement like Intellisense."
APP_VERSION=0.2.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/lasantosr/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/* /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
echo 'source /usr/local/bin/${APP_NAME,,}.sh' >> $HOME/.bashrc
source $HOME/.bashrc	# Reload Bash configuration
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Spedread GTK Vala-based minimalist desktop speedreading application from Flatpak
# https://github.com/Darazaki/Spedread
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub com.github.Darazaki.Spedread

# Install pget Golang-based command-line fast, resumable parallel file download tool from package
# https://github.com/Code-Hex/pget
APP_NAME=pget
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line fast, resumable parallel file download tool."
APP_VERSION=0.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Restfox cross-platform offline-first HTTP REST and GraphQL client from Snap package
# https://github.com/flawiddsouza/Restfox
APP_NAME=Restfox
APP_GUI_NAME="Restfox cross-platform offline-first HTTP REST and GraphQL client."
APP_VERSION=0.38.0
APP_EXT=snap
FILE_NAME=${APP_NAME}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
sudo apt-get install -y snapd snapd-xdg-open
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo snap install --dangerous /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Just Fast simple, two-pane, C++-based console file manager from source
APP_NAME="Just Fast"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Simple, two-pane, C++-based console file manager."
APP_VERSION=N/A
APP_EXT=N/A
FILE_NAME=N/A
sudo apt-get install -y build-essential cmake
cd /tmp
git clone https://github.com/GiuseppeCesarano/${_APP_NAME}.git
cd /tmp/${_APP_NAME}
cmake . -B build -DCMAKE_BUILD_TYPE=Release && cd build && cmake --build .
sudo cp -a jf /usr/local/bin
cd $HOME
rm -rf /tmp/*${_APP_NAME}*

# Install wxMEdit cross-platform text/hex editor based on MadEdit from source
# https://github.com/wxMEdit/wxMEdit
APP_NAME=wxMEdit
APP_GUI_NAME="Cross-platform text/hex editor based on MadEdit."
APP_VERSION=3.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y build-essential libgtk-3-dev libwxgtk3.0-gtk3-dev libboost-dev libicu-dev libcurl4-gnutls-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Roswell cross-platform Lisp environment launcher from package
APP_NAME=Roswell
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Lisp environment launcher."
APP_VERSION=24.10.115
APP_EXT=tar.bz2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}
sudo make install && ros
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Lem cross-platform editor/IDE for Common Lisp from package
# https://github.com/lem-project/lem
APP_NAME=Lem
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform editor/IDE for Common Lisp."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Editor;IDE;Lisp;"
APP_VERSION=2.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-v${APP_VERSION}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/${APP_NAME,,}-v${APP_VERSION}/* /opt/${APP_NAME,,}
# sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,}-ncurses /usr/local/bin/${APP_NAME,,}-ncurses
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/resources/icon.png
Type=Application
StartupNotify=true
Terminal=false
Category=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Szyszka cross-platform Rust-based simple GUI bulk file renaming tool from AppImage
APP_NAME=Szyszka
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Rust-based simple GUI bulk file renaming tool."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="File;Rename;"
APP_VERSION=3.0.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}
sudo apt install -y libgtk-4-bin
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/qarmin/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/qarmin/${APP_NAME,,}/master/data/icons/com.github.qarmin.${APP_NAME,,}.svg
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME// /}* /tmp/${APP_NAME// /-}*

# Install ASUD cross-platform Sudoku puzzle assistant from package
APP_NAME=ASUD
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Sudoku puzzle assistant."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Sudoku;Puzzle;"
APP_VERSION=1jun24
APP_EXT=7z
FILE_NAME=sud${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}-v${APP_VERSION}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/sudoku/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/lsudx &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/docs/xwing/sashimiXwing.png
Type=Application
StartupNotify=true
Terminal=false
Category=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ChatGPT cross-platform Rust-based simple GUI tool from AppImage
# https://github.com/lencx/ChatGPT
APP_NAME=ChatGPT
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Rust-based simple GUI tool."
APP_GUI_CATEGORIES="Accessories;System;Development;Programming;"
APP_GUI_KEYWORDS="ChatGPT;"
APP_VERSION=1.0.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT}.tar.gz -J -L https://downloads.sourceforge.net/${APP_NAME,,}-desktop.mirror/${FILE_NAME}.${APP_EXT}.tar.gz
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/chatgpt-desktop/icon?4914db46a1e9e068e7c201a94b7219cc9358a419dc1f0a5e000540295753bd8e
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}.tar.gz
sudo cp -a /tmp/${FILE_NAME}*/chat*.${APP_EXT} /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install ASCII DASH ncurses console version of Boulderdash game from source
APP_NAME="ASCII DASH"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Ncurses console version of Boulderdash game."
APP_VERSION=1.3
APP_EXT=zip
FILE_NAME=${APP_NAME// /-}-${APP_VERSION}
sudo apt install -y build-essential g++ cmake libncurses5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
cmake . && make -j$(nproc)
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
/opt/${_APP_NAME}/main &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cd $HOME
rm -rf /tmp/*${APP_NAME// /-}*

# Install keyd Linux X/Windows keyboard remapping tool that runs as a service from source
APP_NAME=keyd
APP_GUI_NAME="Linux X/Windows keyboard remapping tool that runs as a service."
APP_VERSION=v2.4.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y python3-xlib
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rvaiya/${APP_NAME,,}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/${APP_NAME,,}*
make && sudo make install
sudo systemctl enable keyd && sudo systemctl start keyd
cat > /tmp/${APP_NAME,,}_default.conf << EOF
[ids]

*

[main]

# Maps capslock to escape when pressed and control when held.
capslock = overload(control, esc)

# Remaps the escape key to capslock
esc = capslock
EOF
sudo mv /tmp/${APP_NAME,,}_default.conf /etc/${APP_NAME,,}/default.conf
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Vertopal CLI cross-platform command-line interface to online file conversion utility from package
APP_NAME="Vertopal CLI"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform command-line interface to online file conversion utility."
APP_VERSION=1.0.3
APP_EXT=zip
FILE_NAME=${_APP_NAME}-v${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${_APP_NAME//-cli/} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install ShortGPT Lite simple Windows/Linux GUI tool for getting quick, concise answers for OpenAI GPT3/GPT4 LLMs from package
APP_NAME="ShortGPT Lite"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Simple Windows/Linux GUI tool for getting quick, concise answers for OpenAI GPT3/GPT4 LLMs."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="ChatGPT;LLM;GPT;"
APP_VERSION=1.0.0
APP_EXT=zip
FILE_NAME=${_APP_NAME}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
mkdir -p /opt/${_APP_NAME}
sudo cp -R -a /tmp/${FILE_NAME}/${_APP_NAME}-linux /opt/${_APP_NAME}
sudo chmod +x /opt/${_APP_NAME}/${_APP_NAME//-/_}
sudo ln -s -f /opt/${_APP_NAME}/${_APP_NAME//-/_} /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/opt/${_APP_NAME}/${_APP_NAME//-/_}
Icon=/opt/${_APP_NAME}/data/flutter_assets/assets/images/shortgpt-logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME// /}* /tmp/${APP_NAME// /-}*

# Install cs Golang-based command-line/TUI code search tool from package
APP_NAME=cs
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line/TUI code search tool."
APP_VERSION=1.4.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/boyter/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Doculib Ocaml-based GUI for tagging and managing document metadata for books, textbooks, or articles from Debian package
APP_NAME=Doculib
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Ocaml-based GUI for tagging and managing document metadata for books, textbooks, or articles."
APP_VERSION=1.3.5
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
sudo apt install -y libev4
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/nguermond/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Rawhide (rh) console tool for searching for files using C-style expressions from source
APP_NAME=Rawhide
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Console tool for searching for files using C-style expressions."
APP_VERSION=3.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://raf.org/rawhide/download/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make -j$(nproc) && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Shell Assistant cross-platform, tabbed SSH/SFTP client, file manager, shell, text editor, and password manager tool from AppImage
APP_NAME="Shell Assistant"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]' )
APP_GUI_NAME="Cross-platform, tabbed SSH/SFTP client, file manager, shell, text editor, and password manager tool."
APP_GUI_CATEGORIES="Accessories;System;Internet;"
APP_GUI_KEYWORDS="SSH;SFTP;Editor;Shell;File;Manager;Password;"
APP_VERSION=0.9.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://shellassistant.com/install/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/p/shell-assistant/icon?b31c3136f18f7ccc001cda5cda70f89c43bff28e58b38f4ba32e0c1748718ac7
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME// /}* /tmp/${_APP_NAME}*

# Install UMHDL cross-platform Java-based IDE for learning digital design using Hardward Description Language (HDL) from package
APP_NAME=UMHDL
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Java-based IDE for learning digital design using Hardward Description Language (HDL)."
APP_GUI_CATEGORIES="Programming;Development;Education;"
APP_GUI_KEYWORDS="Electronics;IDE;Programming;"
APP_VERSION=2.5
APP_EXT=bin
FILE_NAME=${APP_NAME,,}-setup-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
chmod +x /tmp/${FILE_NAME}.${APP_EXT}
sudo /tmp/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/${APP_NAME,,}
Exec=/usr/local/${APP_NAME,,}/${APP_NAME,,}
Icon=/usr/local/${APP_NAME,,}/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Category=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install ChatALL cross-platform Vue.JS-based simple GUI tool for simultaneous/concurrent interaction with multiple LLMs, including ChatGPT, Bing Chat, Bard, Alpaca, Vicuna, and more from AppImage
# https://github.com/sunner/ChatALL
APP_NAME=ChatALL
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Vue.JS-based simple GUI tool for simultaneous/concurrent interaction with multiple LLMs, including ChatGPT, Bing Chat, Bard, Alpaca, Vicuna, and more."
APP_GUI_CATEGORIES="Accessories;System;Development;Programming;"
APP_GUI_KEYWORDS="ChatGPT;LLM;"
APP_VERSION=1.85.110
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/chatall/icon?ace510022d940f12a181381c1c7f45f3fb64fea2d16302f28f268aaee4cb6d49
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install ExpidusOS File Manager cross-platform Flutter-based canonical file manager from package
APP_NAME="ExpidusOS File Manager"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Flutter-based canonical file manager."
APP_GUI_CATEGORIES="Accessories;System;Utility;"
APP_GUI_KEYWORDS="File;Manager;"
APP_VERSION=0.2.1
APP_EXT=zip
FILE_NAME=com.expidusos.file_manager-linux-x64 
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ExpidusOS/file-manager/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
chmod +x /tmp/${FILE_NAME}/file_manager
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
sudo ln -s -f /opt/${_APP_NAME}/file_manager /usr/local/bin/${_APP_NAME}
sudo ln -s -f /opt/${_APP_NAME}/file_manager /usr/local/bin/efm
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/opt/${_APP_NAME}/file_manager %U
Icon=/opt/${_APP_NAME}/data/com.expidusos.file_manager.png
Type=Application
StartupNotify=true
Terminal=false
Category=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME}*

# Install Hoverfly Golang-based web services/API mocking tool from package
APP_NAME=Hoverfly
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line/TUI code search tool."
APP_VERSION=1.5.3
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_bundle_linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install SMC cross-platform Java-based state machine compiler for 14 programming languages from package
APP_NAME=SMC
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Java-based state machine compiler for 14 programming languages."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="State;Machine;Compiler;"
APP_VERSION=7.6.0
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}_${APP_VERSION//./_}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
mv /tmp/${FILE_NAME}/bin/Smc.jar /tmp/${FILE_NAME}/bin/${APP_NAME,,}.jar
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/bin/${APP_NAME,,}.jar "$@"
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PkgX Deno-based next-generation, cross‐platform package management tool from package
# https://github.com/pkgxdev/pkgx
APP_NAME=PkgX
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Deno-based next-generation, cross‐platform package management tool."
APP_VERSION=2.7.0
APP_EXT=tar.xz
BASE_ARCH=$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
FILE_NAME=${APP_NAME,,}-${APP_VERSION}+linux+${BASE_ARCH//_/-}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/tea.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install P3X OneNote cross-platform, Electron-based GUI for online OneNote from AppImage
APP_NAME=P3X-OneNote
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Electron-based GUI for online OneNote."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="OneNote;"
APP_VERSION=2025.4.124
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/patrikx3/onenote/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/patrikx3/onenote/master/src/electron/images/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Notepad-- cross-platform Notepad++ text editor clone from AppImage
APP_NAME="Notepad--"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Notepad++ text editor clone."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Text;Editor;Notepad;"
APP_VERSION=2.20
APP_EXT=AppImage
sudo apt install -y libfuse2 libqt5xmlpatterns5
FILE_NAME=subtwo-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/notepad-dd/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/notepad-dd/icon?1c622609bc3881c99d944b4753bc1bfb44b4676da9b5f161a8d816a2fa1e8691
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${FILE_NAME}*

# Install Projectable cross‐platform, Rust-based development-focused command-line file manager from package
APP_NAME=Projectable
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based development-focused command-line file manager."
APP_VERSION=1.3.0
APP_EXT=tar.gz
BASE_ARCH=
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dzfrias/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/prj /usr/local/bin
sudo ln -s -f /usr/local/bin/prj /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Step-CLI cross‐platform, Golang-based CLI for working with PKI systems, such as X.509/SSH certificate authorities, etc. from package
APP_NAME=Step
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based CLI for working with PKI systems, such as X.509/SSH certificate authorities, etc.."
APP_VERSION=0.28.0
APP_EXT=tar.gz
BASE_ARCH=
FILE_NAME=${APP_NAME,,}_linux_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/smallstep/cli/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}_${APP_VERSION}/bin/${APP_NAME,,} /usr/local/bin
# Add auto-complete aliases.
step completion bash > /tmp/${FILE_NAME}/${APP_NAME,,}_autocomplete.sh
source /tmp/${FILE_NAME}/${APP_NAME,,}_autocomplete.sh
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Step-CA cross‐platform, Golang-based, self-hosted X.509/SSH certificate authority from package
APP_NAME=Step-CA
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based, self-hosted X.509/SSH certificate authority."
APP_VERSION=0.28.3
APP_EXT=tar.gz
BASE_ARCH=
FILE_NAME=${APP_NAME,,}_linux_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/smallstep/certificates/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}_${APP_VERSION}/${APP_NAME,,} /usr/local/bin
# sudo ln -s -f /usr/local/bin/${APP_NAME,,} /usr/local/bin/step
# Install Step-CA as systemd service.
sudo useradd --system --home /etc/step-ca --shell /bin/false step
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install mise cross‐platform, Rust-based, polyglot run-time package manager from package
APP_NAME=mise
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based, run-time package manager."
APP_VERSION=2024.10.9
APP_EXT=tar.xz
BASE_ARCH=
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jdx/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}/bin/${APP_NAME,,} /usr/local/bin
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}/man/man1/${APP_NAME,,}.1 /usr/share/man/man1
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install jql cross‐platform, Rust-based, JSON Query Language tool from package
APP_NAME=jql
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based, JSON Query Language tool."
APP_VERSION=8.0.6
APP_EXT=tar.gz
BASE_ARCH=
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/yamafaktory/${APP_NAME,,}/releases/download/${APP_NAME,,}-v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Eagle Mode zoomable UI with file manager, viewers, etc. from package
APP_NAME="Eagle Mode"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]' )
APP_GUI_NAME="Zoomable UI with file manager, viewers, etc."
APP_GUI_CATEGORIES="Accessories;System;Utility;"
APP_GUI_KEYWORDS="File;Manager;Viewer;"
APP_VERSION=0.96.1
APP_EXT=txz
FILE_NAME=${_APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-1
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R -a /tmp/${FILE_NAME}/usr/* /usr
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME}*

# Install Cultura cross‐platform, Rust-based trivia tool from package
APP_NAME=Cultura
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based trivia tool."
APP_VERSION=1.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/antham/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
dtrx -n /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
echo 'source <('${APP_NAME,,}' init bash)' >> $HOME/.bashrc
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Locker cross‐platform, Golang-based tool to store secrets on your local file system as key-value pairs from package
APP_NAME=Locker
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based tool to store secrets on your local file system as key-value pairs."
APP_VERSION=0.3.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/lucasepe/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
tar xzf /tmp/${FILE_NAME}.${APP_EXT} -p -C /tmp/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Neovim cross‐platform, next-generation Vim text editor from AppImage
APP_NAME=Neovim
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, next-generation Vim text editor."
APP_VERSION=0.11.2
APP_EXT=AppImage
FILE_NAME=nvim
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT,,}
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${FILE_NAME}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Gopeed cross-platform Golang-based multi-protocol download manager from package
APP_NAME=Gopeed
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Golang-based multi-protocol download manager."
APP_GUI_CATEGORIES="Internet;System;"
APP_GUI_KEYWORDS="Download;Manager;P2P;"
APP_VERSION=1.7.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-web-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/GopeedLab/${APP_NAME,,}/main/ui/flutter/assets/icon/icon_1024.png
cd /tmp
extract /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.sh << EOF
#! /bin/sh
if ! pgrep -x "${APP_NAME,,}" > /dev/null; then
    /usr/local/bin/gopeed &
fi
xdg-open http://localhost:9999/ &
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,}.sh /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}.sh
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}.sh
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Agregore Browser cross-platform minimalist web browser for the distributed web (IPFS) from AppImage
APP_NAME="Agregore Browser"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform minimalist web browser for the distributed web (IPFS)."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="Browser;IPFS;"
APP_VERSION=2.12.1
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/AgregoreWeb/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/AgregoreWeb/${_APP_NAME}/master/build/icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install CsScintilla cross-platform port of Scintilla editor to CopperSpice library from Debian package
APP_NAME=CsScintilla
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform port of Scintilla editor to CopperSpice library."
APP_VERSION=1.8.2
APP_EXT=deb
FILE_NAME=LS-CS-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install DeepSearch5Plus cross-platform Python/Qt-based recursive search tool that can search inside files from package
APP_NAME=DeepSearch5Plus
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform Python/Qt-based recursive search tool that can search inside files."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Search;File Manager;"
APP_VERSION=1.7.09
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}_linux_x32_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?413c49cf59750a8f7accb87fd7dafa67f28900b2a9e1a8822199892b70a7ca1e
cd /tmp
mkdir /tmp/${FILE_NAME}
tar -zxf /tmp/${FILE_NAME}.${APP_EXT} -C /tmp/${FILE_NAME}
sudo cp -a -R /tmp/${FILE_NAME}/${APP_NAME,,} /opt
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}

# Install JookDB cross-platform database GUI with support for many platforms, including MySQL, MariaDB, Oracle, PostgreSQL, SQLite, MongoDB, DM, OceanBase, TiDB and SQLServer from AppImage
# https://github.com/jooksoft/jookdb
APP_NAME=JookDB
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform database GUI with support for many platforms, including MySQL, MariaDB, Oracle, PostgreSQL, SQLite, MongoDB, DM, OceanBase, TiDB and SQLServer."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Database;SQL;NoSQL;"
APP_VERSION=7.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_x64
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://jookdb.com/img/logo.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Git Credential Manager (GCM) cross‐platform, C#/.NET-based tool to manage credentials for GitHub and other Git hosts from package
APP_NAME="Git Credential Manager"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, C#/.NET-based tool to manage credentials for GitHub and other Git hosts."
APP_VERSION=2.2.2
APP_EXT=tar.gz
FILE_NAME=gcm-linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU).${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
tar xzf /tmp/${FILE_NAME}.${APP_EXT} -p -C /tmp/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME}/${_APP_NAME} /usr/local/bin
sudo cp -a /tmp/${FILE_NAME}/lib*.so /usr/lib
sudo ln -s -f /usr/local/bin/${_APP_NAME} /usr/local/bin/gcm
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install MeGit standalone Java-based GTK Git GUI based on EGit from Eclipse project from package
APP_NAME=MeGit
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Standalone Java-based GTK Git GUI based on EGit from Eclipse project."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Git;Programming;Version Control;"
APP_VERSION=0.6.0
APP_EXT=zip
FILE_NAME=com.eclipsesource.${APP_NAME,,}-linux.gtk.$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/${APP_NAME,,}/icon?1f96b5db85de7c347b5d329c7f7b0f460c0cc3b33be6d5d3471f53f4de3fe98f
cd /tmp
mkdir -p /tmp/${FILE_NAME}
unzip -q /tmp/${FILE_NAME}.${APP_EXT} -d /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Mission Center Rust/GTK4-based Linux GUI system monitor from AppImage
APP_NAME="Mission Center"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-' )
APP_GUI_NAME="Rust/GTK4-based Linux GUI system monitor."
APP_GUI_CATEGORIES="System;"
APP_GUI_KEYWORDS="Monitor;"
APP_VERSION=0.6.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME// /}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt-get install -y libfuse
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.com/mission-center-devs/${_APP_NAME}/-/jobs/5758204276/artifacts/raw/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.svg -J -L https://gitlab.com/mission-center-devs/${_APP_NAME}/-/raw/main/data/icons/hicolor/scalable/apps/io.missioncenter.MissionCenter.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.svg /usr/local/share/icons/${_APP_NAME}.svg
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Dorion cross-platform Rust-based alternative Discord GUI client from package
APP_NAME=Dorion
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Rust-based alternative Discord GUI client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Discord;"
APP_VERSION=6.7.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
tar -xf /tmp/${FILE_NAME}.${APP_EXT} -C /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/icons/icon_macos.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Hexowl cross-platform flexible console programmer's calculator from Debian package
APP_NAME=Hexowl
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform flexible console programmer's calculator."
APP_VERSION=1.4.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/DECE2183/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT} 
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Jujutsu cross‐platform, Rust-based Git-compatible version control tool with nice features from other VCS tools from package
# https://github.com/martinvonz/jj
APP_NAME=Jujutsu
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Git-compatible version control tool with nice features from other VCS tools."
APP_VERSION=0.29.0
APP_EXT=tar.gz
FILE_NAME=jj-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-vcs.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
tar xzf /tmp/${FILE_NAME}.${APP_EXT} -p -C /tmp/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME}/jj /usr/local/bin
sudo ln -s -f /usr/local/bin/jj /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install qDesk cross-platform P2P messenger and social media platform from AppImage
APP_NAME=qDesk
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform P2P messenger and social media platform."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="P2P;Messenger;Social Media;"
APP_VERSION=0.9.4
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/qd-app.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/QuestNetwork/qD/master/dist_archive/ipfs/0.9.4/assets/icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Quest Messenger cross-platform P2P messenger and social media platform from AppImage
https://github.com/QuestNetwork/qd-messages-ts
APP_NAME="Quest Messenger"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform P2P messenger and social media platform."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="P2P;Messenger;Social Media;"
APP_VERSION=0.9.2
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/qd-messages.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/mirror/qd-messages/icon?b97040a1e77af7220ff35c436d8147e66f5a0cb9f8b305ebc5152d697164007d
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Peerchat cross‐platform, Golang-based P2P messenger tool from package
APP_NAME=PeerChat
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based P2P messenger tool."
APP_VERSION=1.1.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-x64
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Rubick cross-platform, Electron-based minimalist multi-function desktop tool from Debian package
APP_NAME=Rubick
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Electron-based minimalist multi-function desktop tool."
APP_VERSION=4.3.2
APP_EXT=deb
FILE_NAME=${APP_NAME,,}2_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rubickCenter/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT} 
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Joker cross‐platform, Golang-based simple Clojure interpreter, linter and formatter from package
# https://github.com/candid82/joker
APP_NAME=Joker
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based simple Clojure interpreter, linter and formatter."
APP_VERSION=1.5.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
unzip /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Hybrid Browser cross-platform web browser that supports regular browsing and P2P (BitTorrent, IPFS, etc.) from AppImage
# https://github.com/HybridWare/hybrid-browser
APP_NAME="Hybrid Browser"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform web browser that supports regular browsing and P2P (BitTorrent, IPFS, etc.)."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="P2P;Browser;"
APP_VERSION=3.0.5
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/HybridWare/${_APP_NAME}/main/build/icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install AIO Compress cross‐platform, Golang-based command-line compression tool supporting Gzip, Bzip2, Brotli, LZMA, XZ, Zlib, Zstd from package
# https://github.com/pedroalbanese/aio
APP_NAME=AIO
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based command-line compression tool supporting Gzip, Bzip2, Brotli, LZMA, XZ, Zlib, Zstd."
APP_VERSION=N/A
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}compress/${FILE_NAME}.${APP_EXT}
cd /tmp
unzip /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install LibreWeb Browser IPFS-based distributed web browser from package
APP_NAME="LibreWeb Browser"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="IPFS-based distributed web browser."
APP_VERSION=0.8.6
APP_EXT=tar.gz
FILE_NAME=${_APP_NAME}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.melroy.org/api/v4/projects/94/packages/generic/${_APP_NAME}/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -R /tmp/${FILE_NAME}/bin/* /usr/bin
sudo cp -R /tmp/${FILE_NAME}/share/* /usr/share
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install GoldenDict++OCR cross-platform enhanced dictionary tool with built-in OCR capability from package
APP_NAME=GoldenDict
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform enhanced dictionary tool with built-in OCR capability."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Dictionary;OCR;"
APP_VERSION=3E26-20240823
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}++OCR-${APP_VERSION}-Debian12_Qt-4.8.7-p5-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-pro/${FILE_NAME}.${APP_EXT}
cd /tmp
sudo tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${APP_NAME}/* /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${APP_NAME,,}.sh /opt/${APP_NAME,,}/${APP_NAME}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,}.sh &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME,,}.sh
Icon=/opt/${APP_NAME,,}/splash.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Mockoon cross-platform REST/web service API mocking tool from AppImage
# https://github.com/HybridWare/hybrid-browser
APP_NAME=Mockoon
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform REST/web service API mocking tool."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="REST;Web Services;Software Testing;"
APP_VERSION=4.1.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/mockoon/mockoon/main/packages/desktop/build-res/icon_256x256x32.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ShellAI cross-platform, Golang-based minimalist AI assistant for the console from package
APP_NAME=Shell-AI
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Golang-based minimalist AI assistant for the console."
APP_VERSION=1.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ibigio/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Difftastic cross-platform, Rust-based structural diff tool that understands syntax of 30+ programming languages from package
APP_NAME=Difftastic
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Rust-based structural diff tool that understands syntax of 30+ programming languages."
APP_VERSION=0.63.0
APP_EXT=tar.gz
FILE_NAME=difft-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Wilfred/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/difft /usr/local/bin
sudo ln -s -f /usr/local/bin/difft /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install D2 cross-platform, Golang-based diagram scripting language that converts text into diagrams from package
# https://github.com/terrastruct/d2
APP_NAME=D2
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Golang-based diagram scripting language that converts text into diagrams."
APP_VERSION=0.6.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-terrastruct.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,}-v${APP_VERSION}/bin/${APP_NAME,,} /usr/local/bin
sudo mkdir -p /usr/local/share/man/man1
sudo cp -a /tmp/${APP_NAME,,}-v${APP_VERSION}/man/${APP_NAME,,}.1 /usr/local/share/man/man1
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Dysk Rust-based command-line tool for showing information about Linux file system from package
APP_NAME=Dysk
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Rust-based command-line tool for showing information about Linux file system."
APP_VERSION=2.10.1
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Canop/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
unzip /tmp/${FILE_NAME}.${APP_EXT} -d /tmp/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME}/build/x86_64-linux/${APP_NAME,,} /usr/local/bin
sudo mkdir -p /usr/local/share/man/man1
sudo cp -a /tmp/${FILE_NAME}/build/man/${APP_NAME,,}.1 /usr/local/share/man/man1
sudo cp -a /tmp/${FILE_NAME}/build/completion/${APP_NAME,,}.bash /etc/bash_completion.d/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Rio cross-platform, Rust-based hardware-accelerated terminal emulator from Debian package
# https://raphamorim.io/rio/
APP_NAME=Rio
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Rust-based hardware-accelerated terminal emulator."
APP_VERSION=0.1.17
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)_x11
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install qemu_mgr command-line menu-based launcher for QEMU virtual machines from source
APP_NAME=qemu_mgr
APP_GUI_NAME="Command-line menu-based launcher for QEMU virtual machines."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="QEMU;Shell;Virtualization;"
APP_VERSION=1.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ColumPaget/${APP_NAME,,}/archive/v${APP_VERSION}.${APP_EXT}
https://github.com/ColumPaget/qemu_mgr/archive/refs/tags/v1.2.tar.gz
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure --enable-ssl --prefix=/usr/local && make
sudo cp -a ${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install PDF4QT cross-platform PDF editor/viewer from AppImage
# https://github.com/JakubMelka/PDF4QT
APP_NAME=PDF4QT
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform PDF editor/viewer."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="PDF;Editor;"
APP_VERSION=1.5.1.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/JakubMelka/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/JakubMelka/${APP_NAME}/master/Desktop/128x128/io.github.JakubMelka.Pdf4qt.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install NeoSurf cross-platform minimalist web browser from AppImage
APP_NAME=NeoSurf
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform minimalist web browser."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="Web Browser;Minimalism;"
APP_VERSION=14
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-GTK-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/CobaltBSD/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/CobaltBSD/${APP_NAME,,}/main/appimage/${APP_NAME,,}.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install SurrealDB cross-platform, Rust-based NewSQL database server from package
APP_NAME=SurrealDB
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Rust-based NewSQL database server."
APP_VERSION=1.0.0-beta.9+20230402
APP_EXT=tgz
FILE_NAME=${_APP_NAME//db/}-v${APP_VERSION}.linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${_APP_NAME//db/} /usr/local/bin
sudo ln -s -f /usr/local/bin/${_APP_NAME//db/} /usr/local/bin/${_APP_NAME}
cd $HOME
sudo rm -rf /tmp/${_APP_NAME//db/}*

# Install Surrealist cross-platform, Electron-based GUI for SurrealDB NewSQL database from AppImage
APP_NAME=Surrealist
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Electron-based GUI for SurrealDB NewSQL database."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="NoSQL;Database;NewSQL;"
APP_VERSION=1.7.5
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/StarlaneStudios/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://raw.githubusercontent.com/StarlaneStudios/${APP_NAME}/main/public/favicon.ico
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.ico /usr/local/share/icons/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install IPTracker cross-platform, Electron-based PHP/Laravel GUI for tracking external IP address from AppImage
APP_NAME=IPTracker
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Electron-based PHP/Laravel GUI for tracking external IP address."
APP_GUI_CATEGORIES="Networking;System;"
APP_GUI_KEYWORDS="IP;System;"
APP_VERSION=1.1.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/modernben/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/modernben/iptracker/main/public/menuBarIconTemplate%402x.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ezytdl cross-platform, Electron-based advanced front-end for yt-dl YouTube downloader from AppImage
APP_NAME=ezytdl
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Electron-based advanced front-end for yt-dl YouTube downloader."
APP_GUI_CATEGORIES="Networking;Internet;Video;"
APP_GUI_KEYWORDS="Audio;Video;"
APP_VERSION=2.4.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-linux
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sylviiu/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/sylviiu/${APP_NAME,,}/main/res/icon.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install UPX (Ultimate Packer for eXecutables) command-line tool for compressing executable/binary files from source
APP_NAME=UPX
APP_GUI_NAME="Command-line tool for compressing executable/binary files."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Executable;Compression;"
APP_VERSION=4.1.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-src
sudo apt install -y build-essential cmake
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir -p build && cd build
cmake .. && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install UncialClock cross-platform, Java-based clock that shows date and time in dozenal (base twelve) from package
APP_NAME=UncialClock
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Java-based clock that shows date and time in dozenal (base twelve)."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Clock;Calendar;"
APP_VERSION=12070918-3
APP_EXT=jar
FILE_NAME=${APP_NAME}Deluxe-${APP_VERSION}-java8
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
# Icon=/opt/${APP_NAME,,}/resources/icon.png
Type=Application
StartupNotify=true
Terminal=false
Category=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install CommaFeed cross-platform, Java-based RSS feed reader inspired by Google Reader from package
# https://github.com/Athou/commafeed
APP_NAME=CommaFeed
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Java-based RSS feed reader inspired by Google Reader."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="RSS;News;Aggregator;"
APP_VERSION=5.10.0
APP_EXT=jar
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/${APP_NAME,,}/icon?b3d93f25aea7c78dc0210242a097f81192634171820b75ffe9ad593b2e37737d
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${APP_NAME,,}.* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} server &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Category=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install halp Rust-based command-line tool for getting help on other command-line tools from package
APP_NAME=halp
APP_GUI_NAME="Rust-based command-line tool for getting help on other command-line tools."
APP_VERSION=0.1.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/orhun/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${APP_NAME,,}-${APP_VERSION}/${APP_NAME,,}* /usr/local/bin
sudo cp /tmp/${APP_NAME,,}-${APP_VERSION}/man/* /usr/share/man/man1
sudo cp -R /tmp/${APP_NAME,,}-${APP_VERSION}/completions/${APP_NAME,,}.bash /usr/share/bash-completion/completions
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install YouTubeDR Golang-based command-line YouTube video downloader from package
APP_NAME=YouTubeDR
APP_GUI_NAME="Golang-based command-line YouTube video downloader."
APP_VERSION=2.10.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/kkdai/youtube/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Chatbox cross-platform, Tauri-based desktop application for GPT-3.5/4 from AppImage
# https://github.com/Bin-Huang/chatbox
APP_NAME=Chatbox
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Tauri-based desktop application for GPT-3.5/4."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="ChatGPT;LLM;"
APP_VERSION=1.2.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Bin-Huang/${APP_NAME,,}/main/src-tauri/icons/128x128.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Wildcard Rust/GTK4-based GUI for testing/practicing regular expressions from Flatpak
# https://github.com/fkinoshita/Wildcard
APP_NAME=Wildcard
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak install flathub com.felipekinoshita.${APP_NAME}

# Install Oneko cross-platform, Java-based screen toy of cat that follows mouse cursor from package
# https://github.com/glreno/oneko
APP_NAME=Oneko
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Java-based screen toy of cat that follows mouse cursor."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Toy;Fun;Cat;"
APP_VERSION=2.0.1
APP_EXT=jar
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://glreno.github.io/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.gif -J -L https://raw.githubusercontent.com/glreno/oneko/master/src/main/resources/images/26.GIF
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${APP_NAME,,}*.* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.gif
Type=Application
StartupNotify=true
Terminal=false
Category=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Packet Sender cross-platform, C++/Qt-based desktop application for sending and receiving TCP, UDP, HTTP/HTTPS and SSL packets/requests from AppImage
# https://packetsender.com/
APP_NAME="Packet Sender"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '_')
APP_GUI_NAME="Cross-platform, C++/Qt-based desktop application for sending and receiving TCP, UDP, HTTP/HTTPS and SSL packets/requests."
APP_GUI_CATEGORIES="Networking;Development;Programming;"
APP_GUI_KEYWORDS="TCP/IP;HTTP;Testing;"
APP_VERSION=8.7.1
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dannagle/PacketSender/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/dannagle/PacketSender/master/src/icons/applogo_notagline.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install CP Editor cross-platform, multi-language editor for competitive programming from AppImage
# https://github.com/cpeditor/cpeditor
APP_NAME="CP Editor"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, multi-language editor for competitive programming."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=6.11.2
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/cp-editor.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.ico -J -L https://raw.githubusercontent.com/${_APP_NAME}/${_APP_NAME}/master/assets/icon.ico
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.ico /usr/local/share/icons/${_APP_NAME}.ico
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Collie cross-platform, Tauri-based minimalist desktop RSS news aggregator/reader from AppImage
APP_NAME=Collie
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Tauri-based minimalist desktop RSS news aggregator/reader."
APP_GUI_CATEGORIES="Internet;Networking;"
APP_GUI_KEYWORDS="RSS;News;Aggregator;"
APP_VERSION=0.1.7
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/parksb/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/parksb/${APP_NAME,,}/main/src-tauri/icons/128x128.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Alexandria cross-platform, Tauri-based minimalist EPUB ebook reader from AppImage
APP_NAME=Alexandria
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Tauri-based minimalist EPUB ebook reader."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="EPUB;Ebook;Reader;"
APP_VERSION=0.11.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/btpf/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/btpf/${APP_NAME,,}/main/src-tauri/icons/128x128.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ClassicImageViewer Qt-based minimalist image viewer with some basic editing features from AppImage
APP_NAME=ClassicImageViewer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Qt-based minimalist image viewer with some basic editing features."
APP_GUI_CATEGORIES="Accessories;Graphics;"
APP_GUI_KEYWORDS="Graphics;Viewer;Editor;"
APP_VERSION=1.2.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}_v${APP_VERSION}_Qt5-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME}/main/resources/pixmaps/logo.png
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Appbatroz cross-platform desktop application launcher from Debian package
# https://github.com/Wistanomic/Appbatroz-Linux
APP_NAME=Appbatroz
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform desktop application launcher."
APP_VERSION=1.1
APP_EXT=deb
FILE_NAME=${APP_NAME}_v${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-linux/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install S5CMD Golang-based command-line parallel S3 and local filesystem execution tool from package
# https://github.com/peak/s5cmd
APP_NAME=S5CMD
APP_GUI_NAME="Golang-based command-line parallel S3 and local filesystem execution tool."
APP_VERSION=2.2.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Linux-64bit
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Differential RPN Calculator (DRPN) command-line interactive RPN calculator with error estimate from package
APP_NAME=DRPN
APP_GUI_NAME="Command-line interactive RPN calculator with error estimate."
APP_VERSION=15oct23
APP_EXT=7z
FILE_NAME=${APP_NAME,,}${APP_VERSION}	
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/differential-calculator/${FILE_NAME}.${APP_EXT}
cd /tmp
7z x /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/diffRpn/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install memgauge command-line real-time physical and swap memory monitor tool from package
APP_NAME=memgauge
APP_GUI_NAME="Command-line real-time physical and swap memory monitor tool."
APP_VERSION=1.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}	
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,}.x86_64 /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}.x86_64
sudo ln -s -f /usr/local/bin/${APP_NAME,,}.x86_64 /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Bunnyfetch Golang-based, command-line minimalist system information tool from package
APP_NAME=Bunnyfetch
APP_GUI_NAME="Golang-based, command-line minimalist system information tool."
APP_VERSION=0.2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Rosettea/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install KeyHint Python-based tool to show keyboard shortcuts and other hints based on the active window from AppImage
APP_NAME=KeyHint
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Python-based tool to show keyboard shortcuts and other hints based on the active window."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Keyboard;Productivity;"
APP_VERSION=0.3.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y pkg-config python3-dev libcairo2-dev libgirepository1.0-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/dynobo/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/dynobo/${APP_NAME,,}/main/${APP_NAME,,}/resources/${APP_NAME,,}.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install tuifeed Rust-based, command-line minimalist RSS news feed reader from package
APP_NAME=tuifeed
APP_GUI_NAME="Rust-based, command-line minimalist RSS news feed reader."
APP_VERSION=0.3.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/veeso/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Bavarder Python-based GUI for ChatGPT and other AI chatbot clients from Flatpak
# https://github.com/Bavarder/Bavarder
APP_NAME=Bavarder
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
curl -o /tmp/${APP_NAME,,}.flatpak https://codeberg.org/api/packages/${APP_NAME}/generic/${APP_NAME}/164/${APP_NAME,,}.flatpak
sudo flatpak install /tmp/${APP_NAME,,}.flatpak

# Install nav Golang-based, command-line navigator for interactive 'ls' workflows from package
APP_NAME=nav
APP_GUI_NAME="Golang-based, command-line navigator for interactive 'ls' workflows."
APP_VERSION=1.0.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/dkaslovsky/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install walk cross-platform terminal navigator from package
APP_NAME=walk
APP_GUI_NAME="Cross-platform terminal navigator."
APP_VERSION=1.7.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/antonmedv/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -R /tmp/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
sudo chmod +x /usr/local/bin/${APP_NAME,,}
echo 'function lk {' >> $HOME/.bashrc
echo '  cd "$(/usr/local/bin/'${APP_NAME,,}' "$@")"' >> $HOME/.bashrc
echo '}' >> $HOME/.bashrc
source $HOME/.bashrc
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install eza Rust-based modern replacement for 'ls' command from package
APP_NAME=eza
APP_GUI_NAME="Rust-based modern replacement for 'ls' command."
APP_VERSION=0.13.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/eza-community/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install MultiOS-USB command-line tool to create USB drive to boot multiple OS images from ISO files from package
# https://github.com/Mexit/MultiOS-USB
APP_NAME=MultiOS-USB
APP_GUI_NAME="Command-line tool to create USB drive to boot multiple OS images from ISO files."
APP_VERSION=0.7.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}_linux_v${APP_VERSION}	
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${APP_NAME}_v${APP_VERSION}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/installer.sh /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install PhotoQuick Qt-based minimalist image viewer/editor from AppImage
APP_NAME=PhotoQuick
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Qt-based minimalist image viewer/editor."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Graphics;Editor;"
APP_VERSION=4.16.2
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ksharindam/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/ksharindam/${APP_NAME,,}/main/data/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install dmtr network diagnostic tool with functionality of ping and traceroute from PPA
https://github.com/yvs2014/dmtr
sudo add-apt-repository -y ppa:lrou2014/dmtr
sudo apt update
sudo apt install -y dmtr

# Install Hot Footer Java desktop paper-tape style calculator from package
APP_NAME="Hot Footer"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Java desktop paper-tape style calculator."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Calculator;"
APP_VERSION=N/A
APP_EXT=jar
FILE_NAME=${APP_NAME// /}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/hot-footer/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.gif -J -L https://downloads.sourceforge.net/hot-footer/calc_icon.gif
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${_APP_NAME}
sudo cp -R /tmp/${_APP_NAME}.gif /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
java -jar /opt/${_APP_NAME}/${FILE_NAME}.${APP_EXT} &
cd \$HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
Icon=/opt/${_APP_NAME}/${_APP_NAME}.gif
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}* /tmp/${APP_NAME}*

# Install PipeWalker pipe/network puzzle game from source
APP_NAME=PipeWalker
APP_GUI_NAME="Pipe/network puzzle game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Puzzle;Games;"
APP_VERSION=0.9.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential libsdl1.2-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
./configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install sish Golang-based HTTP(S)/WS(S)/TCP tunnels to localhost using only SSH (ngrok alternative) from package
# https://github.com/antoniomika/sish
APP_NAME=sish
APP_GUI_NAME="HTTP(S)/WS(S)/TCP tunnels to localhost using only SSH (ngrok alternative)."
APP_VERSION=2.19.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install dsq Golang-based command-line tool to run SQL queries against JSON, CSV, Excel and other data formats from package
# https://github.com/multiprocessio/dsq
APP_NAME=dsq
APP_GUI_NAME="Golang-based command-line tool to run SQL queries against JSON, CSV, Excel and other data formats."
APP_VERSION=0.23.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-x64-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
unzip /tmp/${FILE_NAME}.${APP_EXT} -d /tmp/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install GPTCLI cross‐platform, Golang-based interactive ChatGPT client featuring shortcuts and auto-complete from package
APP_NAME=GPTCLI
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based interactive ChatGPT client featuring shortcuts and auto-complete."
APP_VERSION=0.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/lucasepe/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
tar xzf /tmp/${FILE_NAME}.${APP_EXT} -p -C /tmp/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Wildcard Rust-based GTK4 regex testing tool from Flatpak
# https://github.com/fkinoshita/Wildcard
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y com.felipekinoshita.Wildcard

# Install Soundscape Qt-based desktop open-source ambient sound tool from package
APP_NAME=Soundscape
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Qt-based desktop open-source ambient sound tool."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Ambient;Sound;Audio;Productivity;"
APP_VERSION=1.5.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-Linux
sudo apt install -y libxcb-cursor0
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ddanilov/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/share/icons/hicolor/scalable/apps/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Ferdium online service aggregation tool from AppImage
APP_NAME=Ferdium
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Online service aggregation tool."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Productivity;"
APP_VERSION=7.1.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-linux-Portable-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ferdium/${APP_NAME,,}-app/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/ferdium/${APP_NAME,,}-app/develop/build-helpers/images/icons/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Spacedrive Rust-based cross-platform file manager from AppImage
APP_NAME=Spacedrive
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Rust-based cross-platform file manager."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="File;Manager;"
APP_VERSION=0.4.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/spacedriveapp/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/spacedriveapp/${APP_NAME,,}/main/packages/assets/images/AppLogo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Tenacity cross-platform multi-track audio editor from AppImage
APP_NAME=Tenacity
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform multi-track audio editor."
APP_GUI_CATEGORIES="Multimedia;Audio;"
APP_GUI_KEYWORDS="Audio;Editor"
APP_VERSION=1.3.4
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-linux-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://codeberg.org/tenacityteam/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://codeberg.org/tenacityteam/${APP_NAME,,}/raw/branch/main/images/icons/48x48/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install HiFile cross-platform two-pane file manager with built-in viewers and archive extractors from AppImage
APP_NAME=HiFile
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform two-pane file manager with built-in viewers and archive extractors."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="File;Manager;"
APP_VERSION=0.9.10.5
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.hifile.app/files/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://www.hifile.app/static/logo.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Planes Qt/C++-based Battleship-variant puzzle game from AppImage
APP_NAME=Planes
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Qt/C++-based Battleship-variant puzzle game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Puzzle;Battleship;"
APP_VERSION=0.4.1.1
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-Multiplayer-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/xxxcucus/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/xxxcucus/${APP_NAME,,}/master/docs/graphics/${APP_NAME}QML.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install yazi cross‐platform, Rust-based terminal file manager from package
APP_NAME=yazi
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based terminal file manager."
APP_VERSION=25.5.31
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sxyazi/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
unzip /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp -R /tmp/${FILE_NAME}/completions/${APP_NAME,,}.bash /usr/share/bash-completion/completions
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Qwiktape paper-tape style calculator supporting annotations from package
APP_NAME=Qwiktape
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Paper-tape style calculator supporting annotations."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Calculator;Productivity;"
APP_VERSION=0.6
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-portable
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?b24f9a525f2712f128376f6b520fa43f26d6a4054f3599eb51d9f02954819dcd
cd /tmp
unzip /tmp/${FILE_NAME}.${APP_EXT} -d /tmp/${FILE_NAME}
sudo cp -a -R /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp -a -R /tmp/${FILE_NAME}/sciter-pdf.so /lib
sudo chmod +x /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install AppFlowy cross-platform, open-source alternative to Notion free-form notepad from AppImage
APP_NAME=AppFlowy
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, open-source alternative to Notion free-form notepad."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;Productivity;"
APP_VERSION=0.9.3
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/AppFlowy-IO/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy/8116ea1dbabfa70f1b02c9b8a83c784e05f3a27b/doc/imgs/appflowy-logo-black.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Monolith Code cross-platform, Electron-based minimalist code editor from AppImage
APP_NAME="Monolith Code"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-' )
APP_GUI_NAME="Cross-platform, Electron-based minimalist code editor."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=2.2.8
APP_EXT=AppImage
FILE_NAME=${_APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Haeri/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/Haeri/${_APP_NAME}/master/res/img/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Stretchly cross-platform breaktime reminder application from AppImage
# https://github.com/hovancik/stretchly
APP_NAME=Stretchly
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform breaktime reminder application."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Productivity;"
APP_VERSION=1.15.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/${APP_NAME,,}/icon?8109ef2eeb6905c47ca9c530e51ee410568163ebb134b4951de2501d27670c3b
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install GoofCord cross-platform highly configurable and privacy-focused Discord client from AppImage
# https://github.com/Milkshiift/GoofCord
APP_NAME=GoofCord
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform highly configurable and privacy-focused Discord client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Discord;Messenger;"
APP_VERSION=1.10.0
APP_EXT=AppImage
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/${APP_NAME,,}/icon?06804d69427f497269d8dbca4b42aa0d62e179a00d22b20830de454e12df313e
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install QTaskWarrior Qt-based GUI for the Taskwarrior CLI productivity tool from AppImage
# https://qtaskwarrior.sourceforge.io/
APP_NAME=QTaskWarrior
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Qt-based GUI for the Taskwarrior CLI productivity tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="To Do;Productivity;"
APP_VERSION=0.0+137.8e681a77a428-Build22.1.glibc2.14
APP_EXT=AppImage
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -y libfuse2 taskwarrior
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/jaimeMF:/${APP_NAME,,}/AppImage/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?1699909255
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Bruno cross-platform, open-source Electron-based REST and GraphQL API testing tool from AppImage
APP_NAME=Bruno
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, open-source Electron-based REST and GraphQL API testing tool."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="REST;GraphQL;"
APP_VERSION=2.4.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/usebruno/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/usebruno/bruno/main/assets/images/logo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install SQ data wrangler cross‐platform, Golang-based command-line tool for SQL-like access to structured data from package
APP_NAME=SQ
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based command-line tool for SQL-like access to structured data."
APP_VERSION=0.48.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/sq-data-wrangler.mirror/${FILE_NAME}.${APP_EXT}
mkdir -p /tmp/${FILE_NAME}
tar -xf /tmp/${FILE_NAME}.${APP_EXT} -C /tmp/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp -R /tmp/${FILE_NAME}/completions/${APP_NAME,,}.bash /usr/share/bash-completion/completions
sudo cp -R /tmp/${FILE_NAME}/manpages/${APP_NAME,,}.* /usr/share/man/man1
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Tess cross-platform, open-source Electron-based simple rapid terminal from AppImage
APP_NAME=Tess
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, open-source Electron-based simple rapid terminal."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Terminal;Shell;"
APP_VERSION=0.6.3
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/SquitchYT/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/SquitchYT/${APP_NAME}/main/build/ressources/icon/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install MP3 Diags Qt-based GUI MP3 diagnostic tool and tag editor from source
APP_NAME=MP3Diags
APP_GUI_NAME="Qt-based GUI MP3 diagnostic tool and tag editor."
APP_GUI_CATEGORIES="Audio;Multimedia;"
APP_GUI_KEYWORDS="MP3;"
APP_VERSION=1.4.01
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y qtbase5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
qtchooser -run-tool=qmake -qt=5 ../${APP_NAME,,}.pro && make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install NightPDF cross-platform, open-source Electron-based dark-mode simple PDF reader from AppImage
APP_NAME=NightPDF
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, open-source Electron-based dark-mode simple PDF reader."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="PDF;Reader;"
APP_VERSION=2.0.3
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Lunarequest/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Lunarequest/${APP_NAME}/mistress/build/icon.iconset/icon_128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install YTDownloader cross-platform, open-source Electron-based tool to download video and audio from hundreds of sites from AppImage
APP_NAME=YTDownloader
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, open-source Electron-based tool to download video and audio from hundreds of sites."
APP_GUI_CATEGORIES="Audio;Video;Multimedia;"
APP_GUI_KEYWORDS="Audio;Video;Downloader;"
APP_VERSION=3.15.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}_Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/aandrew-me/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/aandrew-me/${APP_NAME}/main/assets/images/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install RoslynPad cross-platform C#-based notepad/text editor from package
APP_NAME=RoslynPad
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform C#-based notepad/text editor."
APP_GUI_CATEGORIES="Accessories;Development;Programming"
APP_GUI_KEYWORDS="Notepad;Editor;"
APP_VERSION=20
APP_EXT=tgz
curl -o /tmp/packages-microsoft-prod.deb -J -L https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb && sudo gdebi -n /tmp/packages-microsoft-prod.deb
sudo apt-get update && sudo apt-get install -y dotnet-runtime-8.0
FILE_NAME=${APP_NAME}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/main/deploy/resources/windows/PackageRoot/Assets/square44x44logo.scale-200.png
cd /tmp
mkdir /tmp/${FILE_NAME}
tar -xf /tmp/${FILE_NAME}.${APP_EXT} -C /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install AnyType cross-platform, open-source local-first alternative to Notion/Obsidian from AppImage
APP_NAME=Anytype
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, open-source local-first alternative to Notion/Obsidian."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;"
APP_VERSION=0.45.3
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/anyproto/${APP_NAME,,}-ts/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/anyproto/${APP_NAME,,}-ts/main/electron/img/icon128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install DeepGit cross-platform Git history tool from package
APP_NAME=DeepGit
APP_GUI_NAME="Cross-platform Git history tool."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Git;History;"
APP_VERSION=4.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-${APP_VERSION//./_}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.syntevo.com/downloads/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${APP_NAME,,}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/bin/${APP_NAME,,}.sh /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/bin/${APP_NAME}.sh
Icon=/opt/${APP_NAME,,}/bin/${APP_NAME,,}-128.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install ESC cross-platform, TUI-based RPN calculator from package
APP_NAME=ESC
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, TUI-based RPN calculator."
APP_GUI_CATEGORIES="Accessories;Education;"
APP_GUI_KEYWORDS="Calculator;RPN;"
APP_VERSION=1.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sobjornstad/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
mkdir -p ${HOME}/bin/${APP_NAME,,}
cp -a /tmp/${FILE_NAME}/* ${HOME}/bin/${APP_NAME,,}
python3 -m venv ${HOME}/bin/${APP_NAME,,}/.venv
source ${HOME}/bin/${APP_NAME,,}/.venv/bin/activate
python3 -m pip install -r ${HOME}/bin/${APP_NAME,,}/requirements.txt
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd \$HOME/bin/${APP_NAME,,}
source \$HOME/bin/${APP_NAME,,}/.venv/bin/activate
python3 -m \$HOME/bin/${APP_NAME,,}/${APP_NAME,,}/__main__.py &
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=${HOME}/bin/${APP_NAME,,}/resources/${APP_NAME,,}-rabbit.jpg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Focalizzare cross-platform, open-source, Lisp-based Pomodoro timer from AppImage
APP_NAME=Focalizzare
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, open-source, Lisp-based Pomodoro timer."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Timer;Productivity;"
APP_VERSION=1.1.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/VitoVan/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/VitoVan/${APP_NAME,,}/main/images/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install PikaTorrent cross-platform minimalist BitTorrent client from package
APP_NAME=PikaTorrent
APP_GUI_NAME="Cross-platform minimalist BitTorrent client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="BitTorrent;"
APP_VERSION=0.13.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-x64-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/G-Ray/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
unzip -q /tmp/${FILE_NAME}.${APP_EXT} -d /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/${APP_NAME,,}*/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/${APP_NAME}
Icon=/opt/${APP_NAME,,}/resources/app/assets/icon.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install WaveTerm cross-platform modern terminal from package
APP_NAME=WaveTerm
APP_GUI_NAME="Cross-platform modern terminal."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Terminal;"
APP_VERSION=0.11.3
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-linux-x64-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/wavetermdev/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
unzip -q /tmp/${FILE_NAME}.${APP_EXT} -d /tmp/${FILE_NAME}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/Wave*/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/Wave /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/opt/${APP_NAME,,}/Wave
Icon=/opt/${APP_NAME,,}/resources/app/public/logos/wave-logo.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install Librum Reader cross-platform ebook reader and manager from Flatpak
# https://librumreader.com/
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub com.librumreader.librum

# Install Heynote cross-platform, scratchpad for developers with syntax highlighting from AppImage
APP_NAME=Heynote
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, scratchpad for developers with syntax highlighting."
APP_GUI_CATEGORIES="Accessories;Programming;"
APP_GUI_KEYWORDS="Notepad;Productivity;"
APP_VERSION=1.4.2
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/heyman/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/heyman/${APP_NAME,,}/main/resources/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install QMP3Gain cross-platform, Qt-based MP3 audio file loudness adjustment tool from AppImage
APP_NAME=QMP3Gain
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Qt-based MP3 audio file loudness adjustment tool."
APP_GUI_CATEGORIES="Audio;Multimedia;"
APP_GUI_KEYWORDS="MP3;Editor;"
APP_VERSION=0.9.4
APP_EXT=AppImage
sudo apt install -y libfuse2 mp3gain
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://sourceforge.net/p/qmp3gain/code/ci/master/tree/resources/images/icon.png?format=raw
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install AFFiNE cross-platform, multimedia notepad, planner, and knowledge management tool from AppImage
# https://github.com/toeverything/AFFiNE
APP_NAME=AFFiNE
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, multimedia notepad, planner, and knowledge management tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;Planner;"
APP_VERSION=0.12.3
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-stable-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/${APP_NAME,,}/icon?430498e5a0fe103cfce55f0183097c7716d5f8a2570ab3cd202e6e9fe9555157
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Babyshark terminal-based packet sniffer from Debian package
APP_NAME=Babyshark
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Terminal-based packet sniffer."
APP_VERSION=2.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Tangent Notes cross-platform, personal knowledge management tool from AppImage
# https://www.tangentnotes.com/
APP_NAME=Tangent
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, personal knowledge management tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;Wiki;"
APP_VERSION=0.6.2
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://suchnsuch-public.s3.us-east-2.amazonaws.com/${APP_NAME}/Releases/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://www.tangentnotes.com/tangent-icon.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install quardCRT cross-platform, Qt-based terminal emulator that supports multiple protocols from Debian package
# https://github.com/QQxiaoming/quardCRT
APP_NAME=quardCRT
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Qt-based terminal emulator that supports multiple protocols."
APP_VERSION=0.5.0
APP_EXT=deb
FILE_NAME=${APP_NAME}_Linux_V${APP_VERSION//./}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install mdqtee Qt-based rich text editor with support for export to PDF, EPUB and more from AppImage
APP_NAME=mdqtee
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Qt-based rich text editor with support for export to PDF, EPUB and more."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=1.3.8
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-${APP_VERSION//./}
curl -o /tmp/${FILE_NAME}.zip -J -L https://github.com/md2222/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.zip
cd /tmp
unzip -C /tmp/${FILE_NAME}.zip
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}-${APP_VERSION}-x86_64.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}-${APP_VERSION}-x86_64.${APP_EXT}
sudo ln -s -f /usr/local/bin/${APP_NAME,,}-${APP_VERSION}-x86_64.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Remindr cross-platform, minimalist desktop reminder tool from AppImage
APP_NAME=Remindr
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, minimalist desktop reminder tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Calendar;Reminder;"
APP_VERSION=2.1.9
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/MrDavidRios/${APP_NAME,,}_releases/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/MrDavidRios/${APP_NAME,,}_flutter/master/assets/icon/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Beaver Notes cross-platform, secure Electron/Vue.JS-based notepad with Markdown support from AppImage
APP_NAME=Beaver-Notes
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, secure Electron/Vue.JS-based notepad with Markdown support."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;"
APP_VERSION=4.0.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=Beaver-notes-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Daniele-rolli/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://raw.githubusercontent.com/Daniele-rolli/${APP_NAME}/main/buildResources/icon.ico
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.ico /usr/local/share/icons/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Rymdport cross-platform, Golang-based GUI for magic-wormhole for P2P file transer from package
APP_NAME=Rymdport
APP_GUI_NAME="Cross-platform, Golang-based GUI for magic-wormhole for P2P file transer."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="P2P;"
APP_VERSION=3.8.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Jacalz/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
tar xf /tmp/${FILE_NAME}.${APP_EXT} -C /tmp/${FILE_NAME}
cd /tmp/${FILE_NAME}
sudo make install /tmp/${FILE_NAME}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install tmon minimalist system monitor tool for Linux from source
APP_NAME=tmon
APP_GUI_NAME="Minimalist system monitor tool for Linux."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Monitor;"
APP_VERSION=main
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}
sudo apt-get install -y libncurses-dev
cd /tmp
git clone https://github.com/pondda/${APP_NAME,,}.git
cd /tmp/${APP_NAME,,}
make && sudo make install
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install vbridge minimalist X/Windows remote access tool from source
APP_NAME=vbridge
APP_GUI_NAME="Minimalist X/Windows remote access tool."
APP_VERSION=master
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential gcc make libcap-dev libkrb5-dev libpam0g-dev libssl-dev libx11-dev libxdamage-dev libxext-dev libxfixes-dev libxi-dev libxrandr-dev libxrender-dev libxtst-dev
cd /tmp
git clone https://github.com/angt/${APP_NAME,,}.git
cd /tmp/${APP_NAME,,}
make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install jDiskMark cross-platform Java-based GUI disk benchmarking tool from package
APP_NAME=jDiskMark
APP_GUI_NAME="Cross-platform Java-based GUI disk benchmarking tool."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Disk;Performance;"
APP_VERSION=0.5.1
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
unzip /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
# Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Vesktop cross-platform, Electron-based Discord client from AppImage
APP_NAME=Vesktop
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Electron-based Discord client."
APP_GUI_CATEGORIES="Internet;;"
APP_GUI_KEYWORDS="Messenger;Chat;"
APP_VERSION=1.5.3
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Vencord/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Vencord/${APP_NAME}/main/build/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Festival cross-platform, Rust-based minimalist GUI audio file player from AppImage
APP_NAME=Festival
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Rust-based minimalist GUI audio file player."
APP_GUI_CATEGORIES="Audio;Multimedia;"
APP_GUI_KEYWORDS="Audio;Player;"
APP_VERSION=1.4.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hinto-janai/${APP_NAME,,}/releases/download/gui-v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/hinto-janai/${APP_NAME,,}/main/assets/images/icon/256.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Upscayl cross-platform, Electron-based image upscaler from AppImage
APP_NAME=Upscayl
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Electron-based image upscaler."
APP_GUI_CATEGORIES="Graphics;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=2.11.5
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/main/build/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Khoj cross-platform, AI personal assistant for searching local content from AppImage
APP_NAME=Khoj
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, AI personal assistant for searching local content."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="AI:ChatGPT;"
APP_VERSION=1.3.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/khoj-ai/${APP_NAME,,}/master/src/interface/desktop/assets/icons/favicon-128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install IPFS Desktop cross-platform, Electron-based IPFS desktop client from AppImage
APP_NAME="IPFS Desktop"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Electron-based IPFS desktop client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="IPFS;P2P;"
APP_VERSION=0.33.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${_APP_NAME}-${APP_VERSION}-linux-x86_64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/mirror/${_APP_NAME}/icon?5d36763ecb910114c93caa234ec4a39743445a4c61f4172f6740509e13683414
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install qemu_mgr minimalist command-line manager for QEMU from source
APP_NAME=qemu_mgr
APP_GUI_NAME="Minimalist command-line manager for QEMU."
APP_VERSION=1.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -y build-essential gcc make qemu-system
cd /tmp
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ColumPaget/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
tar xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}/libUseful-5
configure && make && sudo make install
sudo cp -a libUseful-5.8.* /usr/lib
sudo ln -s -f /usr/lib/libUseful-5.8.so /usr/lib/libUseful-5.so
sudo ln -s -f /usr/lib/libUseful-5.8.so /usr/lib/libUseful.so
sudo ln -s -f /usr/lib/libUseful-5.8.a /usr/lib/libUseful-5.a
sudo ln -s -f /usr/lib/libUseful-5.8.a /usr/lib/libUseful.a
cd /tmp/${FILE_NAME}
configure && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install jqless cross-platform, Golang-based TUI for interactive tool for parsing JSON from package
APP_NAME=jqless
APP_GUI_NAME="Cross-platform, Golang-based TUI for interactive tool for parsing JSON."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="JSON;Shell;"
APP_VERSION=0.2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/samsullivan/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
tar xf /tmp/${FILE_NAME}.${APP_EXT} -C /tmp/${FILE_NAME}
cd /tmp/${FILE_NAME}
sudo make install /tmp/${FILE_NAME}
cd $HOME
rm -rf /tmp/${APP_NAME,,}

# Install qView cross-platform, Qt-based minimalist image viewer from AppImage
APP_NAME=qView
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Qt-based minimalist image viewer."
APP_GUI_CATEGORIES="Graphics;"
APP_GUI_KEYWORDS="Viewer;"
APP_VERSION=6.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jurplel/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/jurplel/${APP_NAME}/master/dist/linux/hicolor/128x128/apps/com.interversehq.qView.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Cute Chess cross-platform, Qt-based GUI and command-line chess game from AppImage
APP_NAME="Cute Chess"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Qt-based GUI and command-line chess game."
APP_GUI_CATEGORIES="Entertainment;Games;"
APP_GUI_KEYWORDS="Chess;"
APP_VERSION=1.3.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME// /_}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${_APP_NAME}/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/${_APP_NAME}/${_APP_NAME}/master/projects/gui/res/icons/${_APP_NAME}_128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Musicbrainz Picard cross-platform, PyQt-based audio file tagging tool from package
APP_NAME=Picard
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, PyQt-based audio file tagging tool."
APP_GUI_CATEGORIES="Audio;Multimedia;"
APP_GUI_KEYWORDS="Tagging;"
APP_VERSION=2.12.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/metabrainz/${APP_NAME,,}/releases/download/release-${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
mkdir -p ${HOME}/.local/bin/${APP_NAME,,}
cp -a -R /tmp/${FILE_NAME}/* ${HOME}/.local/bin/${APP_NAME,,}
python3 -m venv ${HOME}/.local/bin/${APP_NAME,,}/.venv
source ${HOME}/.local/bin/${APP_NAME,,}/.venv/bin/activate
python3 -m pip install -r ${HOME}/.local/bin/${APP_NAME,,}/requirements.txt
sudo ln -s -f ${HOME}/.local/bin/${APP_NAME,,}/.venv/bin/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=${HOME}/.local/bin/${APP_NAME,,}/resources/org.musicbrainz.${APP_NAME}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install PenGUI Python/Qt GUI front-end to Penguin's Eggs tool to create live CD ISO from current Debian/Ubuntu system from Debian package
APP_NAME=PenGUI
APP_GUI_NAME="Python/Qt GUI front-end to Penguin's Eggs tool to create live CD ISO from current Debian/Ubuntu system."
APP_VERSION=0.7.10
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/penguins-eggs/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install s-tui Python-based command-line system monitoring and stress testing tool from package
APP_NAME=s-tui
APP_GUI_NAME="Python-based command-line system monitoring and stress testing tool."
APP_VERSION=1.1.6
APP_EXT=zip
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt-get install -y python3-pip stress
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/amanusk/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
unzip /tmp/${FILE_NAME}.${APP_EXT} -d /tmp/${FILE_NAME}
cd /tmp/${FILE_NAME}/${FILE_NAME}
mkdir -p $HOME/.local/bin/${APP_NAME,,}
cd $HOME/.local/bin/${APP_NAME,,}
cp -a -R /tmp/${FILE_NAME}/${FILE_NAME}/* $HOME/.local/bin/${APP_NAME,,}
python3 -m venv $HOME/.local/bin/${APP_NAME,,}/.venv
source $HOME/.local/bin/${APP_NAME,,}/.venv/bin/activate
python -m pip install urwid psutil
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd \$HOME/.local/bin/${APP_NAME,,}
. \$HOME/.local/bin/${APP_NAME,,}/.venv/bin/activate
python -m s_tui.s_tui
deactivate
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install En Croissant cross-platform, React/Rust-based chess GUI and analysis tool from AppImage
APP_NAME="En Croissant"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, React/Rust-based chess GUI and analysis tool."
APP_GUI_CATEGORIES="Entertainment;Games;"
APP_GUI_KEYWORDS="Chess;"
APP_VERSION=0.11.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${_APP_NAME}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/franciscoBSalgueiro/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/franciscoBSalgueiro/${_APP_NAME}/master/public/logo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Zap Golang-based command line AppImage management tool from package
APP_NAME=Zap
APP_GUI_NAME="Golang-based command line AppImage management tool."
APP_GUI_CATEGORIES="System;"
APP_GUI_KEYWORDS="AppImage;"
APP_VERSION=2.2.1
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://github.com/srevinsaju/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Furtherance cross-platform, Rust-based GUI offline time tracking tool from source
APP_NAME=Furtherance
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Cross-platform, Rust-based GUI offline time tracking tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Time;Tracking;"
APP_VERSION=25.3.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-offline-${APP_VERSION}
sudo apt install -y libdbus-1-dev libsqlite3-dev libgtk-4-dev libadwaita-1-dev gettext
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/lakoliu/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${APP_NAME,,}
mkdir build && cd build
meson .. && ninja && sudo ninja install
sudo apt remove -y libdbus-1-dev libsqlite3-dev libgtk-4-dev libadwaita-1-dev
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Monophony GUI tool for streaming music from YouTube outside of browser from Flatpak
# https://gitlab.com/zehkira/monophony/
APP_NAME=Monophony
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub io.gitlab.zehkira.${APP_NAME}

# Install Errands Python-based GUI offline GUI To Do manager tool from source
APP_NAME=Errands
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_GUI_NAME="Python-based GUI offline GUI To Do manager tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="ToDo;Productivity;"
APP_VERSION=45.1.9
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt install -y libdbus-1-dev libsqlite3-dev libgtk-4-dev libadwaita-1-dev gettext
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mrvladus/${APP_NAME}/archive/refs/tags/${APP_VERSION}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
meson .. && ninja && sudo ninja install
sudo apt remove -y libdbus-1-dev libsqlite3-dev libgtk-4-dev libadwaita-1-dev
cd $HOME
rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install Quimup C++/Qt GUI front-end to MPD music player from Debian package
APP_NAME=Quimup
APP_GUI_NAME="C++/Qt GUI front-end to MPD music player."
APP_VERSION=2.1.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_Debian12.$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
sudo apt install -y mpd
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Simplex Chat cross-platform, minimalist messenger application with no user identifiers from AppImage
APP_NAME="Simplex Chat"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, minimalist messenger application with no user identifiers."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Messenger;"
APP_VERSION=6.3.4
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=simplex-desktop-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${_APP_NAME}/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.svg -J -L https://raw.githubusercontent.com/${_APP_NAME}/${_APP_NAME}/stable/images/logo.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.svg /usr/local/share/icons/${_APP_NAME}.svg
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install YUVviewer cross-platform, minimalist raw image format viewer from Debian package
APP_NAME=YUVviewer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, minimalist raw image format viewer."
APP_VERSION=0.5.8
APP_EXT=deb
FILE_NAME=${APP_NAME}_Linux_V${APP_VERSION//./}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-qt/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install TTFviewer cross-platform, minimalist TTF font viewer from Debian package
APP_NAME=TTFviewer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, minimalist TTF font viewer."
APP_VERSION=0.2.8
APP_EXT=deb
FILE_NAME=${APP_NAME}_Linux_V${APP_VERSION//./}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install HexWalk cross-platform, Qt-based hex editor, viewer, and analyzer from AppImage
APP_NAME=HexWalk
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Qt-based hex editor, viewer, and analyzer."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Hex;Editor;"
APP_VERSION=1.6.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/gcarmix/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/gcarmix/${APP_NAME}/main/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Gittyup cross-platform, Qt-based Git GUI client from AppImage
APP_NAME=Gittyup
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Qt-based Git GUI client."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Git;"
APP_VERSION=1.4.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Murmele/${APP_NAME}/releases/download/development/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Murmele/${APP_NAME}/master/rsrc/${APP_NAME}.iconset/icon_128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install News Flash GTK RSS feed reader for web-based RSS services from Flatpak
# https://gitlab.com/news-flash/news_flash_gtk
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install -y flathub io.gitlab.news_flash.NewsFlash

# Install Numbat Rust-based command line calculator and programming language with support for physical dimensions and units from package
APP_NAME=Numbat
APP_GUI_NAME="Rust-based command line calculator and programming language with support for physical dimensions and units."
APP_GUI_CATEGORIES="Accessories;Development;"
APP_GUI_KEYWORDS="Calculator;"
APP_VERSION=1.10.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/sharkdp/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a /tmp/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Gear Lever Python-based GUI tool for managing Linux AppImages from Flatpak
# https://github.com/mijorus/gearlever
APP_NAME=GearLever
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub it.mijorus.${APP_NAME,,}

# Install csBooks cross-platform ebook reader with support for EPUB, PDF, DJVU, MOBI and more from Debian package
APP_NAME=csBooks
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform ebook reader with support for EPUB, PDF, DJVU, MOBI and more."
APP_VERSION=8.2.2
APP_EXT=deb
FILE_NAME=${APP_NAME}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/caesiumstudio/${APP_NAME}-updates/releases/download/latest/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Quick Lookup JavaScript/GTK-based GUI Wikitionary dictionary tool from Flatpak
# https://github.com/johnfactotum/quick-lookup
APP_NAME=QuickLookup
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub com.github.johnfactotum.${APP_NAME,,}

# Install mpm (Meta Package Manager) cross-platform, Python-based command line wrapper for multiple package managers from package
APP_NAME=mpm
APP_GUI_NAME="Cross-platform, Python-based command line wrapper for multiple package managers."
APP_VERSION=5.15.0
APP_EXT=bin
FILE_NAME=${APP_NAME,,}-linux-x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/meta-package-manager.mirror/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install vash (Visual Assistant Shell) visual supershell that runs on top of Bash from Debian package
APP_NAME=vash
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Visual supershell that runs on top of Bash."
APP_VERSION=2.0.23b
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Katvan cross-platform, Qt-based editor for Typst files with support for right-to-left content from AppImage
APP_NAME=Katvan
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Qt-based editor for Typst files with support for right-to-left content."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=0.3.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/IgKh/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/IgKh/${APP_NAME,,}/master/assets/${APP_NAME,,}_48x48.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Night Vision cross-platform Java-based planetarium tool from package
APP_NAME="Night Vision"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Java-based planetarium tool."
APP_GUI_CATEGORIES="Education;Science;"
APP_GUI_KEYWORDS="Planetarium;"
APP_VERSION=5.4
APP_EXT=zip
FILE_NAME=nvj${APP_VERSION//./}
if ! [ -x "$(command -v java)" ]; then
	sudo apt install -y openjdk-17-jre
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://www.nvastro.com/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
unzip /tmp/${FILE_NAME}.${APP_EXT} -d ${FILE_NAME}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
sudo chmod -R 755 /opt/${_APP_NAME}
cat > /tmp/${_APP_NAME} << EOF
#! /bin/sh
cd /opt/${_APP_NAME}
PATH=/opt/${_APP_NAME}:\$PATH; export PATH
java -jar /opt/${_APP_NAME}/nvj.jar
cd $HOME
EOF
sudo mv /tmp/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/usr/local/bin/${_APP_NAME}
# Icon=
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/nvj*

# Install Wave Terminal cross-platform, terminal with built-in AI support from AppImage
# https://www.waveterm.dev/
APP_NAME=Wave
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, terminal with built-in AI support."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="Terminal;"
APP_VERSION=0.7.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-terminal/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/wave-terminal/icon?cd273f91976ed7db25a878f7a267baf8f85ecc48782a22ff26b1ed5f852fc818
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Gitify cross-platform, Electron-based Github notification tool from AppImage
# https://www.gitify.io/
APP_NAME=Gitify
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Electron-based Github notification tool."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Git;Notification;"
APP_VERSION=6.3.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}-app/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.ico -J -L https://raw.githubusercontent.com/${APP_NAME,,}-app/${APP_NAME,,}/main/assets/images/app-icon.ico
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.ico /usr/local/share/icons/${APP_NAME,,}.ico
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install npadcalc cross-platform, Rust-based desktop RPN calculator from AppImage
# https://gitflic.ru/project/txbestos-comp/npadcalc/
APP_NAME=npadcalc
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Rust-based desktop RPN calculator."
APP_GUI_CATEGORIES="Accessories;System"
APP_GUI_KEYWORDS="RPN;Calculator;"
APP_VERSION=0.1.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.tar.gz -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}.tar.gz
cd /tmp
tar xf /tmp/${FILE_NAME}.${APP_EXT}.tar.gz
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
# Icon=/usr/local/share/icons/${APP_NAME,,}.ico
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install WebAppReader cross-platform, desktop webapp viewer from AppImage
APP_NAME=WebAppReader
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, desktop webapp viewer."
APP_GUI_CATEGORIES="Accessories;Internet"
APP_GUI_KEYWORDS="Web;Viewer;"
APP_VERSION=1.1.0.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/webappreader/icon?98face2e7c75bc1ba57dae50203f5f8685823f1a6179e10c4d10136b879f6895
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Atmos Weather cross-platform, Electron-based lightweight weather forecast and alert tool from AppImage
APP_NAME="Atmos Weather"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Electron-based lightweight weather forecast and alert tool."
APP_GUI_CATEGORIES="Accessories;Internet"
APP_GUI_KEYWORDS="Weather;"
APP_VERSION=2.2.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${_APP_NAME}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/atticuscornett/AtmosWeather/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/atticuscornett/AtmosWeather/main/res/icon/electron/app.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}* /tmp/${APP_NAME}*

# Install sysalrt Rust-based command line lightweight system monitoring tool with built-in email notification from package
APP_NAME=sysalrt
APP_GUI_NAME="Rust-based command line lightweight system monitoring tool with built-in email notification."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Monitor;"
APP_VERSION=0.2.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mosab3/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Blanket Python/GTK-based ambient sound audio player to improve focus from Flatpak
# https://github.com/rafaelmardojai/blanket/
APP_NAME=Blanket
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub com.rafaelmardojai.${APP_NAME}

# Install imgcatr Rust-based command line image viewer from package
APP_NAME=imgcatr
APP_GUI_NAME="Rust-based command line image viewer."
APP_GUI_CATEGORIES="Accessories;System;Graphics;"
APP_GUI_KEYWORDS="Graphics;Viewer;"
APP_VERSION=0.1.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/SilinMeng0510/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Planify minimalist task and 'to do' manager from Flatpak
# https://github.com/alainm23/planify
APP_NAME=Planify
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub io.github.alainm23.${APP_NAME,,}

# Install RustDesk cross-platform, remote desktop tool from AppImage
APP_NAME=RustDesk
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, remote desktop tool."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Remote;"
APP_VERSION=1.4.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/master/res/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install superfile Golang-based command line file manager from package
APP_NAME=superfile
APP_GUI_NAME="Golang-based command line file manager."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="File;Manager;"
APP_VERSION=1.1.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/MHNightCat/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/dist/${FILE_NAME}/spf /usr/local/bin/spf
sudo ln -s -f /usr/local/bin/spf /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Yaak cross-platform, Electron-based desktop REST and GraphQL webservice client from AppImage
APP_NAME=Yaak
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Electron-based desktop REST and GraphQL webservice client."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="REST;API;GraphQL;"
APP_VERSION=2024.3.10
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT}.tar.gz -J -L https://releases.yaak.app/${APP_VERSION}/${FILE_NAME}.${APP_EXT}.tar.gz
curl -o /tmp/${APP_NAME,,}.svg -J -L https://yaak.app/logo.svg
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}.tar.gz
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Mark Mind cross-platform, Electron/Vue.JS-based mind map editor with markdown and LaTeX support from AppImage
APP_NAME="Mark Mind"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Electron/Vue.JS-based mind map editor with markdown and LaTeX support."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Mind;Map;Markdown;LaTeX;"
APP_VERSION=1.3.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME// /.}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/MarkMindCkm/Mark-Mind/main/build/icons/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Pachtop cross-platform, Tauri-based desktop GUI system monitor from AppImage
APP_NAME=Pachtop
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Tauri-based desktop GUI system monitor."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="System;Monitor;"
APP_VERSION=0.7.3
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/pacholoamit/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/pacholoamit/${APP_NAME,,}/master/src-tauri/icons/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install wxMP3Gain cross-platform MP3 volume normalizer (free front-end for the MP3gain) from Debian package
APP_NAME=wxMP3Gain
APP_VERSION=4.2
APP_EXT=deb
source /etc/lsb-release
# 18.04 - 21.10
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(bi|co|di|eo|fo|gr|hi|im)$ ]]; then
	DISTRIB_VERSION=focal
# 22.04 - 22.10
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(ja|ki)$ ]]; then
	DISTRIB_VERSION=jammy
# 23.10
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(ma)$ ]]; then
	DISTRIB_VERSION=mantic
# 24.04
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(no)$ ]]; then
	DISTRIB_VERSION=noble
fi
FILE_NAME=${APP_NAME,,}_${APP_VERSION}.ppa2.${DISTRIB_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/cfgnunes/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Syndic simple, responsive RSS feed reader from Flatpak
# https://github.com/cscarney/syndic
APP_NAME=Syndic
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub com.rocksandpaper.${APP_NAME,,}

# Install Clipboard Manager cross-platform, multi-format clipboard manager with persistent history from Debian package
APP_NAME="Clipboard Manager"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, multi-format clipboard manager with persistent history."
APP_VERSION=0.1.1_build-1046
APP_EXT=deb
FILE_NAME=${_APP_NAME}-linux-x64-v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME//-/}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install DevPod cross-platform, client-only tool for building developer environments based on a devcontainer.json from AppImage
APP_NAME=Dev-Pod
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '-')
APP_GUI_NAME="Cross-platform, client-only tool for building developer environments based on a devcontainer.json."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="IDE;Docker;Containers;"
APP_VERSION=0.5.10
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-glibc-old_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://a.fsdn.com/allura/mirror/${_APP_NAME}/icon?b2606e8ac9bbfbe3e0982478fc61684b4eb961104d380b696334d08f56c35b8d
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${FILE_NAME}* /tmp/${_APP_NAME}*

# Install Quadrupleback retro arcade game clone of Doubleback game from 1982 from Debian package
APP_NAME=Quadrupleback
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, multi-format clipboard manager with persistent history."
APP_VERSION=0.2.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/flatzebra-${APP_VERSION}.${APP_EXT} -J -L http://perso.b2b2c.ca/~sarrazip/dev/flatzebra-${APP_VERSION}.${APP_EXT}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L http://perso.b2b2c.ca/~sarrazip/dev/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/flatzebra-${APP_VERSION}.${APP_EXT} /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Filelight GUI disk usage visualization tool from Flatpak
# https://apps.kde.org/filelight/
APP_NAME=Filelight
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub org.kde.${APP_NAME,,}

# Install QPDF Tools Qt-based GUI for Ghostscript and QPDF from Flatpak
# https://github.com/silash35/qpdftools
APP_NAME=QPDFTools
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub br.eng.silas.${APP_NAME,,}

# Install Mousam lightweight weather app build using Gtk4, Libadwaita and Python from Flatpak
# https://github.com/silash35/qpdftools
APP_NAME=QPDFTools
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub br.eng.silas.${APP_NAME,,}

# Install Lonewolf Kanban-style desktop 'to do' and task management tool from Flatpak
# https://github.com/aichingm/Lonewolf
APP_NAME=Lonewolf
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub site.someones.${APP_NAME}

# Install Memorize Swift-based minimalist flashcard tool from Flatpak
# https://github.com/david-swift/Memorize
APP_NAME=Memorize
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub io.github.david_swift.Flashcards

# Install Memorado Python-based minimalist flashcard tool with spaced repitition support from Flatpak
# https://github.com/wbernard/Memorado
APP_NAME=Memorado
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub im.bernard.${APP_NAME}

# Install QHexVed cross-platform, hexadecimal editor and analyzer from Debian package
APP_NAME=QHexVed
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, hexadecimal editor and analyzer."
APP_VERSION=1.3
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install EEZ Studio cross-platform, GUI test automation tool from AppImage
APP_NAME=EEZ-Studio
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '-')
APP_GUI_NAME="Cross-platform, GUI test automation tool."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Testing;Automation;"
APP_VERSION=0.14.2
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?93c396fea19e28decab3382ccabba554582a437a37a2f1abb61af0a62083cfb5
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME,,}*

# Install pwall minimalist photo/video viewer and organizer from Debian package
APP_NAME=pwall
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Minimalist photo/video viewer and organizer."
APP_VERSION=2.3-0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ltiber/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install Hexchat cross-platform GTK+ GUI IRC client from Flatpak
# https://github.com/hexchat/hexchat
APP_NAME=Hexchat
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub io.github.${APP_NAME}

# Install Kooha Rust-based minimalist screen recording tool from Flatpak
# https://github.com/SeaDve/Kooha
APP_NAME=Kooha
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub io.github.seadve.${APP_NAME}

# Install Quickemu cross-platform wrapper for QEMU emulator from Debian package
APP_NAME=Quickemu
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform wrapper for QEMU emulator."
APP_VERSION=4.9.6
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
sudo rm -rf /tmp/${_APP_NAME}*

# Install Densify Python/GTK+ GUI front-end for Ghostscript to compress PDF files from AppImage
APP_NAME=Densify
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Python/GTK+ GUI front-end for Ghostscript to compress PDF files."
APP_GUI_CATEGORIES="Office;Accessories;System;"
APP_GUI_KEYWORDS="PDF;"
APP_VERSION=0.3.2
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/hkdb/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/hkdb/${APP_NAME}/master/desktop-icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Resources Rust-based system monitoring tool from Flatpak
# https://github.com/nokyan/resources
APP_NAME=Resources
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub net.nokyan.${APP_NAME}

# Install Postbird cross-platform Electron-based GUI for PostgreSQL from AppImage
APP_NAME=Postbird
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Electron-based GUI for PostgreSQL."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Database;SQL;"
APP_VERSION=0.8.4
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Paxa/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Paxa/${APP_NAME,,}/master/build_files/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Password Safe cross-platform GUI password management tool from Debian package
APP_NAME="Password Safe"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.19.1
APP_EXT=deb
if [ ! -f /etc/lsb-release ]; then
	RELEASE_VERSION=debian12
else
source /etc/lsb-release
# 18.04 - 21.10
if [[ "${DISTRIB_CODENAME:0:2}" =~ ^(bi|co|di|eo|fo|gr|hi|im|ja|ki|ma)$ ]]; then
	RELEASE_VERSION=ubuntu20
elif [[ "${DISTRIB_CODENAME:0:2}" =~ ^(no)$ ]]; then
	RELEASE_VERSION=ubuntu24
fi
fi
FILE_NAME=${_APP_NAME}-${RELEASE_VERSION}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Pinokio browser-based AI automation platform from AppImage
# https://pinokio.computer/
APP_NAME=Pinokio
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Browser-based AI automation platform."
APP_GUI_CATEGORIES="Internet;System;"
APP_GUI_KEYWORDS="AI;Automation;"
APP_VERSION=3.8.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/pinokiocomputer/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/pinokiocomputer/${APP_NAME,,}/main/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install jaq Rust-based command-line jq clone focused on correctness, speed, and simplicity from package
# https://github.com/01mf02/jaq
APP_NAME=jaq
APP_GUI_NAME="Rust-based command-line jq clone focused on correctness, speed, and simplicity."
APP_VERSION=2.2.0
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Static Web Server cross-platform, Rust-based high-performance and asynchronous web server for serving static files/assets from package
# https://github.com/static-web-server/static-web-server
APP_NAME="Static Web Server"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Rust-based high-performance and asynchronous web server for serving static files/assets."
APP_GUI_CATEGORIES="Internet;System;"
APP_GUI_KEYWORDS="HTTP;Server;"
APP_VERSION=2.32.0
APP_EXT=tar.gz
FILE_NAME=${_APP_NAME}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install dyff Golang-based command line diff/comparison tool for YAML and JSON files/data from package
# https://github.com/homeport/dyff
APP_NAME=dyff
APP_GUI_NAME="Golang-based command line diff/comparison tool for YAML and JSON files/data."
APP_GUI_CATEGORIES="Programming;Development;System;"
APP_GUI_KEYWORDS="Diff;YAML;JSON;"
APP_VERSION=1.10.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install rucola Rust-based note manager with ability to launch external editors from package
# https://github.com/Linus-Mussmaecher/rucola
APP_NAME=rucola
APP_GUI_NAME="Rust-based note manager with ability to launch external editors."
APP_VERSION=0.5.0
APP_EXT=tar.xz
FILE_NAME=${APP_NAME,,}-notes-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install LocalAI Golang-based self-hosted OpenAI-compatible API supporting multiple LLM models from package
# https://github.com/go-skynet/LocalAI
APP_NAME="Local-AI"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '-')
APP_GUI_NAME="Golang-based self-hosted OpenAI-compatible API supporting multiple LLM models."
APP_VERSION=2.19.3
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-Linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Pokete terminal-based Pokemon-style game from AppImage
APP_NAME=Pokete
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Terminal-based Pokemon-style game."
APP_GUI_CATEGORIES="Games;Entertainment;"
APP_GUI_KEYWORDS="Pokemon;Retro;"
APP_VERSION=0.9.2
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/lxgr-linux/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/lxgr-linux/${APP_NAME,,}/master/assets/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=true
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Pomatez cross-platform, Electron-based simple GUI desktop Pomodoro tool from AppImage
APP_NAME=Pomatez
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform, Electron-based simple GUI desktop Pomodoro tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Pomodoro;Productivity;"
APP_VERSION=1.7.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/zidoro/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/zidoro/${APP_NAME,,}/master/app/electron/src/assets/logo-dark.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=true
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Qucs-S cross-platform, QUCS circuit simulation tool with SPICE with Qt GUI from AppImage
APP_NAME=Qucs-S
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '-' '_' )
APP_GUI_NAME="Cross-platform, QUCS circuit simulation tool with SPICE with Qt GUI."
APP_GUI_CATEGORIES="Education;Engineering;"
APP_GUI_KEYWORDS="Electronics;Simulation;"
APP_VERSION=24.3.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ra3xdh/${_APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/ra3xdh/${_APP_NAME}/current/qucs/bitmaps/hicolor/128x128/apps/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Zed Rust-based, cross-platform, Atom-style GUI text editor from package
# https://zed.dev/docs/linux#downloading-manually
APP_NAME=Zed
APP_GUI_NAME="Rust-based, cross-platform, Atom-style GUI text editor."
APP_VERSION=0.189.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/zed-industries/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
mkdir -p ~/.local
sudo cp -R /tmp/${APP_NAME,,}.app ~/.local
sudo ln -s -f ~/.local/${APP_NAME,,}.app/bin/${APP_NAME,,} /usr/local/bin
cp ~/.local/zed.app/share/applications/zed.desktop ~/.local/share/applications/dev.zed.Zed.desktop
sed -i "s|Icon=zed|Icon=$HOME/.local/zed.app/share/icons/hicolor/512x512/apps/zed.png|g" ~/.local/share/applications/dev.zed.Zed.desktop
sed -i "s|Exec=zed|Exec=$HOME/.local/zed.app/libexec/zed-editor|g" ~/.local/share/applications/dev.zed.Zed.desktop
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Uno Calculator cross-platform port of Windows calculator from Snap
# https://platform.uno/uno-calculator/
APP_NAME=Uno-Calculator
sudo apt-get install -y snapd snapd-xdg-open
sudo snap install snapd
sudo snap install ${APP_NAME,,}

# Install Cartero Rust-based cross-platform GUI HTTP client with support for REST, SOAP or XML-RPC from Flatpak
# https://github.com/danirod/cartero
APP_NAME=Cartero
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub es.danirod.${APP_NAME}

# Install git-gone Rust-based tool to remove all local branches that no longer have corresponding upstream/remote from package
APP_NAME=git-gone
APP_GUI_NAME="Rust-based tool to remove all local branches that no longer have corresponding upstream/remote."
APP_VERSION=1.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/swsnr/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo cp /tmp/${FILE_NAME}/${APP_NAME,,}.1 /usr/local/share/man/man1
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Trippy cross-platform, Rust-based combined ping/traceroute network troubleshooting tool from package
# https://github.com/fujiapple852/trippy
APP_NAME=Trippy
APP_GUI_NAME="Cross-platform, Rust-based combined ping/traceroute network troubleshooting tool."
APP_VERSION=0.12.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}/trip /usr/local/bin
sudo ln -s -f /usr/local/bin/trip /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Safelock CLI cross-platform, Golang-based command-line fast file encryption (AES-GCM) tool from package
# https://github.com/mrf345/safelock-cli
APP_NAME=safelock-cli
APP_GUI_NAME="Cross-platform, Golang-based command-line fast file encryption (AES-GCM) tool."
APP_VERSION=0.6.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Wavebox cross-platform, custom Chromium-based web browser with advanced support for a variety of online tools from AppImage
APP_NAME=Wavebox
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '-' '_' )
APP_GUI_NAME="Cross-platform, custom Chromium-based web browser with advanced support for a variety of online tools."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Browser;Chromium;"
APP_VERSION=10.137.9-2
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} --referer https://wavebox.io/download?platform=linux -J -L https://download.${APP_NAME,,}.app/stable/linux/appimage/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/waveboxapp/master/icons/app.png

# Install EcoPaste cross-platform, Rust-based clipboard manager from AppImage
APP_NAME=EcoPaste
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '-' '_' )
APP_GUI_NAME="Cross-platform, Rust-based clipboard manager."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Clipboard;"
APP_VERSION=0.0.6
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=eco-paste_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ayangweb/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/ayangweb/${APP_NAME}/master/public/logo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install EdSim51 cross-platform Java-based 8051 microcontroller simulator for education from package
APP_NAME=EdSim51
APP_GUI_NAME="Cross-platform Java-based 8051 microcontroller simulator for education."
APP_GUI_CATEGORIES="Education;Science;"
APP_GUI_KEYWORDS="Electronics;Microcontroller;"
APP_VERSION=2.1.38
APP_EXT=zip
sudo apt install -y openjdk-17-jre
FILE_NAME=${APP_NAME,,}di_version_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/${APP_NAME,,}/icon?e60863923fb19c8ce2e03dcfcef2c582767354d8f37705a6b50683ddc2ff5444
cd /tmp
unzip /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R /tmp/${APP_NAME,,}di/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${APP_NAME,,}di.jar
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install kgcalc Kulina graphics scientific desktop calculator from package
APP_NAME=kgcalc
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '-' '_' )
APP_GUI_NAME="Kulina graphics scientific desktop calculator."
APP_GUI_CATEGORIES="Education;Accessories;System;"
APP_GUI_KEYWORDS="Calculator;"
APP_VERSION=1.0
APP_EXT=tgz
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/kgcal/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo install -m 755 -s /tmp/${FILE_NAME}/kgcalc /usr/local/bin
sudo install -m 644 /tmp/${FILE_NAME}/kgcalc.png /usr/local/share/icons
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo install -m 644 /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install x11-calc X/Windows/C-based HP calculator simulator from source
APP_NAME=x11-calc
APP_GUI_NAME="X/Windows/C-based HP calculator simulator."
APP_VERSION=0.14.156
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}
sudo apt install -yy gcc make libc6-dev libx11-dev xfonts-base
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mike632t/${APP_NAME,,}/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
sudo cp /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install halloy Rust-based, cross-platform minimalist IRC client from package
APP_NAME=halloy
APP_GUI_NAME="Rust-based, cross-platform minimalist IRC client."
APP_VERSION=2025.5
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/squidowl/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir -p /tmp/${FILE_NAME}
tar -xf /tmp/${FILE_NAME}.${APP_EXT} -C /tmp/${FILE_NAME}
sudo cp -a -R /tmp/${FILE_NAME}/bin/* /usr/local/bin
sudo cp -a -R /tmp/${FILE_NAME}/share/* /usr/local/share
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Forecast Python/GTK-based minimalist desktop weather forecast tool from Flatpak
# https://github.com/SalaniLeo/Forecast
APP_NAME=Forecast
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub dev.salaniLeo.${APP_NAME,,}

# Install Libre Menu Editor Python/GTK-based Linux shell menu editor from Flatpak
# https://codeberg.org/libre-menu-editor/libre-menu-editor
APP_NAME=LibreMenuEditor
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub page.codeberg.libre_menu_editor.${APP_NAME,,}

# Install uv Rust-based, fast Python package and project manager from package
APP_NAME=uv
APP_GUI_NAME="Rust-based, fast Python package and project manager."
APP_VERSION=0.7.12
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-project-manager.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${FILE_NAME}/* /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install crun cross-platform minimalist OCI container run-time from package
APP_NAME=crun
APP_GUI_NAME="Cross-platform minimalist OCI container run-time."
APP_VERSION=1.17
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}
sudo cp -a -R /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Pyzo cross-platform Python/Qt-based Matlab-style IDE from package
APP_NAME=Pyzo
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Python/Qt-based Matlab-style IDE."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Python;IDE;"
APP_VERSION=4.16.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/main/${APP_NAME,,}/resources/appicons/${APP_NAME,,}logo128.png
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/${APP_NAME,,}/* /opt/${APP_NAME,,}
sudo ln -s -f /opt/${APP_NAME,,}/${APP_NAME,,} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Tabby cross-platform, self-hosted AI coding assistant from package
APP_NAME=Tabby
APP_GUI_NAME="Cross-platform, self-hosted AI coding assistant."
APP_GUI_CATEGORIES="Education;Programming;"
APP_GUI_KEYWORDS="AI;Assistant;"
APP_VERSION=0.28.0
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-manylinux_2_28
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}ml.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/tabbyml/icon?0a178c2767d4876de7edc522b18455f39efef4cea4e79a3aa117dd7e503aef8a
cd /tmp
unzip /tmp/${FILE_NAME}.${APP_EXT}
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -R -a /tmp/dist/${FILE_NAME}/* /opt/${APP_NAME,,}
sudo cp /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod +x /opt/${APP_NAME,,}/${APP_NAME,,} /opt/${APP_NAME,,}/llama-server
sudo chmod 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
/opt/${APP_NAME,,}/${APP_NAME,,} serve & 
sleep 2
xdg-open http://0.0.0.0:8080/
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
#Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Zen Browser cross-platform, minimalist, privacy-focused web browser from AppImage
APP_NAME=Zen
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '-' '_' )
APP_GUI_NAME="Cross-platform, minimalist, privacy-focused web browser."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Web;Browser;"
APP_VERSION=1.12.10b
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-generic
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/zen-browser/desktop/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/zen-browser/desktop/main/configs/branding/alpha/logo128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install bumbar Qt/C++-based minimalist media player from source
APP_NAME=bumbar
APP_GUI_NAME="Qt/C++-based minimalist media player."
APP_VERSION=03
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -yy build-essential cmake qt5-qmake qtbase5-dev qtmultimedia5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${APP_NAME,,}
mkdir build && cd build
cmake .. && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Wealthfolio cross-platform, secure, privacy-focused desktop finance/investing tool from AppImage
APP_NAME=Wealthfolio
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '-' '_' )
APP_GUI_NAME="Cross-platform, secure, privacy-focused desktop finance/investing tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Finance;Investing;"
APP_VERSION=1.0.15
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/afadil/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/afadil/${APP_NAME,,}/refs/heads/main/src-tauri/icons/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Programmer Browser cross-platform, fast-searching, space-saving browser for programmers from AppImage
APP_NAME="Programmer Browser"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform, fast-searching, space-saving browser for programmers."
APP_GUI_CATEGORIES="Programming;Browser;"
APP_GUI_KEYWORDS="Internet;"
APP_VERSION=0.1.8
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=$(echo ${APP_NAME} | tr -d ' ' )-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/yessGlory17/${_APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/yessGlory17/${_APP_NAME}/refs/heads/main/assets/icon-bg.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Locker cross-platform GUI password management tool from Debian package
APP_NAME=Locker
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=2.0.45
APP_EXT=deb
FILE_NAME=${APP_NAME,,}pm_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-password-manager.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install NetPad C#/.NET-based cross-platform text editor/IDE from AppImage
# https://github.com/tareqimbasher/NetPad
APP_NAME=NetPad
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="C#/.NET-based cross-platform text editor/IDE."
APP_GUI_CATEGORIES="Development;Programming;"
APP_GUI_KEYWORDS="Editor;IDE;"
APP_VERSION=0.9.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/tareqimbasher/${APP_NAME}/refs/heads/main/src/Apps/NetPad.Apps.App/wwwroot/logo/square/128x128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install gitu Rust-based, Git TUI client inspired by Magit from package
APP_NAME=gitu
APP_GUI_NAME="Rust-based, Git TUI client inspired by Magit."
APP_VERSION=0.25.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/altsem/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Cadmium Flutter/Dart-based multi-functional programming companion from Debian package
APP_NAME=Cadmium
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.1.8
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.com/blue-sheep/${APP_NAME,,}/-/jobs/7814125234/artifacts/raw/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install findwin minimalist tool to find window on any desktop by name from Debian package
APP_NAME=findwin
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=0.11
APP_EXT=deb
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-1.fc23.$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
sudo apt install -yy alien
curl -o /tmp/${FILE_NAME}.rpm -J -L https://als.regnet.cz/${APP_NAME,,}/download/${FILE_NAME}.rpm
sudo alien /tmp/${FILE_NAME}.rpm
sudo gdebi -n /tmp/${APP_NAME,,}*.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Gospel PDF Viewer Python/Qt-based, cross-platform minimalist PDF viewer from AppImage
APP_NAME=Gospel-PDF
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Python/Qt-based, cross-platform minimalist PDF viewer."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="PDF;Viewer;"
APP_VERSION=3.2.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME//-/_}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ksharindam/${APP_NAME,,}-viewer/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/ksharindam/${APP_NAME,,}-viewer/refs/heads/main/data/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install STU Rust-based, TUI client for AWS S3 from package
APP_NAME=STU
APP_GUI_NAME="Rust-based, TUI client for AWS S3."
APP_VERSION=0.6.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Oculante Rust-based, GUI image viewer from package
APP_NAME=Oculante
APP_GUI_NAME="Rust-based, GUI image viewer."
APP_GUI_CATEGORIES="Accessories;Graphics"
APP_GUI_KEYWORDS="Image;Viewer;"
APP_VERSION=0.9.2
APP_EXT=zip
FILE_NAME=${APP_NAME,,}_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/woelper/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/woelper/${APP_NAME,,}/refs/heads/master/res/icons/icon.png
cd /tmp
unzip /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/target/release/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install eCapture Golang-based SSL/TLS plaintext capture without CA certificate via eBPF from package
APP_NAME=eCapture
APP_GUI_NAME="Golang-based SSL/TLS plaintext capture without CA certificate via eBPF."
APP_VERSION=0.8.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Ptyxis terminal with focus on interaction with containers from Flatpak
# https://gitlab.gnome.org/chergert/ptyxis
APP_NAME=Ptyxis
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub app.devsuite.${APP_NAME}

# Install GPU Viewer GUI tool for viewing details of system GPUs from Debian package
APP_NAME=GPU-Viewer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=3.02M1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/arunsivaramanneo/${APP_NAME,,}/releases/download/v3.02/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Shiori Golang-based self-hosted minimalist bookmark manager from package
APP_NAME=Shiori
APP_GUI_NAME="Golang-based self-hosted minimalist bookmark manager."
APP_VERSION=1.7.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Inkdown Electron-based cross-platform markdown editor with built-in preview, Mermaid graphics, and Katex support from AppImage
# https://github.com/1943time/inkdown
APP_NAME=Inkdown
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Electron-based cross-platform markdown editor with built-in preview, Mermaid graphics, and Katex support."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Editor;IDE;"
APP_VERSION=1.3.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/inkdown/icon?a0f80865be438f1b222a60ec10274c61331b8c2effda6bcd87d312b045938cd3
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Warpinator LAN file transfer tool from Flatpak
# https://github.com/linuxmint/warpinator
APP_NAME=Warpinator
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub org.x.${APP_NAME}

# Install Pomodorolm cross-platform, minimalist desktop Pomodoro tool from AppImage
APP_NAME=Pomodorolm
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform, minimalist desktop Pomodoro tool."
APP_GUI_CATEGORIES="Accessories;"
APP_GUI_KEYWORDS="Pomodoro;"
APP_VERSION=0.5.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/vjousse/${APP_NAME,,}/releases/download/app-v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/vjousse/${APP_NAME,,}/refs/heads/main/src-tauri/icons/128x128%402x.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install SyncTERM cross-platform terminal for ANSI BBS support connection over telnet, rlogin and SSH from source
APP_NAME=SyncTERM
APP_GUI_NAME="Cross-platform terminal for ANSI BBS support connection over telnet, rlogin and SSH."
APP_VERSION=1.4
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-src
sudo apt install -yy build-essential cmake dos2unix libncursesw5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${APP_NAME,,}*
mkdir build && cd build
cmake .. && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install rip2 Rust-based alternative to 'rm' with a focus on safety, ergonomics, and performance from package
APP_NAME=rip
APP_GUI_NAME="Rust-based alternative to 'rm' with a focus on safety, ergonomics, and performance."
APP_VERSION=0.9.4
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-Linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/MilesCranmer/rip2/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install ExpidusOS Calculator cross-platform Flutter-based calculator from package
APP_NAME="ExpidusOS Calculator"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Flutter-based calculator."
APP_GUI_CATEGORIES="Accessories;System;Utility;"
APP_GUI_KEYWORDS="Calculator;"
APP_VERSION=0.1.1-alpha
APP_EXT=tar.gz
FILE_NAME=com.expidusos.calculator-linux-x64 
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/ExpidusOS/calculator/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
mkdir ${FILE_NAME}
tar -xf /tmp/${FILE_NAME}.${APP_EXT} -C ${FILE_NAME}
sudo mkdir -p /opt/${_APP_NAME}
sudo cp -a -R /tmp/${FILE_NAME}/* /opt/${_APP_NAME}
sudo ln -s -f /opt/${_APP_NAME}/calculator /usr/local/bin/${_APP_NAME}
sudo ln -s -f /opt/${_APP_NAME}/calculator /usr/local/bin/ecalc
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${_APP_NAME}
Exec=/opt/${_APP_NAME}/calculator
Icon=/opt/${_APP_NAME}/data/com.expidusos.calculator.png
Type=Application
StartupNotify=true
Terminal=false
Category=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
sudo rm -rf /tmp/${APP_NAME}* /tmp/${APP_NAME}*

# Install hashit Golang-based command-line file hashing tool from package
APP_NAME=hashit
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line/TUI code search tool."
APP_VERSION=1.4.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/boyter/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Legcord Electron-based cross-platform, minimalist Discord client from AppImage
APP_NAME=Legcord
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Electron-based cross-platform, minimalist Discord client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="Discord;Messenger;"
APP_VERSION=1.0.2
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME}/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME}/${APP_NAME}/refs/heads/dev/assets/Square44x44Logo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install fzf Golang-based command-line fuzzy file finder from package
APP_NAME=fzf
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line fuzzy file finder."
APP_VERSION=0.60.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/junegunn/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Inulute AI Gate Electron-based cross-platform, AI tool aggregator from AppImage
APP_NAME="Inulute AI Gate"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Electron-based cross-platform, AI tool aggregator."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="ChatGPT;AI;"
APP_VERSION=3.0.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=$(echo ${APP_NAME} | tr ' ' '-')-${APP_VERSION}-Linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/ai-gate/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://github.com/inulute/ai-gate/blob/main/icons/png/favicon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install Novabench cross-platform CLI and GUI system benchmark tool from AppImage
APP_NAME=Novabench
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform CLI and GUI system benchmark tool."
APP_GUI_CATEGORIES="System;"
APP_GUI_KEYWORDS="Performance;Benchmark;"
APP_VERSION=5.4.3
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-x64
curl -o /tmp/${FILE_NAME}.tar.gz -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.tar.gz
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/novabench/icon?3d8584bf37cb8eff10b688b96aa3842e4a682d8722eb90d1de9b4a3736bf8f4a
cd /tmp
tar -xf /tmp/${FILE_NAME}.tar.gz
sudo cp /tmp/${APP_NAME,,}/${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU).${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU).${APP_EXT}
sudo ln -s -f /usr/local/bin/${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU).${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Varia cross-platform download manager based on aria2 from Flatpak package
APP_NAME=Varia
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub io.github.giantpinkrobots.${APP_NAME,,}

# Install GraSSHopper Electron-based cross-platform SSH client from AppImage
# https://grasshopper.coding.kiwi/
APP_NAME=GraSSHopper
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Electron-based cross-platform SSH client."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="SSH;"
APP_VERSION=1.3.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Coding-Kiwi/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://grasshopper.coding.kiwi/img/logo.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ecode cross-platform responsive code editor from AppImage
APP_NAME=ecode
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform responsive code editor."
APP_GUI_CATEGORIES="Programming;Accessories;Development;"
APP_GUI_KEYWORDS="Editor;"
APP_VERSION=0.7.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-linux-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/ecode/icon?709fdab910a9417b992e1eed9281ae4b9bb3ed76194bbea04b2dc6ce1d253f1b
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install circumflex Golang-based command-line HackerNews reader from package
APP_NAME=circumflex
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line HackerNews reader."
APP_VERSION=3.7
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bensadeh/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install tailspin Rust-based command-line log file viewer from package
APP_NAME=tailspin
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Rust-based command-line log file viewer."
APP_VERSION=4.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/bensadeh/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/tspin /usr/local/bin
sudo ln -s -f /usr/local/bin/tspin /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install presenterm cross‐platform, Rust-based terminal Markdown presentation/slideshow tool from package
APP_NAME=presenterm
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based terminal Markdown presentation/slideshow tool."
APP_VERSION=0.9.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/mfontanini/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,}*/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Netsleuth Python/GTK IP subnet calculator from Flatpak package
# https://github.com/vmkspv/netsleuth
APP_NAME=Netsleuth
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub io.github.vmkspv.${APP_NAME,,}

# Install Folio GTK-based Markdown-format note-taking tool from AppImage
APP_NAME=Folio
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="GTK-based Markdown-format note-taking tool."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;"
APP_VERSION=24.13
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/toolstack/${APP_NAME}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/toolstack/${APP_NAME}/ba052eb6bcd9b377470fd237e7fab7bb19240eb6/data/icons/hicolor/scalable/apps/com.toolstack.${APP_NAME}.svg
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install scooter cross‐platform, Rust-based terminal interactive search-and-replace tool from package
APP_NAME=scooter
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based terminal interactive search-and-replace tool."
APP_VERSION=0.2.3
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/thomasschafer/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl /usr/local/bin
sudo ln -s -f /usr/local/bin/${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install ruff Rust-based, fast Python linter from package
APP_NAME=ruff
APP_GUI_NAME="Rust-based, fast Python linter."
APP_VERSION=0.11.13
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${FILE_NAME}/* /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}*
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install TidGi cross-platform desktop knowledge base based on TiddlyWiki from Debian package
APP_NAME=TidGi
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=0.12.1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Lettura cross-platform Rust-based RSS reader from AppImage
APP_NAME=Lettura
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform Rust-based RSS reader."
APP_GUI_CATEGORIES="Internet;"
APP_GUI_KEYWORDS="RSS;"
APP_VERSION=0.1.21
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/lettura/icon?7b135a76ba9697a5ca5545a1a4cc7dc62978c9726a0c140e8c0b506936da76e6
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Gitnuro cross-platform Java-based GUI Git client from package
APP_NAME=Gitnuro
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Java-based GUI Git client."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="Git;"
APP_VERSION=1.4.3
APP_EXT=jar
FILE_NAME=${APP_NAME}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-${APP_VERSION}
if ! [ -x "$(command -v java)" ]; then
	sudo apt install -y openjdk-17-jre
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/JetpackDuba/Gitnuro/refs/heads/main/icons/logo.svg
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${APP_NAME,,}.svg /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Keep-Alive Golang-based, simple tool to keep computer from going to sleep from package
APP_NAME=Keep-Alive
APP_GUI_NAME="Golang-based, simple tool to keep computer from going to sleep."
APP_VERSION=1.0.2
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/stigoleg/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a -R /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install z simple front-end to various compression and archiving tools from package
APP_NAME=z
APP_GUI_NAME="Simple front-end to various compression and archiving tools."
APP_VERSION=2.7.6
APP_EXT=tgz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://kinzler.com/me/z/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd ${FILE_NAME}
sed -i 's@/usr/local/man/man1@/usr/share/man/man1@g' ./Makefile
sudo make install
sudo make install.man
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}-*

# Install JSONly cross-platform GUI program for interacting with and manipulating JSON files from AppImage
APP_NAME=JSONly
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform GUI program for interacting with and manipulating JSON files."
APP_GUI_CATEGORIES="Programming;Development;"
APP_GUI_KEYWORDS="JSON;Editor;"
APP_VERSION=1.4.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/jsonly/icon?d19bf478974d92fbf5f0d847041b21cfe0d9cd21d78a8a9113a4615e3a04b1c1
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install SunnyCapturer cross-platform screenshot capture tool from AppImage
APP_NAME=SunnyCapturer
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform screenshot capture tool."
APP_GUI_CATEGORIES="Accessories;System;Graphics;"
APP_GUI_KEYWORDS="Screen;Capture;"
APP_VERSION=3.2.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}_${APP_VERSION}_x64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/sunnypages/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/sunnypages/icon?4a3d01c66c4de4744d13ee60e965367a9ddf46c1322d061269c5637d98c39195
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install GhosTTY cross-platform terminal emulator from Debian package
# https://gitlab.com/bitspur/debian/ghostty
# https://github.com/clayrisser/debian-ghostty
APP_NAME=GhosTTY
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.0.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://download.opensuse.org/repositories/home:/clayrisser:/bookworm/Debian_12/amd64/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install dblab Golang-based command-line database client for multiple databases from package
APP_NAME=dblab
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based command-line database client for multiple databases."
APP_VERSION=0.32.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod +x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install gg Golang-based game collection for the terminal from package
# https://github.com/Kaamkiya/gg
APP_NAME=gg
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Golang-based game collection for the terminal."
APP_VERSION=0.8.1
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/kaamkiya-gg.mirror/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}
sudo ln -s /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install QroCAD cross-platform beginner-friendly desktop CAD tool from AppImage
APP_NAME=QroCAD
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform beginner-friendly desktop CAD tool."
APP_GUI_CATEGORIES="Graphics;Office;"
APP_GUI_KEYWORDS="CAD;Editor;"
APP_VERSION=1.7.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-desktop-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/qrocad/icon?402c9715fd9facb1f6d5e58e6cf2ce4461408c7054ed8d0d5d73bebc0830f8af
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install CPU Info cross-platform Java-based CPU info tool from package
# https://github.com/kamgurgul/cpu-info
APP_NAME=CPU-Info
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Java-based CPU info tool."
APP_GUI_CATEGORIES="System;Accessories;"
APP_GUI_KEYWORDS="CPU;"
APP_VERSION=1.4.3
APP_EXT=jar
FILE_NAME=${APP_NAME}-linux-x64-${APP_VERSION}-release
if ! [ -x "$(command -v java)" ]; then
	sudo apt install -y openjdk-17-jre
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/mirror/cpu-info/icon?ab09e27aae9d9aeba3e274e35c70d4c939fe1937dc521af3d6415a8310c8762c
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Dynamite Download Manager cross-platform multi-connection download manager from Debian package
APP_NAME=Dynamite
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=2025.1.25
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_v${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Thoth cross‐platform, Rust-based terminal scratchpad from package
APP_NAME=Thoth
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based terminal scratchpad."
APP_VERSION=0.1.72
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux-musl_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jooaf/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install HTTPie Desktop cross-platform GUI REST web services client from AppImage
APP_NAME=HTTPie
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform GUI REST web services client."
APP_GUI_CATEGORIES="Development;Programming;Internet;"
APP_GUI_KEYWORDS="HTTP;REST;"
APP_VERSION=2025.1.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/desktop/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://avatars.githubusercontent.com/u/24454777
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Chatbox cross-platform desktop client for ChatGPT, Claude, and other LLMs from AppImage
APP_NAME=Chatbox
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform desktop client for ChatGPT, Claude, and other LLMs."
APP_GUI_CATEGORIES="Development;Programming;Internet;"
APP_GUI_KEYWORDS="ChatGPT;LLM;Chatbot;"
APP_VERSION=0.10.4
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}.CE-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/Bin-Huang/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/Bin-Huang/${APP_NAME,,}/refs/heads/main/assets/icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install CompassCAD cross-platform beginner-friendly desktop CAD tool from AppImage
APP_NAME=CompassCAD
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform beginner-friendly desktop CAD tool."
APP_GUI_CATEGORIES="Graphics;Office;"
APP_GUI_KEYWORDS="CAD;Editor;"
APP_VERSION=1.7.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/compasscad/icon?08ece9bde6c706565b5e23756c08fe01d9e6477c299745d9c3fb435750860f38
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Terminal GPT cross‐platform, Golang-based terminal AI chatbots that do not require API keys from package
APP_NAME=tgpt
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based terminal AI chatbots that do not require API keys."
APP_VERSION=2.9.1
APP_EXT=N/A
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME} -J -L https://downloads.sourceforge.net/terminal-gpt.mirror/${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Dev Toolbox Python-based all-in-one development tool suite from Flatpak package
# https://github.com/aleiepure/devtoolbox
APP_NAME=devtoolbox
APP_GUI_NAME="Python-based all-in-one development tool suite."
APP_GUI_CATEGORIES="Programming;Development;System;"
APP_GUI_KEYWORDS="Utilities;Regex;JSON;YAML;"
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub me.iepure.${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/aleiepure/devtoolbox/38c0478a770bc5b6aad98ed91ec5224926bb5545/data/icons/hicolor/scalable/apps/me.iepure.devtoolbox.svg
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=flatpak run me.iepure.${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ThisWeekInMyLife Kanban-style style personal planner from Flatpak package
# https://github.com/zhrexl/ThisWeekInMyLife
APP_NAME=ThisWeekInMyLife
APP_GUI_NAME="Kanban-style style personal planner."
APP_GUI_CATEGORIES="Office;Accessories;"
APP_GUI_KEYWORDS="Kanban;Productivity;Planner;"
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install flathub io.github.zhrexl.${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/zhrexl/ThisWeekInMyLife/a9c6f38fc521542849bc428ab8c101729376e18a/data/icons/hicolor/scalable/apps/io.github.zhrexl.${APP_NAME,,}.svg
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=flatpak run io.github.zhrexl.${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install YTree terminal file manager for browsing file system and archives from source
# https://www.han.de/~werner/ytree.html
APP_NAME=YTree
APP_GUI_NAME="Terminal file manager for browsing file system and archives."
APP_VERSION=2.10
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}
sudo apt install -yy build-essential libreadline-dev libncursesw5-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://fossies.org/linux/misc/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${APP_NAME,,}*
make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install HTTPing terminal/TUI HTTP connection validation tool from source
# https://github.com/folkertvanheusden/HTTPing
APP_NAME=HTTPing
APP_GUI_NAME="Terminal/TUI HTTP connection validation tool."
APP_VERSION=4.4.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME}-${APP_VERSION}
sudo apt install -yy build-essential libncursesw5-dev cmake libssl-dev
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/folkertvanheusden/HTTPing/archive/refs/tags/v${APP_VERSION}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
cd /tmp/${FILE_NAME}
mkdir build && cd build
cmake -DUSE_SSL=ON -DUSE_TUI=ON .. && make && sudo make install
cd $HOME
sudo rm -rf /tmp/${APP_NAME}*

# Install LocalSend cross-platform LAN file transfer tool from AppImage
APP_NAME=LocalSend
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform LAN file transfer tool."
APP_GUI_CATEGORIES="Accessories;Networking;System;"
APP_GUI_KEYWORDS="File;Transfer;LAN;"
APP_VERSION=1.17.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}-linux-x86-64
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/refs/heads/main/app/assets/img/logo-128.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install SQL Studio cross‐platform, Rust-based terminal SQL client for multiple database platforms from package
APP_NAME="SQL Studio"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based terminal SQL client for multiple database platforms."
APP_VERSION=0.1.35
APP_EXT=tar.xz
FILE_NAME=${_APP_NAME}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${_APP_NAME}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${_APP_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${_APP_NAME}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Fileo cross-platform file manager with built-in tagging functionality from AppImage
# https://github.com/Michal-D4/fileo
APP_NAME=Fileo
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform file manager with built-in tagging functionality."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="File;Manager;"
APP_VERSION=1.3.46
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
# Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Daylight cross‐platform, Golang-based terminal tool to show sunrise and sunset times for your location from package
APP_NAME=Daylight
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based terminal tool to show sunrise and sunset times for your location."
APP_VERSION=1.0.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_Linux_$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/jbreckmckye/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Kasasa simple tool to pin a screenshot to the desktop for referencing from Flatpak package
# https://github.com/KelvinNovais/Kasasa
APP_NAME=Kasasa
APP_GUI_NAME="Simple tool to pin a screenshot to the desktop for referencing."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Utilities;Screenshot;"
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install io.github.kelvinnovais.${APP_NAME}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=flatpak run me.iepure.${APP_NAME}
# Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Vectro cross‐platform, Golang-based terminal RPN calculator from package
APP_NAME=Vectro
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based terminal RPN calculator."
APP_VERSION=0.1.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/gurgeous/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Eyedropper minimalist Rust-based color picker tool from Flatpak package
# https://github.com/FineFindus/eyedropper
APP_NAME=Eyedropper
APP_GUI_NAME="Minimalist Rust-based color picker tool."
APP_GUI_CATEGORIES="Accessories;System;"
APP_GUI_KEYWORDS="Utilities;Color;"
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install com.github.finefindus.${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/FineFindus/${APP_NAME,,}/e0ec190e5333af73917d29fafd7f669a1302f7ab/data/icons/com.github.finefindus.${APP_NAME,,}.svg
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=flatpak run com.github.finefindus.${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Notejot minimalist desktop notepad from Flatpak package
# https://github.com/lainsce/notejot
APP_NAME=Notejot
APP_GUI_NAME="Minimalist desktop notepad."
APP_GUI_CATEGORIES="Accessories;Office;"
APP_GUI_KEYWORDS="Notepad;"
FLATPAK_DOMAIN=io.github.lainsce
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install ${FLATPAK_DOMAIN}.${APP_NAME}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/lainsce/notejot/87e1ef8a88b4db5b672ce0dda1f5481ddf0a2ebd/data/icons/io.github.lainsce.${APP_NAME}.svg
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=flatpak run ${FLATPAK_DOMAIN}.${APP_NAME}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install ColorCode minimalist Python/GTK-based resistor color code tool from Flatpak package
# https://github.com/oyajun/color-code
APP_NAME=ColorCode
APP_GUI_NAME="Minimalist Python/GTK-based resistor color code tool."
APP_GUI_CATEGORIES="Accessories;Education;"
APP_GUI_KEYWORDS="Electronics;"
FLATPAK_DOMAIN=com.oyajun
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install ${FLATPAK_DOMAIN}.${APP_NAME}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/oyajun/color-code/678a3f1fa6f08797efdd3f8e9ed9d501d78f5ab6/data/icons/hicolor/scalable/apps/${FLATPAK_DOMAIN}.${APP_NAME}.svg 
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=flatpak run ${FLATPAK_DOMAIN}.${APP_NAME}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Text Pieces minimalist Rust/GTK-based text manipulation tool from Flatpak package
# https://gitlab.com/liferooter/textpieces
APP_NAME=TextPieces
APP_GUI_NAME="Minimalist Rust/GTK-based text manipulation tool."
APP_GUI_CATEGORIES="Accessories;Programming;Development;"
APP_GUI_KEYWORDS="Text;JSON;YAML;"
FLATPAK_DOMAIN=io.gitlab.liferooter
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install ${FLATPAK_DOMAIN}.${APP_NAME}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://gitlab.com/liferooter/textpieces/-/raw/main/data/icons/${FLATPAK_DOMAIN}.${APP_NAME}.svg
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=flatpak run ${FLATPAK_DOMAIN}.${APP_NAME}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install FireDragon customized version of Firefox web browser for Linux from AppImage
# https://github.com/Michal-D4/fileo
APP_NAME=FireDragon
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Customized version of Firefox web browser for Linux."
APP_GUI_CATEGORIES="Internet;System;"
APP_GUI_KEYWORDS="Browser;"
APP_VERSION=11.26.1-1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}.${APP_EXT,,}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://gitlab.com/garuda-linux/${APP_NAME,,}/builder/-/releases/v${APP_VERSION}/downloads/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://gitlab.com/garuda-linux/${APP_NAME,,}/builder/-/raw/main/source_files/browser/branding/${APP_NAME,,}/default48.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install SourceGit cross-platform GUI Git client from AppImage
# https://github.com/Michal-D4/fileo
APP_NAME=SourceGit
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform GUI Git client."
APP_GUI_CATEGORIES="Development;Programming;System;"
APP_GUI_KEYWORDS="Git;Version Control;"
APP_VERSION=2025.11
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-${APP_VERSION}.linux.$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}-scm/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}-scm/${APP_NAME,,}/refs/heads/master/build/resources/_common/icons/${APP_NAME,,}.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Neovide cross-platform GUI Neovim client from AppImage
# https://github.com/neovide/neovide
APP_NAME=Neovide
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform GUI Neovim client."
APP_GUI_CATEGORIES="Development;Programming;System;"
APP_GUI_KEYWORDS="Vim;Neovim;"
APP_VERSION=0.15.0
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${APP_NAME,,}/${APP_NAME,,}/releases/download/${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/${APP_NAME,,}/${APP_NAME,,}/refs/heads/main/assets/${APP_NAME,,}-48x48.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Mindolph cross-platform personal knowledge base with mind mapping, UML, and more from package
# https://github.com/mindolph/Mindolph
APP_NAME=Mindolph
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross-platform Java-based CPU info tool."
APP_GUI_CATEGORIES="Office;System;Accessories;"
APP_GUI_KEYWORDS="Knowledge;PIM;UML;"
APP_VERSION=1.12.0
APP_EXT=jar
FILE_NAME=${APP_NAME}-${APP_VERSION}
if ! [ -x "$(command -v java)" ]; then
	cd /tmp
	curl -o /tmp/jdk21.tar.gz -J -L https://download.java.net/java/GA/jdk21.0.2/f2283984656d49d69e91c558476027ac/13/GPL/openjdk-21.0.2_linux-x64_bin.tar.gz
	tar -xf /tmp/jdk21.tar.gz
	sudo mv /tmp/jdk-21.0.2 /usr/local/jdk21
	cat > /tmp/jdk21.sh << EOF
export JAVA_HOME=/usr/local/jdk21
export PATH=\$PATH:\$JAVA_HOME/bin
EOF
	sudo mv /tmp/jdk21.sh /etc/profile.d
	source /etc/profile.d/jdk21.sh
	sudo apt install -y libopenjfx-java
fi
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/mindolph/icon?dcb6221fe55f8a7ac6f0fa779482cc202d61e33ca79586c931f99e29eeeb804f
sudo mkdir -p /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${FILE_NAME}.${APP_EXT} /opt/${APP_NAME,,}
sudo cp -a -R /tmp/${APP_NAME,,}.png /opt/${APP_NAME,,}
sudo chmod -R 755 /opt/${APP_NAME,,}
cat > /tmp/${APP_NAME,,} << EOF
#! /bin/sh
cd /opt/${APP_NAME,,}
PATH=/opt/${APP_NAME,,}:\$PATH; export PATH
java -jar /opt/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
cd $HOME
EOF
sudo mv /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/opt/${APP_NAME,,}
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/opt/${APP_NAME,,}/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}* /tmp/${APP_NAME}*

# Install Keypunch minimalist Rust/GTK-based keyboarding learning tool from Flatpak package
# https://github.com/bragefuglseth/keypunch
APP_NAME=Keypunch
APP_GUI_NAME="Minimalist Rust/GTK-based keyboarding learning tool."
APP_GUI_CATEGORIES="Education;Programming;Development;"
APP_GUI_KEYWORDS="Keyboarding;"
FLATPAK_DOMAIN=dev.bragefuglseth
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install ${FLATPAK_DOMAIN}.${APP_NAME}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/bragefuglseth/keypunch/0100b4b3788a062cd21b6844f7b4733a19e9d3fc/data/artwork/icon/${FLATPAK_DOMAIN}.${APP_NAME}.svg
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=flatpak run ${FLATPAK_DOMAIN}.${APP_NAME}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Rain cross‐platform, Golang-based terminal BitTorrent client from package
APP_NAME=Rain
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Golang-based terminal BitTorrent client."
APP_VERSION=2.2.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_linux
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/cenkalti/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Rainfrog cross‐platform, Rust-based terminal SQLite database editor/manager from package
APP_NAME=Rainfrog
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based terminal SQLite database editor/manager."
APP_VERSION=0.3.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/achristmascarl/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Typhoon cross-platform minimalist GUI weather monitor from Debian package
APP_NAME=Typhoon
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=0.9.95
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_all
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/archisman-panigrahi/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Sonic Visualiser cross-platform tool for viisualisation, analysis, and annotation of audio from AppImage
APP_NAME="Sonic Visualiser"
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform tool for viisualisation, analysis, and annotation of audio."
APP_GUI_CATEGORIES="Multimedia;Audio;"
APP_GUI_KEYWORDS="Audio;Visualization;"
APP_VERSION=5.2.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=SonicVisualiser-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/${_APP_NAME}/${_APP_NAME}/releases/download/sv_v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${_APP_NAME}.png -J -L https://raw.githubusercontent.com/${_APP_NAME}/${_APP_NAME}/refs/heads/default/icons/sv-48x48.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${_APP_NAME}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${_APP_NAME}.png /usr/local/share/icons/${_APP_NAME}.png
cat > /tmp/${_APP_NAME}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${_APP_NAME}
Icon=/usr/local/share/icons/${_APP_NAME}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${_APP_NAME}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${_APP_NAME}*

# Install pacaptr cross‐platform, Rust-based pacman-like syntax wrapper for many package manager, including apt, from package
APP_NAME=pacaptr
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based pacman-like syntax wrapper for many package manager, including apt."
APP_VERSION=0.23.0
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-linux-$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/rami3l/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install yt-dlite cross-platform fast, lightweight video and audio downloader built on top of yt-dlp from Debian package
APP_NAME=yt-dlite
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.0-1
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install httpok cross-platform fast, minimalistic desktop HTTP client from AppImage
# https://github.com/iondodon/httpok
APP_NAME=httpok
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform fast, minimalistic desktop HTTP client."
APP_GUI_CATEGORIES="Development;Programming;System;"
APP_GUI_KEYWORDS="HTTP;REST;Web Services;"
APP_VERSION=0.5.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}_${APP_VERSION}_$(dpkg-architecture --query DEB_BUILD_ARCH_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/iondodon/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/iondodon/${APP_NAME,,}/refs/heads/main/${APP_NAME,,}-logo.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install WhippyTerm cross-platform minimalist console/terminal from Debian package
APP_NAME=WhippyTerm
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]')
APP_VERSION=1.0.3.0
APP_EXT=deb
FILE_NAME=${APP_NAME,,}_${APP_VERSION}-1
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/TheBeef/${APP_NAME}/releases/download/Rel_${APP_VERSION}/${FILE_NAME}.${APP_EXT}
sudo gdebi -n /tmp/${FILE_NAME}.${APP_EXT}
cd $HOME
rm -rf /tmp/*${APP_NAME,,}*

# Install Inspector Gtk4-based GUI for various command-line system monitoring tools from Flatpak package
# https://github.com/Nokse22/inspector
APP_NAME=Inspector
APP_GUI_NAME="Gtk4-based GUI for various command-line system monitoring tools."
APP_GUI_CATEGORIES="System;"
APP_GUI_KEYWORDS="Monitoring;"
FLATPAK_DOMAIN=io.github.nokse22
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install ${FLATPAK_DOMAIN}.${APP_NAME,,}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/Nokse22/inspector/b23a27ceb39325997858ff7860f109eb53cb4e41/data/icons/hicolor/scalable/apps/${FLATPAK_DOMAIN}.${APP_NAME,,}.svg
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=flatpak run ${FLATPAK_DOMAIN}.${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Electorrent cross-platform GUI front-end for multiple BitTorrent clients from AppImage
# https://github.com/tympanix/Electorrent
APP_NAME=Electorrent
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform GUI front-end for multiple BitTorrent clients."
APP_GUI_CATEGORIES="Multimedia;Internet;"
APP_GUI_KEYWORDS="BitTorrent;"
APP_VERSION=2.8.5
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME}-${APP_VERSION}
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/tympanix/${APP_NAME}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/tympanix/${APP_NAME}/refs/heads/master/assets/electron-icon.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Hotspot Linux 'perf' performance analysis GUI from AppImage
# https://github.com/KDAB/hotspot
APP_NAME=Hotspot
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Linux 'perf' performance analysis GUI."
APP_GUI_CATEGORIES="System;"
APP_GUI_KEYWORDS="Performance;"
APP_VERSION=1.5.1
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=${APP_NAME,,}-v${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/KDAB/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://raw.githubusercontent.com/KDAB/${APP_NAME,,}/refs/heads/master/src/images/icons/48-apps-hotspot.png
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Microsoft Edit cross‐platform, Rust-based console editor similar to old MS-DOS Edit from package
APP_NAME=Edit
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, Rust-based Rust-based console editor similar to old MS-DOS Edit."
APP_VERSION=1.0.0
APP_EXT=xz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-linux-gnu
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://github.com/microsoft/${APP_NAME,,}/releases/download/v${APP_VERSION}/${FILE_NAME}.${APP_EXT}
cd /tmp
unxz /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${FILE_NAME} /usr/local/bin
sudo chmod a+x /usr/local/bin/${FILE_NAME}
sudo ln -s -f /usr/local/bin/${FILE_NAME} /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install Raider Gtk4-based GUI file shredder (secure delete) tool from Flatpak package
# https://github.com/ADBeveridge/raider
APP_NAME=Raider
APP_GUI_NAME="Gtk4-based GUI file shredder (secure delete) tool."
APP_GUI_CATEGORIES="System;Accessories"
APP_GUI_KEYWORDS="Secure;Delete;"
FLATPAK_DOMAIN=com.github.ADBeveridge
sudo apt-get install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
sudo flatpak install ${FLATPAK_DOMAIN}.${APP_NAME}
curl -o /tmp/${APP_NAME,,}.svg -J -L https://raw.githubusercontent.com/ADBeveridge/${APP_NAME,,}/1baea142f09ba25225d77517be97d11ef44c883d/data/icons/hicolor/scalable/apps/com.github.ADBeveridge.Raider.svg
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.svg /usr/local/share/icons/${APP_NAME,,}.svg
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=flatpak run ${FLATPAK_DOMAIN}.${APP_NAME}
Icon=/usr/local/share/icons/${APP_NAME,,}.svg
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*

# Install Jello cross‐platform, command-line tool to filter JSON and JSON Lines data with Python syntax from package
APP_NAME=Jello
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, command-line tool to filter JSON and JSON Lines data with Python syntax."
APP_VERSION=1.6.1
APP_EXT=tar.gz
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-linux-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
tar -xf /tmp/${FILE_NAME}.${APP_EXT}
sudo cp -a /tmp/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install QSV cross‐platform, command-line tool for working with CSV files from package
APP_NAME=QSV
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr '[:blank:]' '-')
APP_GUI_NAME="Cross‐platform, command-line tool for working with CSV files."
APP_VERSION=5.0.3
APP_EXT=zip
FILE_NAME=${APP_NAME,,}-${APP_VERSION}-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)-unknown-linux-musl
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}.mirror/${FILE_NAME}.${APP_EXT}
cd /tmp
unzip /tmp/${FILE_NAME}.${APP_EXT} -d ${FILE_NAME}
sudo cp -a /tmp/${FILE_NAME}/${APP_NAME,,} /usr/local/bin
sudo chmod a+x /usr/local/bin/${APP_NAME,,}
cd $HOME
sudo rm -rf /tmp/${APP_NAME,,}*

# Install CircuiTikZ cross-platform, Qt-based GUI tool for designing electronic circuits using LaTeX from AppImage
# https://www.circuitikz-generator.xyz/
APP_NAME=CircuiTikZ
_APP_NAME=$(echo ${APP_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
APP_GUI_NAME="Cross-platform, Qt-based GUI tool for designing electronic circuits using LaTeX."
APP_GUI_CATEGORIES="Science;Electronics;"
APP_GUI_KEYWORDS="LaTeX;"
APP_VERSION=0.9
APP_EXT=AppImage
sudo apt install -y libfuse2
FILE_NAME=Circuitikz_Generator-$(dpkg-architecture --query DEB_BUILD_GNU_CPU)
curl -o /tmp/${FILE_NAME}.${APP_EXT} -J -L https://downloads.sourceforge.net/${APP_NAME,,}-generator/${FILE_NAME}.${APP_EXT}
curl -o /tmp/${APP_NAME,,}.png -J -L https://a.fsdn.com/allura/p/circuitikz-generator/icon?6b8772cba240a7b71e182fd13d18fa0fc6c1d909f8d8aae2bee6a209eed670a8
sudo cp /tmp/${FILE_NAME}.${APP_EXT} /usr/local/bin
sudo chmod +x /usr/local/bin/${FILE_NAME}.${APP_EXT}
sudo ln -s -f /usr/local/bin/${FILE_NAME}.${APP_EXT} /usr/local/bin/${APP_NAME,,}
sudo mkdir -p /usr/local/share/icons && sudo cp /tmp/${APP_NAME,,}.png /usr/local/share/icons/${APP_NAME,,}.png
cat > /tmp/${APP_NAME,,}.desktop << EOF
[Desktop Entry]
Name=${APP_NAME}
Comment=${APP_GUI_NAME}
GenericName=${APP_NAME}
Path=/usr/local/bin
Exec=/usr/local/bin/${APP_NAME,,}
Icon=/usr/local/share/icons/${APP_NAME,,}.png
Type=Application
StartupNotify=true
Terminal=false
Categories=${APP_GUI_CATEGORIES}
Keywords=${APP_GUI_KEYWORDS}
EOF
sudo mv /tmp/${APP_NAME,,}.desktop /usr/share/applications/
cd $HOME
rm -rf /tmp/${APP_NAME,,}*
